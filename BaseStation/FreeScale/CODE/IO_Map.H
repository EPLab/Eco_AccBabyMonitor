/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : IO_Map.H
**     Project   : Connector_App
**     Processor : MC9S12E64CFU
**     Beantype  : IO_Map
**     Version   : Driver 01.01
**     Compiler  : Metrowerks HC12 C Compiler
**     Date/Time : 6/8/2005, 6:19 PM
**     Abstract  :
**         This bean "IO_Map" implements an IO devices mapping.
**     Settings  :
**
**     Contents  :
**         No public methods
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2002
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/

/* Linker pragmas */
#pragma LINK_INFO DERIVATIVE   "MC9S12E64"
#pragma LINK_INFO OSCFREQUENCY "16000000"


#define REG_BASE 0x0000                /* Base address for the I/O register block */

/* Based on CPU DB MC9S12E128_80, version 2.87.369 (RegistersPrg V1.027) */
#ifndef _MC9S12E128_80_H
#define _MC9S12E128_80_H

#include "PE_Types.h"

#pragma MESSAGE DISABLE C1106 /* WARNING C1106: Non-standard bitfield type */

/*********************************************/
/*                                           */
/* PE I/O map format                         */
/*                                           */
/*********************************************/

/*** PORTAB - Port AB Register; 0x00000000 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PORTA - Port A Register; 0x00000000 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Port A Bit 0 */
        byte BIT1        :1;                                       /* Port A Bit 1 */
        byte BIT2        :1;                                       /* Port A Bit 2 */
        byte BIT3        :1;                                       /* Port A Bit 3 */
        byte BIT4        :1;                                       /* Port A Bit 4 */
        byte BIT5        :1;                                       /* Port A Bit 5 */
        byte BIT6        :1;                                       /* Port A Bit 6 */
        byte BIT7        :1;                                       /* Port A Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PORTASTR;
    #define PORTA _PORTAB.Overlap_STR.PORTASTR.Byte
    #define PORTA_BIT0 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT0
    #define PORTA_BIT1 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT1
    #define PORTA_BIT2 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT2
    #define PORTA_BIT3 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT3
    #define PORTA_BIT4 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT4
    #define PORTA_BIT5 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT5
    #define PORTA_BIT6 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT6
    #define PORTA_BIT7 _PORTAB.Overlap_STR.PORTASTR.Bits.BIT7
    #define PORTA_BIT _PORTAB.Overlap_STR.PORTASTR.MergedBits.grpBIT
    
    /*** PORTB - Port B Register; 0x00000001 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Port B Bit 0 */
        byte BIT1        :1;                                       /* Port B Bit 1 */
        byte BIT2        :1;                                       /* Port B Bit 2 */
        byte BIT3        :1;                                       /* Port B Bit 3 */
        byte BIT4        :1;                                       /* Port B Bit 4 */
        byte BIT5        :1;                                       /* Port B Bit 5 */
        byte BIT6        :1;                                       /* Port B Bit 6 */
        byte BIT7        :1;                                       /* Port B Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PORTBSTR;
    #define PORTB _PORTAB.Overlap_STR.PORTBSTR.Byte
    #define PORTB_BIT0 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT0
    #define PORTB_BIT1 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT1
    #define PORTB_BIT2 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT2
    #define PORTB_BIT3 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT3
    #define PORTB_BIT4 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT4
    #define PORTB_BIT5 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT5
    #define PORTB_BIT6 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT6
    #define PORTB_BIT7 _PORTAB.Overlap_STR.PORTBSTR.Bits.BIT7
    #define PORTB_BIT _PORTAB.Overlap_STR.PORTBSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word BIT0        :1;                                       /* Port AB Bit 0 */
    word BIT1        :1;                                       /* Port AB Bit 1 */
    word BIT2        :1;                                       /* Port AB Bit 2 */
    word BIT3        :1;                                       /* Port AB Bit 3 */
    word BIT4        :1;                                       /* Port AB Bit 4 */
    word BIT5        :1;                                       /* Port AB Bit 5 */
    word BIT6        :1;                                       /* Port AB Bit 6 */
    word BIT7        :1;                                       /* Port AB Bit 7 */
    word BIT8        :1;                                       /* Port AB Bit 8 */
    word BIT9        :1;                                       /* Port AB Bit 9 */
    word BIT10       :1;                                       /* Port AB Bit 10 */
    word BIT11       :1;                                       /* Port AB Bit 11 */
    word BIT12       :1;                                       /* Port AB Bit 12 */
    word BIT13       :1;                                       /* Port AB Bit 13 */
    word BIT14       :1;                                       /* Port AB Bit 14 */
    word BIT15       :1;                                       /* Port AB Bit 15 */
  } Bits;
  struct {
    word grpBIT  :16;
  } MergedBits;
} PORTABSTR;
extern volatile PORTABSTR _PORTAB @(REG_BASE + 0x00000000);
#define PORTAB _PORTAB.Word
#define PORTAB_BIT0 _PORTAB.Bits.BIT0
#define PORTAB_BIT1 _PORTAB.Bits.BIT1
#define PORTAB_BIT2 _PORTAB.Bits.BIT2
#define PORTAB_BIT3 _PORTAB.Bits.BIT3
#define PORTAB_BIT4 _PORTAB.Bits.BIT4
#define PORTAB_BIT5 _PORTAB.Bits.BIT5
#define PORTAB_BIT6 _PORTAB.Bits.BIT6
#define PORTAB_BIT7 _PORTAB.Bits.BIT7
#define PORTAB_BIT8 _PORTAB.Bits.BIT8
#define PORTAB_BIT9 _PORTAB.Bits.BIT9
#define PORTAB_BIT10 _PORTAB.Bits.BIT10
#define PORTAB_BIT11 _PORTAB.Bits.BIT11
#define PORTAB_BIT12 _PORTAB.Bits.BIT12
#define PORTAB_BIT13 _PORTAB.Bits.BIT13
#define PORTAB_BIT14 _PORTAB.Bits.BIT14
#define PORTAB_BIT15 _PORTAB.Bits.BIT15
#define PORTAB_BIT _PORTAB.MergedBits.grpBIT


/*** DDRAB - Port AB Data Direction Register; 0x00000002 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** DDRA - Port A Data Direction Register; 0x00000002 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Data Direction Port A Bit 0 */
        byte BIT1        :1;                                       /* Data Direction Port A Bit 1 */
        byte BIT2        :1;                                       /* Data Direction Port A Bit 2 */
        byte BIT3        :1;                                       /* Data Direction Port A Bit 3 */
        byte BIT4        :1;                                       /* Data Direction Port A Bit 4 */
        byte BIT5        :1;                                       /* Data Direction Port A Bit 5 */
        byte BIT6        :1;                                       /* Data Direction Port A Bit 6 */
        byte BIT7        :1;                                       /* Data Direction Port A Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } DDRASTR;
    #define DDRA _DDRAB.Overlap_STR.DDRASTR.Byte
    #define DDRA_BIT0 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT0
    #define DDRA_BIT1 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT1
    #define DDRA_BIT2 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT2
    #define DDRA_BIT3 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT3
    #define DDRA_BIT4 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT4
    #define DDRA_BIT5 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT5
    #define DDRA_BIT6 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT6
    #define DDRA_BIT7 _DDRAB.Overlap_STR.DDRASTR.Bits.BIT7
    #define DDRA_BIT _DDRAB.Overlap_STR.DDRASTR.MergedBits.grpBIT
    
    /*** DDRB - Port B Data Direction Register; 0x00000003 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Data Direction Port B Bit 0 */
        byte BIT1        :1;                                       /* Data Direction Port B Bit 1 */
        byte BIT2        :1;                                       /* Data Direction Port B Bit 2 */
        byte BIT3        :1;                                       /* Data Direction Port B Bit 3 */
        byte BIT4        :1;                                       /* Data Direction Port B Bit 4 */
        byte BIT5        :1;                                       /* Data Direction Port B Bit 5 */
        byte BIT6        :1;                                       /* Data Direction Port B Bit 6 */
        byte BIT7        :1;                                       /* Data Direction Port B Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } DDRBSTR;
    #define DDRB _DDRAB.Overlap_STR.DDRBSTR.Byte
    #define DDRB_BIT0 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT0
    #define DDRB_BIT1 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT1
    #define DDRB_BIT2 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT2
    #define DDRB_BIT3 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT3
    #define DDRB_BIT4 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT4
    #define DDRB_BIT5 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT5
    #define DDRB_BIT6 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT6
    #define DDRB_BIT7 _DDRAB.Overlap_STR.DDRBSTR.Bits.BIT7
    #define DDRB_BIT _DDRAB.Overlap_STR.DDRBSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word BIT0        :1;                                       /* Data Direction Port B Bit 0 */
    word BIT1        :1;                                       /* Data Direction Port B Bit 1 */
    word BIT2        :1;                                       /* Data Direction Port B Bit 2 */
    word BIT3        :1;                                       /* Data Direction Port B Bit 3 */
    word BIT4        :1;                                       /* Data Direction Port B Bit 4 */
    word BIT5        :1;                                       /* Data Direction Port B Bit 5 */
    word BIT6        :1;                                       /* Data Direction Port B Bit 6 */
    word BIT7        :1;                                       /* Data Direction Port B Bit 7 */
    word BIT8        :1;                                       /* Data Direction Port A Bit 8 */
    word BIT9        :1;                                       /* Data Direction Port A Bit 9 */
    word BIT10       :1;                                       /* Data Direction Port A Bit 10 */
    word BIT11       :1;                                       /* Data Direction Port A Bit 11 */
    word BIT12       :1;                                       /* Data Direction Port A Bit 12 */
    word BIT13       :1;                                       /* Data Direction Port A Bit 13 */
    word BIT14       :1;                                       /* Data Direction Port A Bit 14 */
    word BIT15       :1;                                       /* Data Direction Port A Bit 15 */
  } Bits;
  struct {
    word grpBIT  :16;
  } MergedBits;
} DDRABSTR;
extern volatile DDRABSTR _DDRAB @(REG_BASE + 0x00000002);
#define DDRAB _DDRAB.Word
#define DDRAB_BIT0 _DDRAB.Bits.BIT0
#define DDRAB_BIT1 _DDRAB.Bits.BIT1
#define DDRAB_BIT2 _DDRAB.Bits.BIT2
#define DDRAB_BIT3 _DDRAB.Bits.BIT3
#define DDRAB_BIT4 _DDRAB.Bits.BIT4
#define DDRAB_BIT5 _DDRAB.Bits.BIT5
#define DDRAB_BIT6 _DDRAB.Bits.BIT6
#define DDRAB_BIT7 _DDRAB.Bits.BIT7
#define DDRAB_BIT8 _DDRAB.Bits.BIT8
#define DDRAB_BIT9 _DDRAB.Bits.BIT9
#define DDRAB_BIT10 _DDRAB.Bits.BIT10
#define DDRAB_BIT11 _DDRAB.Bits.BIT11
#define DDRAB_BIT12 _DDRAB.Bits.BIT12
#define DDRAB_BIT13 _DDRAB.Bits.BIT13
#define DDRAB_BIT14 _DDRAB.Bits.BIT14
#define DDRAB_BIT15 _DDRAB.Bits.BIT15
#define DDRAB_BIT _DDRAB.MergedBits.grpBIT


/*** TIM0_TCNT - TIM0 Timer Count Register; 0x00000044 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM0_TCNTHi - TIM0 Timer Count Register High; 0x00000044 ***/
    union {
      byte Byte;
      struct {
        byte BIT15       :1;                                       /* Timer Count Register Bit 15 */
        byte BIT14       :1;                                       /* Timer Count Register Bit 14 */
        byte BIT13       :1;                                       /* Timer Count Register Bit 13 */
        byte BIT12       :1;                                       /* Timer Count Register Bit 12 */
        byte BIT11       :1;                                       /* Timer Count Register Bit 11 */
        byte BIT10       :1;                                       /* Timer Count Register Bit 10 */
        byte BIT9        :1;                                       /* Timer Count Register Bit 9 */
        byte BIT8        :1;                                       /* Timer Count Register Bit 8 */
      } Bits;
    } TIM0_TCNTHiSTR;
    #define TIM0_TCNTHi _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Byte
    #define TIM0_TCNTHi_BIT15 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT15
    #define TIM0_TCNTHi_BIT14 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT14
    #define TIM0_TCNTHi_BIT13 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT13
    #define TIM0_TCNTHi_BIT12 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT12
    #define TIM0_TCNTHi_BIT11 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT11
    #define TIM0_TCNTHi_BIT10 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT10
    #define TIM0_TCNTHi_BIT9 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT9
    #define TIM0_TCNTHi_BIT8 _TIM0_TCNT.Overlap_STR.TIM0_TCNTHiSTR.Bits.BIT8
    
    /*** TIM0_TCNTLo - TIM0 Timer Count Register Low; 0x00000045 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Count Register Bit 0 */
        byte BIT1        :1;                                       /* Timer Count Register Bit 1 */
        byte BIT2        :1;                                       /* Timer Count Register Bit 2 */
        byte BIT3        :1;                                       /* Timer Count Register Bit 3 */
        byte BIT4        :1;                                       /* Timer Count Bit Register 4 */
        byte BIT5        :1;                                       /* Timer Count Bit Register 5 */
        byte BIT6        :1;                                       /* Timer Count Bit Register 6 */
        byte BIT7        :1;                                       /* Timer Count Bit Register 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM0_TCNTLoSTR;
    #define TIM0_TCNTLo _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Byte
    #define TIM0_TCNTLo_BIT0 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT0
    #define TIM0_TCNTLo_BIT1 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT1
    #define TIM0_TCNTLo_BIT2 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT2
    #define TIM0_TCNTLo_BIT3 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT3
    #define TIM0_TCNTLo_BIT4 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT4
    #define TIM0_TCNTLo_BIT5 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT5
    #define TIM0_TCNTLo_BIT6 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT6
    #define TIM0_TCNTLo_BIT7 _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.Bits.BIT7
    #define TIM0_TCNTLo_BIT _TIM0_TCNT.Overlap_STR.TIM0_TCNTLoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM0_TCNTSTR;
extern volatile TIM0_TCNTSTR _TIM0_TCNT @(REG_BASE + 0x00000044);
#define TIM0_TCNT _TIM0_TCNT.Word
#define TIM0_TCNT_BIT _TIM0_TCNT.MergedBits.grpBIT


/*** TIM0_TC4 - TIM0 Timer Input Capture/Output Compare Register 4; 0x00000058 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM0_TC4Hi - TIM0 Timer Input Capture/Output Compare Register 4 High; 0x00000058 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM0_TC4HiSTR;
    #define TIM0_TC4Hi _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Byte
    #define TIM0_TC4Hi_BIT8 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT8
    #define TIM0_TC4Hi_BIT9 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT9
    #define TIM0_TC4Hi_BIT10 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT10
    #define TIM0_TC4Hi_BIT11 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT11
    #define TIM0_TC4Hi_BIT12 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT12
    #define TIM0_TC4Hi_BIT13 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT13
    #define TIM0_TC4Hi_BIT14 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT14
    #define TIM0_TC4Hi_BIT15 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.Bits.BIT15
    #define TIM0_TC4Hi_BIT_8 _TIM0_TC4.Overlap_STR.TIM0_TC4HiSTR.MergedBits.grpBIT_8
    #define TIM0_TC4Hi_BIT TIM0_TC4Hi_BIT_8
    
    /*** TIM0_TC4Lo - TIM0 Timer Input Capture/Output Compare Register 4 Low; 0x00000059 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM0_TC4LoSTR;
    #define TIM0_TC4Lo _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Byte
    #define TIM0_TC4Lo_BIT0 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT0
    #define TIM0_TC4Lo_BIT1 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT1
    #define TIM0_TC4Lo_BIT2 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT2
    #define TIM0_TC4Lo_BIT3 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT3
    #define TIM0_TC4Lo_BIT4 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT4
    #define TIM0_TC4Lo_BIT5 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT5
    #define TIM0_TC4Lo_BIT6 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT6
    #define TIM0_TC4Lo_BIT7 _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.Bits.BIT7
    #define TIM0_TC4Lo_BIT _TIM0_TC4.Overlap_STR.TIM0_TC4LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM0_TC4STR;
extern volatile TIM0_TC4STR _TIM0_TC4 @(REG_BASE + 0x00000058);
#define TIM0_TC4 _TIM0_TC4.Word
#define TIM0_TC4_BIT _TIM0_TC4.MergedBits.grpBIT


/*** TIM0_TC5 - TIM0 Timer Input Capture/Output Compare Register 5; 0x0000005A ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM0_TC5Hi - TIM0 Timer Input Capture/Output Compare Register 5 High; 0x0000005A ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM0_TC5HiSTR;
    #define TIM0_TC5Hi _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Byte
    #define TIM0_TC5Hi_BIT8 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT8
    #define TIM0_TC5Hi_BIT9 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT9
    #define TIM0_TC5Hi_BIT10 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT10
    #define TIM0_TC5Hi_BIT11 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT11
    #define TIM0_TC5Hi_BIT12 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT12
    #define TIM0_TC5Hi_BIT13 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT13
    #define TIM0_TC5Hi_BIT14 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT14
    #define TIM0_TC5Hi_BIT15 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.Bits.BIT15
    #define TIM0_TC5Hi_BIT_8 _TIM0_TC5.Overlap_STR.TIM0_TC5HiSTR.MergedBits.grpBIT_8
    #define TIM0_TC5Hi_BIT TIM0_TC5Hi_BIT_8
    
    /*** TIM0_TC5Lo - TIM0 Timer Input Capture/Output Compare Register 5 Low; 0x0000005B ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM0_TC5LoSTR;
    #define TIM0_TC5Lo _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Byte
    #define TIM0_TC5Lo_BIT0 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT0
    #define TIM0_TC5Lo_BIT1 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT1
    #define TIM0_TC5Lo_BIT2 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT2
    #define TIM0_TC5Lo_BIT3 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT3
    #define TIM0_TC5Lo_BIT4 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT4
    #define TIM0_TC5Lo_BIT5 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT5
    #define TIM0_TC5Lo_BIT6 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT6
    #define TIM0_TC5Lo_BIT7 _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.Bits.BIT7
    #define TIM0_TC5Lo_BIT _TIM0_TC5.Overlap_STR.TIM0_TC5LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM0_TC5STR;
extern volatile TIM0_TC5STR _TIM0_TC5 @(REG_BASE + 0x0000005A);
#define TIM0_TC5 _TIM0_TC5.Word
#define TIM0_TC5_BIT _TIM0_TC5.MergedBits.grpBIT


/*** TIM0_TC6 - TIM0 Timer Input Capture/Output Compare Register 6; 0x0000005C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM0_TC6Hi - TIM0 Timer Input Capture/Output Compare Register 6 High; 0x0000005C ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM0_TC6HiSTR;
    #define TIM0_TC6Hi _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Byte
    #define TIM0_TC6Hi_BIT8 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT8
    #define TIM0_TC6Hi_BIT9 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT9
    #define TIM0_TC6Hi_BIT10 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT10
    #define TIM0_TC6Hi_BIT11 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT11
    #define TIM0_TC6Hi_BIT12 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT12
    #define TIM0_TC6Hi_BIT13 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT13
    #define TIM0_TC6Hi_BIT14 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT14
    #define TIM0_TC6Hi_BIT15 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.Bits.BIT15
    #define TIM0_TC6Hi_BIT_8 _TIM0_TC6.Overlap_STR.TIM0_TC6HiSTR.MergedBits.grpBIT_8
    #define TIM0_TC6Hi_BIT TIM0_TC6Hi_BIT_8
    
    /*** TIM0_TC6Lo - TIM0 Timer Input Capture/Output Compare Register 6 Low; 0x0000005D ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM0_TC6LoSTR;
    #define TIM0_TC6Lo _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Byte
    #define TIM0_TC6Lo_BIT0 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT0
    #define TIM0_TC6Lo_BIT1 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT1
    #define TIM0_TC6Lo_BIT2 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT2
    #define TIM0_TC6Lo_BIT3 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT3
    #define TIM0_TC6Lo_BIT4 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT4
    #define TIM0_TC6Lo_BIT5 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT5
    #define TIM0_TC6Lo_BIT6 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT6
    #define TIM0_TC6Lo_BIT7 _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.Bits.BIT7
    #define TIM0_TC6Lo_BIT _TIM0_TC6.Overlap_STR.TIM0_TC6LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM0_TC6STR;
extern volatile TIM0_TC6STR _TIM0_TC6 @(REG_BASE + 0x0000005C);
#define TIM0_TC6 _TIM0_TC6.Word
#define TIM0_TC6_BIT _TIM0_TC6.MergedBits.grpBIT


/*** TIM0_TC7 - TIM0 Timer Input Capture/Output Compare Register 7; 0x0000005E ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM0_TC7Hi - TIM0 Timer Input Capture/Output Compare Register 7 High; 0x0000005E ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM0_TC7HiSTR;
    #define TIM0_TC7Hi _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Byte
    #define TIM0_TC7Hi_BIT8 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT8
    #define TIM0_TC7Hi_BIT9 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT9
    #define TIM0_TC7Hi_BIT10 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT10
    #define TIM0_TC7Hi_BIT11 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT11
    #define TIM0_TC7Hi_BIT12 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT12
    #define TIM0_TC7Hi_BIT13 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT13
    #define TIM0_TC7Hi_BIT14 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT14
    #define TIM0_TC7Hi_BIT15 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.Bits.BIT15
    #define TIM0_TC7Hi_BIT_8 _TIM0_TC7.Overlap_STR.TIM0_TC7HiSTR.MergedBits.grpBIT_8
    #define TIM0_TC7Hi_BIT TIM0_TC7Hi_BIT_8
    
    /*** TIM0_TC7Lo - TIM0 Timer Input Capture/Output Compare Register 7 Low; 0x0000005F ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM0_TC7LoSTR;
    #define TIM0_TC7Lo _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Byte
    #define TIM0_TC7Lo_BIT0 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT0
    #define TIM0_TC7Lo_BIT1 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT1
    #define TIM0_TC7Lo_BIT2 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT2
    #define TIM0_TC7Lo_BIT3 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT3
    #define TIM0_TC7Lo_BIT4 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT4
    #define TIM0_TC7Lo_BIT5 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT5
    #define TIM0_TC7Lo_BIT6 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT6
    #define TIM0_TC7Lo_BIT7 _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.Bits.BIT7
    #define TIM0_TC7Lo_BIT _TIM0_TC7.Overlap_STR.TIM0_TC7LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM0_TC7STR;
extern volatile TIM0_TC7STR _TIM0_TC7 @(REG_BASE + 0x0000005E);
#define TIM0_TC7 _TIM0_TC7.Word
#define TIM0_TC7_BIT _TIM0_TC7.MergedBits.grpBIT


/*** TIM0_PACNT - TIM0 Pulse Accumulators Count Register; 0x00000062 ***/
typedef union {
  word Word;
  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM0_PACNTSTR;
extern volatile TIM0_PACNTSTR _TIM0_PACNT @(REG_BASE + 0x00000062);
#define TIM0_PACNT _TIM0_PACNT.Word
#define TIM0_PACNT_BIT _TIM0_PACNT.MergedBits.grpBIT


/*** ATDCTL23 - ATD Control Register 23; 0x00000082 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDCTL2 - ATD Control Register 2; 0x00000082 ***/
    union {
      byte Byte;
      struct {
        byte ASCIF       :1;                                       /* ATD Sequence Complete Interrupt Flag */
        byte ASCIE       :1;                                       /* ATD Sequence Complete Interrupt Enable */
        byte ETRIGE      :1;                                       /* External Trigger Mode enable */
        byte ETRIGP      :1;                                       /* External Trigger Polarity */
        byte ETRIGLE     :1;                                       /* External Trigger Level/Edge control */
        byte AWAI        :1;                                       /* ATD Power Down in Wait Mode */
        byte AFFC        :1;                                       /* ATD Fast Conversion Complete Flag Clear */
        byte ADPU        :1;                                       /* ATD Disable / Power Down */
      } Bits;
    } ATDCTL2STR;
    #define ATDCTL2 _ATDCTL23.Overlap_STR.ATDCTL2STR.Byte
    #define ATDCTL2_ASCIF _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.ASCIF
    #define ATDCTL2_ASCIE _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.ASCIE
    #define ATDCTL2_ETRIGE _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.ETRIGE
    #define ATDCTL2_ETRIGP _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.ETRIGP
    #define ATDCTL2_ETRIGLE _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.ETRIGLE
    #define ATDCTL2_AWAI _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.AWAI
    #define ATDCTL2_AFFC _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.AFFC
    #define ATDCTL2_ADPU _ATDCTL23.Overlap_STR.ATDCTL2STR.Bits.ADPU
    
    /*** ATDCTL3 - ATD Control Register 3; 0x00000083 ***/
    union {
      byte Byte;
      struct {
        byte FRZ0        :1;                                       /* Background Debug Freeze Enable */
        byte FRZ1        :1;                                       /* Background Debug Freeze Enable */
        byte FIFO        :1;                                       /* Result Register FIFO Mode */
        byte S1C         :1;                                       /* Conversion Sequence Length 1 */
        byte S2C         :1;                                       /* Conversion Sequence Length 2 */
        byte S4C         :1;                                       /* Conversion Sequence Length 4 */
        byte S8C         :1;                                       /* Conversion Sequence Length 8 */
        byte             :1; 
      } Bits;
      struct {
        byte grpFRZ :2;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
      } MergedBits;
    } ATDCTL3STR;
    #define ATDCTL3 _ATDCTL23.Overlap_STR.ATDCTL3STR.Byte
    #define ATDCTL3_FRZ0 _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.FRZ0
    #define ATDCTL3_FRZ1 _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.FRZ1
    #define ATDCTL3_FIFO _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.FIFO
    #define ATDCTL3_S1C _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.S1C
    #define ATDCTL3_S2C _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.S2C
    #define ATDCTL3_S4C _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.S4C
    #define ATDCTL3_S8C _ATDCTL23.Overlap_STR.ATDCTL3STR.Bits.S8C
    #define ATDCTL3_FRZ _ATDCTL23.Overlap_STR.ATDCTL3STR.MergedBits.grpFRZ
    
  } Overlap_STR;

  struct {
    word FRZ0        :1;                                       /* Background Debug Freeze Enable */
    word FRZ1        :1;                                       /* Background Debug Freeze Enable */
    word FIFO        :1;                                       /* Result Register FIFO Mode */
    word S1C         :1;                                       /* Conversion Sequence Length 1 */
    word S2C         :1;                                       /* Conversion Sequence Length 2 */
    word S4C         :1;                                       /* Conversion Sequence Length 4 */
    word S8C         :1;                                       /* Conversion Sequence Length 8 */
    word             :1; 
    word ASCIF       :1;                                       /* ATD Sequence Complete Interrupt Flag */
    word ASCIE       :1;                                       /* ATD Sequence Complete Interrupt Enable */
    word ETRIGE      :1;                                       /* External Trigger Mode enable */
    word ETRIGP      :1;                                       /* External Trigger Polarity */
    word ETRIGLE     :1;                                       /* External Trigger Level/Edge control */
    word AWAI        :1;                                       /* ATD Wait Mode */
    word AFFC        :1;                                       /* ATD Fast Conversion Complete Flag Clear */
    word ADPU        :1;                                       /* ATD Disable / Power Down */
  } Bits;
  struct {
    word grpFRZ  :2;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
  } MergedBits;
} ATDCTL23STR;
extern volatile ATDCTL23STR _ATDCTL23 @(REG_BASE + 0x00000082);
#define ATDCTL23 _ATDCTL23.Word
#define ATDCTL23_FRZ0 _ATDCTL23.Bits.FRZ0
#define ATDCTL23_FRZ1 _ATDCTL23.Bits.FRZ1
#define ATDCTL23_FIFO _ATDCTL23.Bits.FIFO
#define ATDCTL23_S1C _ATDCTL23.Bits.S1C
#define ATDCTL23_S2C _ATDCTL23.Bits.S2C
#define ATDCTL23_S4C _ATDCTL23.Bits.S4C
#define ATDCTL23_S8C _ATDCTL23.Bits.S8C
#define ATDCTL23_ASCIF _ATDCTL23.Bits.ASCIF
#define ATDCTL23_ASCIE _ATDCTL23.Bits.ASCIE
#define ATDCTL23_ETRIGE _ATDCTL23.Bits.ETRIGE
#define ATDCTL23_ETRIGP _ATDCTL23.Bits.ETRIGP
#define ATDCTL23_ETRIGLE _ATDCTL23.Bits.ETRIGLE
#define ATDCTL23_AWAI _ATDCTL23.Bits.AWAI
#define ATDCTL23_AFFC _ATDCTL23.Bits.AFFC
#define ATDCTL23_ADPU _ATDCTL23.Bits.ADPU
#define ATDCTL23_FRZ _ATDCTL23.MergedBits.grpFRZ


/*** ATDCTL45 - ATD Control Register 45; 0x00000084 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDCTL4 - ATD Control Register 4; 0x00000084 ***/
    union {
      byte Byte;
      struct {
        byte PRS0        :1;                                       /* ATD Clock Prescaler 0 */
        byte PRS1        :1;                                       /* ATD Clock Prescaler 1 */
        byte PRS2        :1;                                       /* ATD Clock Prescaler 2 */
        byte PRS3        :1;                                       /* ATD Clock Prescaler 3 */
        byte PRS4        :1;                                       /* ATD Clock Prescaler 4 */
        byte SMP0        :1;                                       /* Sample Time Select 0 */
        byte SMP1        :1;                                       /* Sample Time Select 1 */
        byte SRES8       :1;                                       /* ATD Resolution Select */
      } Bits;
      struct {
        byte grpPRS :5;
        byte grpSMP :2;
        byte grpSRES_8 :1;
      } MergedBits;
    } ATDCTL4STR;
    #define ATDCTL4 _ATDCTL45.Overlap_STR.ATDCTL4STR.Byte
    #define ATDCTL4_PRS0 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.PRS0
    #define ATDCTL4_PRS1 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.PRS1
    #define ATDCTL4_PRS2 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.PRS2
    #define ATDCTL4_PRS3 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.PRS3
    #define ATDCTL4_PRS4 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.PRS4
    #define ATDCTL4_SMP0 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.SMP0
    #define ATDCTL4_SMP1 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.SMP1
    #define ATDCTL4_SRES8 _ATDCTL45.Overlap_STR.ATDCTL4STR.Bits.SRES8
    #define ATDCTL4_PRS _ATDCTL45.Overlap_STR.ATDCTL4STR.MergedBits.grpPRS
    #define ATDCTL4_SMP _ATDCTL45.Overlap_STR.ATDCTL4STR.MergedBits.grpSMP
    
    /*** ATDCTL5 - ATD Control Register 5; 0x00000085 ***/
    union {
      byte Byte;
      struct {
        byte CA          :1;                                       /* Analog Input Channel Select Code A */
        byte CB          :1;                                       /* Analog Input Channel Select Code B */
        byte CC          :1;                                       /* Analog Input Channel Select Code C */
        byte CD          :1;                                       /* Analog Input Channel Select Code D */
        byte MULT        :1;                                       /* Multi-Channel Sample Mode */
        byte SCAN        :1;                                       /* Continuous Conversion Sequence Mode */
        byte DSGN        :1;                                       /* Signed/Unsigned Result Data Mode */
        byte DJM         :1;                                       /* Result Register Data Justification Mode */
      } Bits;
    } ATDCTL5STR;
    #define ATDCTL5 _ATDCTL45.Overlap_STR.ATDCTL5STR.Byte
    #define ATDCTL5_CA _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.CA
    #define ATDCTL5_CB _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.CB
    #define ATDCTL5_CC _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.CC
    #define ATDCTL5_CD _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.CD
    #define ATDCTL5_MULT _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.MULT
    #define ATDCTL5_SCAN _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.SCAN
    #define ATDCTL5_DSGN _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.DSGN
    #define ATDCTL5_DJM _ATDCTL45.Overlap_STR.ATDCTL5STR.Bits.DJM
    
  } Overlap_STR;

  struct {
    word CA          :1;                                       /* Analog Input Channel Select Code A */
    word CB          :1;                                       /* Analog Input Channel Select Code B */
    word CC          :1;                                       /* Analog Input Channel Select Code C */
    word CD          :1;                                       /* Analog Input Channel Select Code D */
    word MULT        :1;                                       /* Multi-Channel Sample Mode */
    word SCAN        :1;                                       /* Continuous Conversion Sequence Mode */
    word DSGN        :1;                                       /* Signed/Unsigned Result Data Mode */
    word DJM         :1;                                       /* Result Register Data Justification Mode */
    word PRS0        :1;                                       /* ATD Clock Prescaler 0 */
    word PRS1        :1;                                       /* ATD Clock Prescaler 1 */
    word PRS2        :1;                                       /* ATD Clock Prescaler 2 */
    word PRS3        :1;                                       /* ATD Clock Prescaler 3 */
    word PRS4        :1;                                       /* ATD Clock Prescaler 4 */
    word SMP0        :1;                                       /* Sample Time Select 0 */
    word SMP1        :1;                                       /* Sample Time Select 1 */
    word SRES8       :1;                                       /* ATD Resolution Select */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpPRS  :5;
    word grpSMP  :2;
    word grpSRES_8 :1;
  } MergedBits;
} ATDCTL45STR;
extern volatile ATDCTL45STR _ATDCTL45 @(REG_BASE + 0x00000084);
#define ATDCTL45 _ATDCTL45.Word
#define ATDCTL45_CA _ATDCTL45.Bits.CA
#define ATDCTL45_CB _ATDCTL45.Bits.CB
#define ATDCTL45_CC _ATDCTL45.Bits.CC
#define ATDCTL45_CD _ATDCTL45.Bits.CD
#define ATDCTL45_MULT _ATDCTL45.Bits.MULT
#define ATDCTL45_SCAN _ATDCTL45.Bits.SCAN
#define ATDCTL45_DSGN _ATDCTL45.Bits.DSGN
#define ATDCTL45_DJM _ATDCTL45.Bits.DJM
#define ATDCTL45_PRS0 _ATDCTL45.Bits.PRS0
#define ATDCTL45_PRS1 _ATDCTL45.Bits.PRS1
#define ATDCTL45_PRS2 _ATDCTL45.Bits.PRS2
#define ATDCTL45_PRS3 _ATDCTL45.Bits.PRS3
#define ATDCTL45_PRS4 _ATDCTL45.Bits.PRS4
#define ATDCTL45_SMP0 _ATDCTL45.Bits.SMP0
#define ATDCTL45_SMP1 _ATDCTL45.Bits.SMP1
#define ATDCTL45_SRES8 _ATDCTL45.Bits.SRES8
#define ATDCTL45_PRS _ATDCTL45.MergedBits.grpPRS
#define ATDCTL45_SMP _ATDCTL45.MergedBits.grpSMP


/*** ATDDIEN - ATD Input Enable Mask Register; 0x0000008C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDIEN0 - ATD Input Enable Mask Register 0; 0x0000008C ***/
    union {
      byte Byte;
      struct {
        byte IEN8        :1;                                       /* ATD Input Enable Bit 8 */
        byte IEN9        :1;                                       /* ATD Input Enable Bit 9 */
        byte IEN10       :1;                                       /* ATD Input Enable Bit 10 */
        byte IEN11       :1;                                       /* ATD Input Enable Bit 11 */
        byte IEN12       :1;                                       /* ATD Input Enable Bit 12 */
        byte IEN13       :1;                                       /* ATD Input Enable Bit 13 */
        byte IEN14       :1;                                       /* ATD Input Enable Bit 14 */
        byte IEN15       :1;                                       /* ATD Input Enable Bit 15 */
      } Bits;
      struct {
        byte grpIEN_8 :8;
      } MergedBits;
    } ATDDIEN0STR;
    #define ATDDIEN0 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Byte
    #define ATDDIEN0_IEN8 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN8
    #define ATDDIEN0_IEN9 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN9
    #define ATDDIEN0_IEN10 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN10
    #define ATDDIEN0_IEN11 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN11
    #define ATDDIEN0_IEN12 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN12
    #define ATDDIEN0_IEN13 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN13
    #define ATDDIEN0_IEN14 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN14
    #define ATDDIEN0_IEN15 _ATDDIEN.Overlap_STR.ATDDIEN0STR.Bits.IEN15
    #define ATDDIEN0_IEN_8 _ATDDIEN.Overlap_STR.ATDDIEN0STR.MergedBits.grpIEN_8
    #define ATDDIEN0_IEN ATDDIEN0_IEN_8
    
    /*** ATDDIEN1 - ATD Input Enable Mask Register 1; 0x0000008D ***/
    union {
      byte Byte;
      struct {
        byte IEN0        :1;                                       /* ATD Input Enable Bit 0 */
        byte IEN1        :1;                                       /* ATD Input Enable Bit 1 */
        byte IEN2        :1;                                       /* ATD Input Enable Bit 2 */
        byte IEN3        :1;                                       /* ATD Input Enable Bit 3 */
        byte IEN4        :1;                                       /* ATD Input Enable Bit 4 */
        byte IEN5        :1;                                       /* ATD Input Enable Bit 5 */
        byte IEN6        :1;                                       /* ATD Input Enable Bit 6 */
        byte IEN7        :1;                                       /* ATD Input Enable Bit 7 */
      } Bits;
      struct {
        byte grpIEN :8;
      } MergedBits;
    } ATDDIEN1STR;
    #define ATDDIEN1 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Byte
    #define ATDDIEN1_IEN0 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN0
    #define ATDDIEN1_IEN1 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN1
    #define ATDDIEN1_IEN2 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN2
    #define ATDDIEN1_IEN3 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN3
    #define ATDDIEN1_IEN4 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN4
    #define ATDDIEN1_IEN5 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN5
    #define ATDDIEN1_IEN6 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN6
    #define ATDDIEN1_IEN7 _ATDDIEN.Overlap_STR.ATDDIEN1STR.Bits.IEN7
    #define ATDDIEN1_IEN _ATDDIEN.Overlap_STR.ATDDIEN1STR.MergedBits.grpIEN
    
  } Overlap_STR;

  struct {
    word IEN0        :1;                                       /* ATD Input Enable Bit 0 */
    word IEN1        :1;                                       /* ATD Input Enable Bit 1 */
    word IEN2        :1;                                       /* ATD Input Enable Bit 2 */
    word IEN3        :1;                                       /* ATD Input Enable Bit 3 */
    word IEN4        :1;                                       /* ATD Input Enable Bit 4 */
    word IEN5        :1;                                       /* ATD Input Enable Bit 5 */
    word IEN6        :1;                                       /* ATD Input Enable Bit 6 */
    word IEN7        :1;                                       /* ATD Input Enable Bit 7 */
    word IEN8        :1;                                       /* ATD Input Enable Bit 8 */
    word IEN9        :1;                                       /* ATD Input Enable Bit 9 */
    word IEN10       :1;                                       /* ATD Input Enable Bit 10 */
    word IEN11       :1;                                       /* ATD Input Enable Bit 11 */
    word IEN12       :1;                                       /* ATD Input Enable Bit 12 */
    word IEN13       :1;                                       /* ATD Input Enable Bit 13 */
    word IEN14       :1;                                       /* ATD Input Enable Bit 14 */
    word IEN15       :1;                                       /* ATD Input Enable Bit 15 */
  } Bits;
  struct {
    word grpIEN  :16;
  } MergedBits;
} ATDDIENSTR;
extern volatile ATDDIENSTR _ATDDIEN @(REG_BASE + 0x0000008C);
#define ATDDIEN _ATDDIEN.Word
#define ATDDIEN_IEN0 _ATDDIEN.Bits.IEN0
#define ATDDIEN_IEN1 _ATDDIEN.Bits.IEN1
#define ATDDIEN_IEN2 _ATDDIEN.Bits.IEN2
#define ATDDIEN_IEN3 _ATDDIEN.Bits.IEN3
#define ATDDIEN_IEN4 _ATDDIEN.Bits.IEN4
#define ATDDIEN_IEN5 _ATDDIEN.Bits.IEN5
#define ATDDIEN_IEN6 _ATDDIEN.Bits.IEN6
#define ATDDIEN_IEN7 _ATDDIEN.Bits.IEN7
#define ATDDIEN_IEN8 _ATDDIEN.Bits.IEN8
#define ATDDIEN_IEN9 _ATDDIEN.Bits.IEN9
#define ATDDIEN_IEN10 _ATDDIEN.Bits.IEN10
#define ATDDIEN_IEN11 _ATDDIEN.Bits.IEN11
#define ATDDIEN_IEN12 _ATDDIEN.Bits.IEN12
#define ATDDIEN_IEN13 _ATDDIEN.Bits.IEN13
#define ATDDIEN_IEN14 _ATDDIEN.Bits.IEN14
#define ATDDIEN_IEN15 _ATDDIEN.Bits.IEN15
#define ATDDIEN_IEN _ATDDIEN.MergedBits.grpIEN


/*** ATDDR0 - ATD Conversion Result Register 0; 0x00000090 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR0H - ATD Conversion Result Register 0 High; 0x00000090 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR0HSTR;
    #define ATDDR0H _ATDDR0.Overlap_STR.ATDDR0HSTR.Byte
    #define ATDDR0H_BIT8 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT8
    #define ATDDR0H_BIT9 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT9
    #define ATDDR0H_BIT10 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT10
    #define ATDDR0H_BIT11 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT11
    #define ATDDR0H_BIT12 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT12
    #define ATDDR0H_BIT13 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT13
    #define ATDDR0H_BIT14 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT14
    #define ATDDR0H_BIT15 _ATDDR0.Overlap_STR.ATDDR0HSTR.Bits.BIT15
    #define ATDDR0H_BIT_8 _ATDDR0.Overlap_STR.ATDDR0HSTR.MergedBits.grpBIT_8
    #define ATDDR0H_BIT ATDDR0H_BIT_8
    
    /*** ATDDR0L - ATD Conversion Result Register 0 Low; 0x00000091 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR0LSTR;
    #define ATDDR0L _ATDDR0.Overlap_STR.ATDDR0LSTR.Byte
    #define ATDDR0L_BIT6 _ATDDR0.Overlap_STR.ATDDR0LSTR.Bits.BIT6
    #define ATDDR0L_BIT7 _ATDDR0.Overlap_STR.ATDDR0LSTR.Bits.BIT7
    #define ATDDR0L_BIT_6 _ATDDR0.Overlap_STR.ATDDR0LSTR.MergedBits.grpBIT_6
    #define ATDDR0L_BIT ATDDR0L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR0STR;
extern volatile ATDDR0STR _ATDDR0 @(REG_BASE + 0x00000090);
#define ATDDR0 _ATDDR0.Word
#define ATDDR0_BIT6 _ATDDR0.Bits.BIT6
#define ATDDR0_BIT7 _ATDDR0.Bits.BIT7
#define ATDDR0_BIT8 _ATDDR0.Bits.BIT8
#define ATDDR0_BIT9 _ATDDR0.Bits.BIT9
#define ATDDR0_BIT10 _ATDDR0.Bits.BIT10
#define ATDDR0_BIT11 _ATDDR0.Bits.BIT11
#define ATDDR0_BIT12 _ATDDR0.Bits.BIT12
#define ATDDR0_BIT13 _ATDDR0.Bits.BIT13
#define ATDDR0_BIT14 _ATDDR0.Bits.BIT14
#define ATDDR0_BIT15 _ATDDR0.Bits.BIT15
#define ATDDR0_BIT_6 _ATDDR0.MergedBits.grpBIT_6
#define ATDDR0_BIT ATDDR0_BIT_6


/*** ATDDR1 - ATD Conversion Result Register 1; 0x00000092 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR1H - ATD Conversion Result Register 1 High; 0x00000092 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR1HSTR;
    #define ATDDR1H _ATDDR1.Overlap_STR.ATDDR1HSTR.Byte
    #define ATDDR1H_BIT8 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT8
    #define ATDDR1H_BIT9 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT9
    #define ATDDR1H_BIT10 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT10
    #define ATDDR1H_BIT11 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT11
    #define ATDDR1H_BIT12 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT12
    #define ATDDR1H_BIT13 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT13
    #define ATDDR1H_BIT14 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT14
    #define ATDDR1H_BIT15 _ATDDR1.Overlap_STR.ATDDR1HSTR.Bits.BIT15
    #define ATDDR1H_BIT_8 _ATDDR1.Overlap_STR.ATDDR1HSTR.MergedBits.grpBIT_8
    #define ATDDR1H_BIT ATDDR1H_BIT_8
    
    /*** ATDDR1L - ATD Conversion Result Register 1 Low; 0x00000093 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR1LSTR;
    #define ATDDR1L _ATDDR1.Overlap_STR.ATDDR1LSTR.Byte
    #define ATDDR1L_BIT6 _ATDDR1.Overlap_STR.ATDDR1LSTR.Bits.BIT6
    #define ATDDR1L_BIT7 _ATDDR1.Overlap_STR.ATDDR1LSTR.Bits.BIT7
    #define ATDDR1L_BIT_6 _ATDDR1.Overlap_STR.ATDDR1LSTR.MergedBits.grpBIT_6
    #define ATDDR1L_BIT ATDDR1L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR1STR;
extern volatile ATDDR1STR _ATDDR1 @(REG_BASE + 0x00000092);
#define ATDDR1 _ATDDR1.Word
#define ATDDR1_BIT6 _ATDDR1.Bits.BIT6
#define ATDDR1_BIT7 _ATDDR1.Bits.BIT7
#define ATDDR1_BIT8 _ATDDR1.Bits.BIT8
#define ATDDR1_BIT9 _ATDDR1.Bits.BIT9
#define ATDDR1_BIT10 _ATDDR1.Bits.BIT10
#define ATDDR1_BIT11 _ATDDR1.Bits.BIT11
#define ATDDR1_BIT12 _ATDDR1.Bits.BIT12
#define ATDDR1_BIT13 _ATDDR1.Bits.BIT13
#define ATDDR1_BIT14 _ATDDR1.Bits.BIT14
#define ATDDR1_BIT15 _ATDDR1.Bits.BIT15
#define ATDDR1_BIT_6 _ATDDR1.MergedBits.grpBIT_6
#define ATDDR1_BIT ATDDR1_BIT_6


/*** ATDDR2 - ATD Conversion Result Register 2; 0x00000094 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR2H - ATD Conversion Result Register 2 High; 0x00000094 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR2HSTR;
    #define ATDDR2H _ATDDR2.Overlap_STR.ATDDR2HSTR.Byte
    #define ATDDR2H_BIT8 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT8
    #define ATDDR2H_BIT9 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT9
    #define ATDDR2H_BIT10 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT10
    #define ATDDR2H_BIT11 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT11
    #define ATDDR2H_BIT12 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT12
    #define ATDDR2H_BIT13 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT13
    #define ATDDR2H_BIT14 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT14
    #define ATDDR2H_BIT15 _ATDDR2.Overlap_STR.ATDDR2HSTR.Bits.BIT15
    #define ATDDR2H_BIT_8 _ATDDR2.Overlap_STR.ATDDR2HSTR.MergedBits.grpBIT_8
    #define ATDDR2H_BIT ATDDR2H_BIT_8
    
    /*** ATDDR2L - ATD Conversion Result Register 2 Low; 0x00000095 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR2LSTR;
    #define ATDDR2L _ATDDR2.Overlap_STR.ATDDR2LSTR.Byte
    #define ATDDR2L_BIT6 _ATDDR2.Overlap_STR.ATDDR2LSTR.Bits.BIT6
    #define ATDDR2L_BIT7 _ATDDR2.Overlap_STR.ATDDR2LSTR.Bits.BIT7
    #define ATDDR2L_BIT_6 _ATDDR2.Overlap_STR.ATDDR2LSTR.MergedBits.grpBIT_6
    #define ATDDR2L_BIT ATDDR2L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR2STR;
extern volatile ATDDR2STR _ATDDR2 @(REG_BASE + 0x00000094);
#define ATDDR2 _ATDDR2.Word
#define ATDDR2_BIT6 _ATDDR2.Bits.BIT6
#define ATDDR2_BIT7 _ATDDR2.Bits.BIT7
#define ATDDR2_BIT8 _ATDDR2.Bits.BIT8
#define ATDDR2_BIT9 _ATDDR2.Bits.BIT9
#define ATDDR2_BIT10 _ATDDR2.Bits.BIT10
#define ATDDR2_BIT11 _ATDDR2.Bits.BIT11
#define ATDDR2_BIT12 _ATDDR2.Bits.BIT12
#define ATDDR2_BIT13 _ATDDR2.Bits.BIT13
#define ATDDR2_BIT14 _ATDDR2.Bits.BIT14
#define ATDDR2_BIT15 _ATDDR2.Bits.BIT15
#define ATDDR2_BIT_6 _ATDDR2.MergedBits.grpBIT_6
#define ATDDR2_BIT ATDDR2_BIT_6


/*** ATDDR3 - ATD Conversion Result Register 3; 0x00000096 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR3H - ATD Conversion Result Register 3 High; 0x00000096 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR3HSTR;
    #define ATDDR3H _ATDDR3.Overlap_STR.ATDDR3HSTR.Byte
    #define ATDDR3H_BIT8 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT8
    #define ATDDR3H_BIT9 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT9
    #define ATDDR3H_BIT10 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT10
    #define ATDDR3H_BIT11 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT11
    #define ATDDR3H_BIT12 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT12
    #define ATDDR3H_BIT13 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT13
    #define ATDDR3H_BIT14 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT14
    #define ATDDR3H_BIT15 _ATDDR3.Overlap_STR.ATDDR3HSTR.Bits.BIT15
    #define ATDDR3H_BIT_8 _ATDDR3.Overlap_STR.ATDDR3HSTR.MergedBits.grpBIT_8
    #define ATDDR3H_BIT ATDDR3H_BIT_8
    
    /*** ATDDR3L - ATD Conversion Result Register 3 Low; 0x00000097 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR3LSTR;
    #define ATDDR3L _ATDDR3.Overlap_STR.ATDDR3LSTR.Byte
    #define ATDDR3L_BIT6 _ATDDR3.Overlap_STR.ATDDR3LSTR.Bits.BIT6
    #define ATDDR3L_BIT7 _ATDDR3.Overlap_STR.ATDDR3LSTR.Bits.BIT7
    #define ATDDR3L_BIT_6 _ATDDR3.Overlap_STR.ATDDR3LSTR.MergedBits.grpBIT_6
    #define ATDDR3L_BIT ATDDR3L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR3STR;
extern volatile ATDDR3STR _ATDDR3 @(REG_BASE + 0x00000096);
#define ATDDR3 _ATDDR3.Word
#define ATDDR3_BIT6 _ATDDR3.Bits.BIT6
#define ATDDR3_BIT7 _ATDDR3.Bits.BIT7
#define ATDDR3_BIT8 _ATDDR3.Bits.BIT8
#define ATDDR3_BIT9 _ATDDR3.Bits.BIT9
#define ATDDR3_BIT10 _ATDDR3.Bits.BIT10
#define ATDDR3_BIT11 _ATDDR3.Bits.BIT11
#define ATDDR3_BIT12 _ATDDR3.Bits.BIT12
#define ATDDR3_BIT13 _ATDDR3.Bits.BIT13
#define ATDDR3_BIT14 _ATDDR3.Bits.BIT14
#define ATDDR3_BIT15 _ATDDR3.Bits.BIT15
#define ATDDR3_BIT_6 _ATDDR3.MergedBits.grpBIT_6
#define ATDDR3_BIT ATDDR3_BIT_6


/*** ATDDR4 - ATD Conversion Result Register 4; 0x00000098 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR4H - ATD Conversion Result Register 4 High; 0x00000098 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR4HSTR;
    #define ATDDR4H _ATDDR4.Overlap_STR.ATDDR4HSTR.Byte
    #define ATDDR4H_BIT8 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT8
    #define ATDDR4H_BIT9 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT9
    #define ATDDR4H_BIT10 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT10
    #define ATDDR4H_BIT11 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT11
    #define ATDDR4H_BIT12 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT12
    #define ATDDR4H_BIT13 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT13
    #define ATDDR4H_BIT14 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT14
    #define ATDDR4H_BIT15 _ATDDR4.Overlap_STR.ATDDR4HSTR.Bits.BIT15
    #define ATDDR4H_BIT_8 _ATDDR4.Overlap_STR.ATDDR4HSTR.MergedBits.grpBIT_8
    #define ATDDR4H_BIT ATDDR4H_BIT_8
    
    /*** ATDDR4L - ATD Conversion Result Register 4 Low; 0x00000099 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR4LSTR;
    #define ATDDR4L _ATDDR4.Overlap_STR.ATDDR4LSTR.Byte
    #define ATDDR4L_BIT6 _ATDDR4.Overlap_STR.ATDDR4LSTR.Bits.BIT6
    #define ATDDR4L_BIT7 _ATDDR4.Overlap_STR.ATDDR4LSTR.Bits.BIT7
    #define ATDDR4L_BIT_6 _ATDDR4.Overlap_STR.ATDDR4LSTR.MergedBits.grpBIT_6
    #define ATDDR4L_BIT ATDDR4L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR4STR;
extern volatile ATDDR4STR _ATDDR4 @(REG_BASE + 0x00000098);
#define ATDDR4 _ATDDR4.Word
#define ATDDR4_BIT6 _ATDDR4.Bits.BIT6
#define ATDDR4_BIT7 _ATDDR4.Bits.BIT7
#define ATDDR4_BIT8 _ATDDR4.Bits.BIT8
#define ATDDR4_BIT9 _ATDDR4.Bits.BIT9
#define ATDDR4_BIT10 _ATDDR4.Bits.BIT10
#define ATDDR4_BIT11 _ATDDR4.Bits.BIT11
#define ATDDR4_BIT12 _ATDDR4.Bits.BIT12
#define ATDDR4_BIT13 _ATDDR4.Bits.BIT13
#define ATDDR4_BIT14 _ATDDR4.Bits.BIT14
#define ATDDR4_BIT15 _ATDDR4.Bits.BIT15
#define ATDDR4_BIT_6 _ATDDR4.MergedBits.grpBIT_6
#define ATDDR4_BIT ATDDR4_BIT_6


/*** ATDDR5 - ATD Conversion Result Register 5; 0x0000009A ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR5H - ATD Conversion Result Register 5 High; 0x0000009A ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR5HSTR;
    #define ATDDR5H _ATDDR5.Overlap_STR.ATDDR5HSTR.Byte
    #define ATDDR5H_BIT8 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT8
    #define ATDDR5H_BIT9 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT9
    #define ATDDR5H_BIT10 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT10
    #define ATDDR5H_BIT11 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT11
    #define ATDDR5H_BIT12 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT12
    #define ATDDR5H_BIT13 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT13
    #define ATDDR5H_BIT14 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT14
    #define ATDDR5H_BIT15 _ATDDR5.Overlap_STR.ATDDR5HSTR.Bits.BIT15
    #define ATDDR5H_BIT_8 _ATDDR5.Overlap_STR.ATDDR5HSTR.MergedBits.grpBIT_8
    #define ATDDR5H_BIT ATDDR5H_BIT_8
    
    /*** ATDDR5L - ATD Conversion Result Register 5 Low; 0x0000009B ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR5LSTR;
    #define ATDDR5L _ATDDR5.Overlap_STR.ATDDR5LSTR.Byte
    #define ATDDR5L_BIT6 _ATDDR5.Overlap_STR.ATDDR5LSTR.Bits.BIT6
    #define ATDDR5L_BIT7 _ATDDR5.Overlap_STR.ATDDR5LSTR.Bits.BIT7
    #define ATDDR5L_BIT_6 _ATDDR5.Overlap_STR.ATDDR5LSTR.MergedBits.grpBIT_6
    #define ATDDR5L_BIT ATDDR5L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR5STR;
extern volatile ATDDR5STR _ATDDR5 @(REG_BASE + 0x0000009A);
#define ATDDR5 _ATDDR5.Word
#define ATDDR5_BIT6 _ATDDR5.Bits.BIT6
#define ATDDR5_BIT7 _ATDDR5.Bits.BIT7
#define ATDDR5_BIT8 _ATDDR5.Bits.BIT8
#define ATDDR5_BIT9 _ATDDR5.Bits.BIT9
#define ATDDR5_BIT10 _ATDDR5.Bits.BIT10
#define ATDDR5_BIT11 _ATDDR5.Bits.BIT11
#define ATDDR5_BIT12 _ATDDR5.Bits.BIT12
#define ATDDR5_BIT13 _ATDDR5.Bits.BIT13
#define ATDDR5_BIT14 _ATDDR5.Bits.BIT14
#define ATDDR5_BIT15 _ATDDR5.Bits.BIT15
#define ATDDR5_BIT_6 _ATDDR5.MergedBits.grpBIT_6
#define ATDDR5_BIT ATDDR5_BIT_6


/*** ATDDR6 - ATD Conversion Result Register 6; 0x0000009C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR6H - ATD Conversion Result Register 6 High; 0x0000009C ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR6HSTR;
    #define ATDDR6H _ATDDR6.Overlap_STR.ATDDR6HSTR.Byte
    #define ATDDR6H_BIT8 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT8
    #define ATDDR6H_BIT9 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT9
    #define ATDDR6H_BIT10 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT10
    #define ATDDR6H_BIT11 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT11
    #define ATDDR6H_BIT12 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT12
    #define ATDDR6H_BIT13 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT13
    #define ATDDR6H_BIT14 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT14
    #define ATDDR6H_BIT15 _ATDDR6.Overlap_STR.ATDDR6HSTR.Bits.BIT15
    #define ATDDR6H_BIT_8 _ATDDR6.Overlap_STR.ATDDR6HSTR.MergedBits.grpBIT_8
    #define ATDDR6H_BIT ATDDR6H_BIT_8
    
    /*** ATDDR6L - ATD Conversion Result Register 6 Low; 0x0000009D ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR6LSTR;
    #define ATDDR6L _ATDDR6.Overlap_STR.ATDDR6LSTR.Byte
    #define ATDDR6L_BIT6 _ATDDR6.Overlap_STR.ATDDR6LSTR.Bits.BIT6
    #define ATDDR6L_BIT7 _ATDDR6.Overlap_STR.ATDDR6LSTR.Bits.BIT7
    #define ATDDR6L_BIT_6 _ATDDR6.Overlap_STR.ATDDR6LSTR.MergedBits.grpBIT_6
    #define ATDDR6L_BIT ATDDR6L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR6STR;
extern volatile ATDDR6STR _ATDDR6 @(REG_BASE + 0x0000009C);
#define ATDDR6 _ATDDR6.Word
#define ATDDR6_BIT6 _ATDDR6.Bits.BIT6
#define ATDDR6_BIT7 _ATDDR6.Bits.BIT7
#define ATDDR6_BIT8 _ATDDR6.Bits.BIT8
#define ATDDR6_BIT9 _ATDDR6.Bits.BIT9
#define ATDDR6_BIT10 _ATDDR6.Bits.BIT10
#define ATDDR6_BIT11 _ATDDR6.Bits.BIT11
#define ATDDR6_BIT12 _ATDDR6.Bits.BIT12
#define ATDDR6_BIT13 _ATDDR6.Bits.BIT13
#define ATDDR6_BIT14 _ATDDR6.Bits.BIT14
#define ATDDR6_BIT15 _ATDDR6.Bits.BIT15
#define ATDDR6_BIT_6 _ATDDR6.MergedBits.grpBIT_6
#define ATDDR6_BIT ATDDR6_BIT_6


/*** ATDDR7 - ATD Conversion Result Register 7; 0x0000009E ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR7H - ATD Conversion Result Register 7 High; 0x0000009E ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR7HSTR;
    #define ATDDR7H _ATDDR7.Overlap_STR.ATDDR7HSTR.Byte
    #define ATDDR7H_BIT8 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT8
    #define ATDDR7H_BIT9 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT9
    #define ATDDR7H_BIT10 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT10
    #define ATDDR7H_BIT11 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT11
    #define ATDDR7H_BIT12 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT12
    #define ATDDR7H_BIT13 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT13
    #define ATDDR7H_BIT14 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT14
    #define ATDDR7H_BIT15 _ATDDR7.Overlap_STR.ATDDR7HSTR.Bits.BIT15
    #define ATDDR7H_BIT_8 _ATDDR7.Overlap_STR.ATDDR7HSTR.MergedBits.grpBIT_8
    #define ATDDR7H_BIT ATDDR7H_BIT_8
    
    /*** ATDDR7L - ATD Conversion Result Register 7 Low; 0x0000009F ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR7LSTR;
    #define ATDDR7L _ATDDR7.Overlap_STR.ATDDR7LSTR.Byte
    #define ATDDR7L_BIT6 _ATDDR7.Overlap_STR.ATDDR7LSTR.Bits.BIT6
    #define ATDDR7L_BIT7 _ATDDR7.Overlap_STR.ATDDR7LSTR.Bits.BIT7
    #define ATDDR7L_BIT_6 _ATDDR7.Overlap_STR.ATDDR7LSTR.MergedBits.grpBIT_6
    #define ATDDR7L_BIT ATDDR7L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR7STR;
extern volatile ATDDR7STR _ATDDR7 @(REG_BASE + 0x0000009E);
#define ATDDR7 _ATDDR7.Word
#define ATDDR7_BIT6 _ATDDR7.Bits.BIT6
#define ATDDR7_BIT7 _ATDDR7.Bits.BIT7
#define ATDDR7_BIT8 _ATDDR7.Bits.BIT8
#define ATDDR7_BIT9 _ATDDR7.Bits.BIT9
#define ATDDR7_BIT10 _ATDDR7.Bits.BIT10
#define ATDDR7_BIT11 _ATDDR7.Bits.BIT11
#define ATDDR7_BIT12 _ATDDR7.Bits.BIT12
#define ATDDR7_BIT13 _ATDDR7.Bits.BIT13
#define ATDDR7_BIT14 _ATDDR7.Bits.BIT14
#define ATDDR7_BIT15 _ATDDR7.Bits.BIT15
#define ATDDR7_BIT_6 _ATDDR7.MergedBits.grpBIT_6
#define ATDDR7_BIT ATDDR7_BIT_6


/*** ATDDR8 - ATD Conversion Result Register 8; 0x000000A0 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR8H - ATD Conversion Result Register 8 High; 0x000000A0 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR8HSTR;
    #define ATDDR8H _ATDDR8.Overlap_STR.ATDDR8HSTR.Byte
    #define ATDDR8H_BIT8 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT8
    #define ATDDR8H_BIT9 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT9
    #define ATDDR8H_BIT10 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT10
    #define ATDDR8H_BIT11 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT11
    #define ATDDR8H_BIT12 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT12
    #define ATDDR8H_BIT13 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT13
    #define ATDDR8H_BIT14 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT14
    #define ATDDR8H_BIT15 _ATDDR8.Overlap_STR.ATDDR8HSTR.Bits.BIT15
    #define ATDDR8H_BIT_8 _ATDDR8.Overlap_STR.ATDDR8HSTR.MergedBits.grpBIT_8
    #define ATDDR8H_BIT ATDDR8H_BIT_8
    
    /*** ATDDR8L - ATD Conversion Result Register 8 Low; 0x000000A1 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR8LSTR;
    #define ATDDR8L _ATDDR8.Overlap_STR.ATDDR8LSTR.Byte
    #define ATDDR8L_BIT6 _ATDDR8.Overlap_STR.ATDDR8LSTR.Bits.BIT6
    #define ATDDR8L_BIT7 _ATDDR8.Overlap_STR.ATDDR8LSTR.Bits.BIT7
    #define ATDDR8L_BIT_6 _ATDDR8.Overlap_STR.ATDDR8LSTR.MergedBits.grpBIT_6
    #define ATDDR8L_BIT ATDDR8L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR8STR;
extern volatile ATDDR8STR _ATDDR8 @(REG_BASE + 0x000000A0);
#define ATDDR8 _ATDDR8.Word
#define ATDDR8_BIT6 _ATDDR8.Bits.BIT6
#define ATDDR8_BIT7 _ATDDR8.Bits.BIT7
#define ATDDR8_BIT8 _ATDDR8.Bits.BIT8
#define ATDDR8_BIT9 _ATDDR8.Bits.BIT9
#define ATDDR8_BIT10 _ATDDR8.Bits.BIT10
#define ATDDR8_BIT11 _ATDDR8.Bits.BIT11
#define ATDDR8_BIT12 _ATDDR8.Bits.BIT12
#define ATDDR8_BIT13 _ATDDR8.Bits.BIT13
#define ATDDR8_BIT14 _ATDDR8.Bits.BIT14
#define ATDDR8_BIT15 _ATDDR8.Bits.BIT15
#define ATDDR8_BIT_6 _ATDDR8.MergedBits.grpBIT_6
#define ATDDR8_BIT ATDDR8_BIT_6


/*** ATDDR9 - ATD Conversion Result Register 9; 0x000000A2 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR9H - ATD Conversion Result Register 9 High; 0x000000A2 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR9HSTR;
    #define ATDDR9H _ATDDR9.Overlap_STR.ATDDR9HSTR.Byte
    #define ATDDR9H_BIT8 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT8
    #define ATDDR9H_BIT9 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT9
    #define ATDDR9H_BIT10 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT10
    #define ATDDR9H_BIT11 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT11
    #define ATDDR9H_BIT12 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT12
    #define ATDDR9H_BIT13 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT13
    #define ATDDR9H_BIT14 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT14
    #define ATDDR9H_BIT15 _ATDDR9.Overlap_STR.ATDDR9HSTR.Bits.BIT15
    #define ATDDR9H_BIT_8 _ATDDR9.Overlap_STR.ATDDR9HSTR.MergedBits.grpBIT_8
    #define ATDDR9H_BIT ATDDR9H_BIT_8
    
    /*** ATDDR9L - ATD Conversion Result Register 9 Low; 0x000000A3 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR9LSTR;
    #define ATDDR9L _ATDDR9.Overlap_STR.ATDDR9LSTR.Byte
    #define ATDDR9L_BIT6 _ATDDR9.Overlap_STR.ATDDR9LSTR.Bits.BIT6
    #define ATDDR9L_BIT7 _ATDDR9.Overlap_STR.ATDDR9LSTR.Bits.BIT7
    #define ATDDR9L_BIT_6 _ATDDR9.Overlap_STR.ATDDR9LSTR.MergedBits.grpBIT_6
    #define ATDDR9L_BIT ATDDR9L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR9STR;
extern volatile ATDDR9STR _ATDDR9 @(REG_BASE + 0x000000A2);
#define ATDDR9 _ATDDR9.Word
#define ATDDR9_BIT6 _ATDDR9.Bits.BIT6
#define ATDDR9_BIT7 _ATDDR9.Bits.BIT7
#define ATDDR9_BIT8 _ATDDR9.Bits.BIT8
#define ATDDR9_BIT9 _ATDDR9.Bits.BIT9
#define ATDDR9_BIT10 _ATDDR9.Bits.BIT10
#define ATDDR9_BIT11 _ATDDR9.Bits.BIT11
#define ATDDR9_BIT12 _ATDDR9.Bits.BIT12
#define ATDDR9_BIT13 _ATDDR9.Bits.BIT13
#define ATDDR9_BIT14 _ATDDR9.Bits.BIT14
#define ATDDR9_BIT15 _ATDDR9.Bits.BIT15
#define ATDDR9_BIT_6 _ATDDR9.MergedBits.grpBIT_6
#define ATDDR9_BIT ATDDR9_BIT_6


/*** ATDDR10 - ATD Conversion Result Register 10; 0x000000A4 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR10H - ATD Conversion Result Register 10 High; 0x000000A4 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR10HSTR;
    #define ATDDR10H _ATDDR10.Overlap_STR.ATDDR10HSTR.Byte
    #define ATDDR10H_BIT8 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT8
    #define ATDDR10H_BIT9 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT9
    #define ATDDR10H_BIT10 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT10
    #define ATDDR10H_BIT11 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT11
    #define ATDDR10H_BIT12 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT12
    #define ATDDR10H_BIT13 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT13
    #define ATDDR10H_BIT14 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT14
    #define ATDDR10H_BIT15 _ATDDR10.Overlap_STR.ATDDR10HSTR.Bits.BIT15
    #define ATDDR10H_BIT_8 _ATDDR10.Overlap_STR.ATDDR10HSTR.MergedBits.grpBIT_8
    #define ATDDR10H_BIT ATDDR10H_BIT_8
    
    /*** ATDDR10L - ATD Conversion Result Register 10 Low; 0x000000A5 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR10LSTR;
    #define ATDDR10L _ATDDR10.Overlap_STR.ATDDR10LSTR.Byte
    #define ATDDR10L_BIT6 _ATDDR10.Overlap_STR.ATDDR10LSTR.Bits.BIT6
    #define ATDDR10L_BIT7 _ATDDR10.Overlap_STR.ATDDR10LSTR.Bits.BIT7
    #define ATDDR10L_BIT_6 _ATDDR10.Overlap_STR.ATDDR10LSTR.MergedBits.grpBIT_6
    #define ATDDR10L_BIT ATDDR10L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR10STR;
extern volatile ATDDR10STR _ATDDR10 @(REG_BASE + 0x000000A4);
#define ATDDR10 _ATDDR10.Word
#define ATDDR10_BIT6 _ATDDR10.Bits.BIT6
#define ATDDR10_BIT7 _ATDDR10.Bits.BIT7
#define ATDDR10_BIT8 _ATDDR10.Bits.BIT8
#define ATDDR10_BIT9 _ATDDR10.Bits.BIT9
#define ATDDR10_BIT10 _ATDDR10.Bits.BIT10
#define ATDDR10_BIT11 _ATDDR10.Bits.BIT11
#define ATDDR10_BIT12 _ATDDR10.Bits.BIT12
#define ATDDR10_BIT13 _ATDDR10.Bits.BIT13
#define ATDDR10_BIT14 _ATDDR10.Bits.BIT14
#define ATDDR10_BIT15 _ATDDR10.Bits.BIT15
#define ATDDR10_BIT_6 _ATDDR10.MergedBits.grpBIT_6
#define ATDDR10_BIT ATDDR10_BIT_6


/*** ATDDR11 - ATD Conversion Result Register 11; 0x000000A6 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR11H - ATD Conversion Result Register 11 High; 0x000000A6 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR11HSTR;
    #define ATDDR11H _ATDDR11.Overlap_STR.ATDDR11HSTR.Byte
    #define ATDDR11H_BIT8 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT8
    #define ATDDR11H_BIT9 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT9
    #define ATDDR11H_BIT10 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT10
    #define ATDDR11H_BIT11 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT11
    #define ATDDR11H_BIT12 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT12
    #define ATDDR11H_BIT13 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT13
    #define ATDDR11H_BIT14 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT14
    #define ATDDR11H_BIT15 _ATDDR11.Overlap_STR.ATDDR11HSTR.Bits.BIT15
    #define ATDDR11H_BIT_8 _ATDDR11.Overlap_STR.ATDDR11HSTR.MergedBits.grpBIT_8
    #define ATDDR11H_BIT ATDDR11H_BIT_8
    
    /*** ATDDR11L - ATD Conversion Result Register 11 Low; 0x000000A7 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR11LSTR;
    #define ATDDR11L _ATDDR11.Overlap_STR.ATDDR11LSTR.Byte
    #define ATDDR11L_BIT6 _ATDDR11.Overlap_STR.ATDDR11LSTR.Bits.BIT6
    #define ATDDR11L_BIT7 _ATDDR11.Overlap_STR.ATDDR11LSTR.Bits.BIT7
    #define ATDDR11L_BIT_6 _ATDDR11.Overlap_STR.ATDDR11LSTR.MergedBits.grpBIT_6
    #define ATDDR11L_BIT ATDDR11L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR11STR;
extern volatile ATDDR11STR _ATDDR11 @(REG_BASE + 0x000000A6);
#define ATDDR11 _ATDDR11.Word
#define ATDDR11_BIT6 _ATDDR11.Bits.BIT6
#define ATDDR11_BIT7 _ATDDR11.Bits.BIT7
#define ATDDR11_BIT8 _ATDDR11.Bits.BIT8
#define ATDDR11_BIT9 _ATDDR11.Bits.BIT9
#define ATDDR11_BIT10 _ATDDR11.Bits.BIT10
#define ATDDR11_BIT11 _ATDDR11.Bits.BIT11
#define ATDDR11_BIT12 _ATDDR11.Bits.BIT12
#define ATDDR11_BIT13 _ATDDR11.Bits.BIT13
#define ATDDR11_BIT14 _ATDDR11.Bits.BIT14
#define ATDDR11_BIT15 _ATDDR11.Bits.BIT15
#define ATDDR11_BIT_6 _ATDDR11.MergedBits.grpBIT_6
#define ATDDR11_BIT ATDDR11_BIT_6


/*** ATDDR12 - ATD Conversion Result Register 12; 0x000000A8 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR12H - ATD Conversion Result Register 12 High; 0x000000A8 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR12HSTR;
    #define ATDDR12H _ATDDR12.Overlap_STR.ATDDR12HSTR.Byte
    #define ATDDR12H_BIT8 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT8
    #define ATDDR12H_BIT9 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT9
    #define ATDDR12H_BIT10 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT10
    #define ATDDR12H_BIT11 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT11
    #define ATDDR12H_BIT12 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT12
    #define ATDDR12H_BIT13 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT13
    #define ATDDR12H_BIT14 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT14
    #define ATDDR12H_BIT15 _ATDDR12.Overlap_STR.ATDDR12HSTR.Bits.BIT15
    #define ATDDR12H_BIT_8 _ATDDR12.Overlap_STR.ATDDR12HSTR.MergedBits.grpBIT_8
    #define ATDDR12H_BIT ATDDR12H_BIT_8
    
    /*** ATDDR12L - ATD Conversion Result Register 12 Low; 0x000000A9 ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR12LSTR;
    #define ATDDR12L _ATDDR12.Overlap_STR.ATDDR12LSTR.Byte
    #define ATDDR12L_BIT6 _ATDDR12.Overlap_STR.ATDDR12LSTR.Bits.BIT6
    #define ATDDR12L_BIT7 _ATDDR12.Overlap_STR.ATDDR12LSTR.Bits.BIT7
    #define ATDDR12L_BIT_6 _ATDDR12.Overlap_STR.ATDDR12LSTR.MergedBits.grpBIT_6
    #define ATDDR12L_BIT ATDDR12L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR12STR;
extern volatile ATDDR12STR _ATDDR12 @(REG_BASE + 0x000000A8);
#define ATDDR12 _ATDDR12.Word
#define ATDDR12_BIT6 _ATDDR12.Bits.BIT6
#define ATDDR12_BIT7 _ATDDR12.Bits.BIT7
#define ATDDR12_BIT8 _ATDDR12.Bits.BIT8
#define ATDDR12_BIT9 _ATDDR12.Bits.BIT9
#define ATDDR12_BIT10 _ATDDR12.Bits.BIT10
#define ATDDR12_BIT11 _ATDDR12.Bits.BIT11
#define ATDDR12_BIT12 _ATDDR12.Bits.BIT12
#define ATDDR12_BIT13 _ATDDR12.Bits.BIT13
#define ATDDR12_BIT14 _ATDDR12.Bits.BIT14
#define ATDDR12_BIT15 _ATDDR12.Bits.BIT15
#define ATDDR12_BIT_6 _ATDDR12.MergedBits.grpBIT_6
#define ATDDR12_BIT ATDDR12_BIT_6


/*** ATDDR13 - ATD Conversion Result Register 13; 0x000000AA ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR13H - ATD Conversion Result Register 13 High; 0x000000AA ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR13HSTR;
    #define ATDDR13H _ATDDR13.Overlap_STR.ATDDR13HSTR.Byte
    #define ATDDR13H_BIT8 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT8
    #define ATDDR13H_BIT9 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT9
    #define ATDDR13H_BIT10 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT10
    #define ATDDR13H_BIT11 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT11
    #define ATDDR13H_BIT12 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT12
    #define ATDDR13H_BIT13 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT13
    #define ATDDR13H_BIT14 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT14
    #define ATDDR13H_BIT15 _ATDDR13.Overlap_STR.ATDDR13HSTR.Bits.BIT15
    #define ATDDR13H_BIT_8 _ATDDR13.Overlap_STR.ATDDR13HSTR.MergedBits.grpBIT_8
    #define ATDDR13H_BIT ATDDR13H_BIT_8
    
    /*** ATDDR13L - ATD Conversion Result Register 13 Low; 0x000000AB ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR13LSTR;
    #define ATDDR13L _ATDDR13.Overlap_STR.ATDDR13LSTR.Byte
    #define ATDDR13L_BIT6 _ATDDR13.Overlap_STR.ATDDR13LSTR.Bits.BIT6
    #define ATDDR13L_BIT7 _ATDDR13.Overlap_STR.ATDDR13LSTR.Bits.BIT7
    #define ATDDR13L_BIT_6 _ATDDR13.Overlap_STR.ATDDR13LSTR.MergedBits.grpBIT_6
    #define ATDDR13L_BIT ATDDR13L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR13STR;
extern volatile ATDDR13STR _ATDDR13 @(REG_BASE + 0x000000AA);
#define ATDDR13 _ATDDR13.Word
#define ATDDR13_BIT6 _ATDDR13.Bits.BIT6
#define ATDDR13_BIT7 _ATDDR13.Bits.BIT7
#define ATDDR13_BIT8 _ATDDR13.Bits.BIT8
#define ATDDR13_BIT9 _ATDDR13.Bits.BIT9
#define ATDDR13_BIT10 _ATDDR13.Bits.BIT10
#define ATDDR13_BIT11 _ATDDR13.Bits.BIT11
#define ATDDR13_BIT12 _ATDDR13.Bits.BIT12
#define ATDDR13_BIT13 _ATDDR13.Bits.BIT13
#define ATDDR13_BIT14 _ATDDR13.Bits.BIT14
#define ATDDR13_BIT15 _ATDDR13.Bits.BIT15
#define ATDDR13_BIT_6 _ATDDR13.MergedBits.grpBIT_6
#define ATDDR13_BIT ATDDR13_BIT_6


/*** ATDDR14 - ATD Conversion Result Register 14; 0x000000AC ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR14H - ATD Conversion Result Register 14 High; 0x000000AC ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR14HSTR;
    #define ATDDR14H _ATDDR14.Overlap_STR.ATDDR14HSTR.Byte
    #define ATDDR14H_BIT8 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT8
    #define ATDDR14H_BIT9 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT9
    #define ATDDR14H_BIT10 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT10
    #define ATDDR14H_BIT11 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT11
    #define ATDDR14H_BIT12 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT12
    #define ATDDR14H_BIT13 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT13
    #define ATDDR14H_BIT14 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT14
    #define ATDDR14H_BIT15 _ATDDR14.Overlap_STR.ATDDR14HSTR.Bits.BIT15
    #define ATDDR14H_BIT_8 _ATDDR14.Overlap_STR.ATDDR14HSTR.MergedBits.grpBIT_8
    #define ATDDR14H_BIT ATDDR14H_BIT_8
    
    /*** ATDDR14L - ATD Conversion Result Register 14 Low; 0x000000AD ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR14LSTR;
    #define ATDDR14L _ATDDR14.Overlap_STR.ATDDR14LSTR.Byte
    #define ATDDR14L_BIT6 _ATDDR14.Overlap_STR.ATDDR14LSTR.Bits.BIT6
    #define ATDDR14L_BIT7 _ATDDR14.Overlap_STR.ATDDR14LSTR.Bits.BIT7
    #define ATDDR14L_BIT_6 _ATDDR14.Overlap_STR.ATDDR14LSTR.MergedBits.grpBIT_6
    #define ATDDR14L_BIT ATDDR14L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR14STR;
extern volatile ATDDR14STR _ATDDR14 @(REG_BASE + 0x000000AC);
#define ATDDR14 _ATDDR14.Word
#define ATDDR14_BIT6 _ATDDR14.Bits.BIT6
#define ATDDR14_BIT7 _ATDDR14.Bits.BIT7
#define ATDDR14_BIT8 _ATDDR14.Bits.BIT8
#define ATDDR14_BIT9 _ATDDR14.Bits.BIT9
#define ATDDR14_BIT10 _ATDDR14.Bits.BIT10
#define ATDDR14_BIT11 _ATDDR14.Bits.BIT11
#define ATDDR14_BIT12 _ATDDR14.Bits.BIT12
#define ATDDR14_BIT13 _ATDDR14.Bits.BIT13
#define ATDDR14_BIT14 _ATDDR14.Bits.BIT14
#define ATDDR14_BIT15 _ATDDR14.Bits.BIT15
#define ATDDR14_BIT_6 _ATDDR14.MergedBits.grpBIT_6
#define ATDDR14_BIT ATDDR14_BIT_6


/*** ATDDR15 - ATD Conversion Result Register 15; 0x000000AE ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** ATDDR15H - ATD Conversion Result Register 15 High; 0x000000AE ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Bit 8 */
        byte BIT9        :1;                                       /* Bit 9 */
        byte BIT10       :1;                                       /* Bit 10 */
        byte BIT11       :1;                                       /* Bit 11 */
        byte BIT12       :1;                                       /* Bit 12 */
        byte BIT13       :1;                                       /* Bit 13 */
        byte BIT14       :1;                                       /* Bit 14 */
        byte BIT15       :1;                                       /* Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } ATDDR15HSTR;
    #define ATDDR15H _ATDDR15.Overlap_STR.ATDDR15HSTR.Byte
    #define ATDDR15H_BIT8 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT8
    #define ATDDR15H_BIT9 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT9
    #define ATDDR15H_BIT10 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT10
    #define ATDDR15H_BIT11 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT11
    #define ATDDR15H_BIT12 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT12
    #define ATDDR15H_BIT13 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT13
    #define ATDDR15H_BIT14 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT14
    #define ATDDR15H_BIT15 _ATDDR15.Overlap_STR.ATDDR15HSTR.Bits.BIT15
    #define ATDDR15H_BIT_8 _ATDDR15.Overlap_STR.ATDDR15HSTR.MergedBits.grpBIT_8
    #define ATDDR15H_BIT ATDDR15H_BIT_8
    
    /*** ATDDR15L - ATD Conversion Result Register 15 Low; 0x000000AF ***/
    union {
      byte Byte;
      struct {
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte             :1; 
        byte BIT6        :1;                                       /* Bit 6 */
        byte BIT7        :1;                                       /* Bit 7 */
      } Bits;
      struct {
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte     :1;
        byte grpBIT_6 :2;
      } MergedBits;
    } ATDDR15LSTR;
    #define ATDDR15L _ATDDR15.Overlap_STR.ATDDR15LSTR.Byte
    #define ATDDR15L_BIT6 _ATDDR15.Overlap_STR.ATDDR15LSTR.Bits.BIT6
    #define ATDDR15L_BIT7 _ATDDR15.Overlap_STR.ATDDR15LSTR.Bits.BIT7
    #define ATDDR15L_BIT_6 _ATDDR15.Overlap_STR.ATDDR15LSTR.MergedBits.grpBIT_6
    #define ATDDR15L_BIT ATDDR15L_BIT_6
    
  } Overlap_STR;

  struct {
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
    word BIT6        :1;                                       /* Bit 6 */
    word BIT7        :1;                                       /* Bit 7 */
    word BIT8        :1;                                       /* Bit 8 */
    word BIT9        :1;                                       /* Bit 9 */
    word BIT10       :1;                                       /* Bit 10 */
    word BIT11       :1;                                       /* Bit 11 */
    word BIT12       :1;                                       /* Bit 12 */
    word BIT13       :1;                                       /* Bit 13 */
    word BIT14       :1;                                       /* Bit 14 */
    word BIT15       :1;                                       /* Bit 15 */
  } Bits;
  struct {
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
    word grpBIT_6 :10;
  } MergedBits;
} ATDDR15STR;
extern volatile ATDDR15STR _ATDDR15 @(REG_BASE + 0x000000AE);
#define ATDDR15 _ATDDR15.Word
#define ATDDR15_BIT6 _ATDDR15.Bits.BIT6
#define ATDDR15_BIT7 _ATDDR15.Bits.BIT7
#define ATDDR15_BIT8 _ATDDR15.Bits.BIT8
#define ATDDR15_BIT9 _ATDDR15.Bits.BIT9
#define ATDDR15_BIT10 _ATDDR15.Bits.BIT10
#define ATDDR15_BIT11 _ATDDR15.Bits.BIT11
#define ATDDR15_BIT12 _ATDDR15.Bits.BIT12
#define ATDDR15_BIT13 _ATDDR15.Bits.BIT13
#define ATDDR15_BIT14 _ATDDR15.Bits.BIT14
#define ATDDR15_BIT15 _ATDDR15.Bits.BIT15
#define ATDDR15_BIT_6 _ATDDR15.MergedBits.grpBIT_6
#define ATDDR15_BIT ATDDR15_BIT_6


/*** SCI0BD - SCI 0 Baud Rate Register; 0x000000C8 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** SCI0BDH - SCI 0 Baud Rate Register High; 0x000000C8 ***/
    union {
      byte Byte;
      struct {
        byte SBR8        :1;                                       /* SCI baud rate Bit 8 */
        byte SBR9        :1;                                       /* SCI baud rate Bit 9 */
        byte SBR10       :1;                                       /* SCI baud rate Bit 10 */
        byte SBR11       :1;                                       /* SCI baud rate Bit 11 */
        byte SBR12       :1;                                       /* SCI baud rate Bit 12 */
        byte TNP0        :1;                                       /* Transmitter Narrow Pulse Bit 0 */
        byte TNP1        :1;                                       /* Transmitter Narrow Pulse Bit 1 */
        byte IREN        :1;                                       /* Infrared Enable Bit */
      } Bits;
      struct {
        byte grpSBR_8 :5;
        byte grpTNP :2;
        byte     :1;
      } MergedBits;
    } SCI0BDHSTR;
    #define SCI0BDH _SCI0BD.Overlap_STR.SCI0BDHSTR.Byte
    #define SCI0BDH_SBR8 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.SBR8
    #define SCI0BDH_SBR9 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.SBR9
    #define SCI0BDH_SBR10 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.SBR10
    #define SCI0BDH_SBR11 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.SBR11
    #define SCI0BDH_SBR12 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.SBR12
    #define SCI0BDH_TNP0 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.TNP0
    #define SCI0BDH_TNP1 _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.TNP1
    #define SCI0BDH_IREN _SCI0BD.Overlap_STR.SCI0BDHSTR.Bits.IREN
    #define SCI0BDH_SBR_8 _SCI0BD.Overlap_STR.SCI0BDHSTR.MergedBits.grpSBR_8
    #define SCI0BDH_TNP _SCI0BD.Overlap_STR.SCI0BDHSTR.MergedBits.grpTNP
    #define SCI0BDH_SBR SCI0BDH_SBR_8
    
    /*** SCI0BDL - SCI 0 Baud Rate Register Low; 0x000000C9 ***/
    union {
      byte Byte;
      struct {
        byte SBR0        :1;                                       /* SCI baud rate Bit 0 */
        byte SBR1        :1;                                       /* SCI baud rate Bit 1 */
        byte SBR2        :1;                                       /* SCI baud rate Bit 2 */
        byte SBR3        :1;                                       /* SCI baud rate Bit 3 */
        byte SBR4        :1;                                       /* SCI baud rate Bit 4 */
        byte SBR5        :1;                                       /* SCI baud rate Bit 5 */
        byte SBR6        :1;                                       /* SCI baud rate Bit 6 */
        byte SBR7        :1;                                       /* SCI baud rate Bit 7 */
      } Bits;
      struct {
        byte grpSBR :8;
      } MergedBits;
    } SCI0BDLSTR;
    #define SCI0BDL _SCI0BD.Overlap_STR.SCI0BDLSTR.Byte
    #define SCI0BDL_SBR0 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR0
    #define SCI0BDL_SBR1 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR1
    #define SCI0BDL_SBR2 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR2
    #define SCI0BDL_SBR3 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR3
    #define SCI0BDL_SBR4 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR4
    #define SCI0BDL_SBR5 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR5
    #define SCI0BDL_SBR6 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR6
    #define SCI0BDL_SBR7 _SCI0BD.Overlap_STR.SCI0BDLSTR.Bits.SBR7
    #define SCI0BDL_SBR _SCI0BD.Overlap_STR.SCI0BDLSTR.MergedBits.grpSBR
    
  } Overlap_STR;

  struct {
    word SBR0        :1;                                       /* SCI baud rate Bit 0 */
    word SBR1        :1;                                       /* SCI baud rate Bit 1 */
    word SBR2        :1;                                       /* SCI baud rate Bit 2 */
    word SBR3        :1;                                       /* SCI baud rate Bit 3 */
    word SBR4        :1;                                       /* SCI baud rate Bit 4 */
    word SBR5        :1;                                       /* SCI baud rate Bit 5 */
    word SBR6        :1;                                       /* SCI baud rate Bit 6 */
    word SBR7        :1;                                       /* SCI baud rate Bit 7 */
    word SBR8        :1;                                       /* SCI baud rate Bit 8 */
    word SBR9        :1;                                       /* SCI baud rate Bit 9 */
    word SBR10       :1;                                       /* SCI baud rate Bit 10 */
    word SBR11       :1;                                       /* SCI baud rate Bit 11 */
    word SBR12       :1;                                       /* SCI baud rate Bit 12 */
    word TNP0        :1;                                       /* Transmitter Narrow Pulse Bit 0 */
    word TNP1        :1;                                       /* Transmitter Narrow Pulse Bit 1 */
    word IREN        :1;                                       /* Infrared Enable Bit */
  } Bits;
  struct {
    word grpSBR  :13;
    word grpTNP  :2;
    word         :1;
  } MergedBits;
} SCI0BDSTR;
extern volatile SCI0BDSTR _SCI0BD @(REG_BASE + 0x000000C8);
#define SCI0BD _SCI0BD.Word
#define SCI0BD_SBR0 _SCI0BD.Bits.SBR0
#define SCI0BD_SBR1 _SCI0BD.Bits.SBR1
#define SCI0BD_SBR2 _SCI0BD.Bits.SBR2
#define SCI0BD_SBR3 _SCI0BD.Bits.SBR3
#define SCI0BD_SBR4 _SCI0BD.Bits.SBR4
#define SCI0BD_SBR5 _SCI0BD.Bits.SBR5
#define SCI0BD_SBR6 _SCI0BD.Bits.SBR6
#define SCI0BD_SBR7 _SCI0BD.Bits.SBR7
#define SCI0BD_SBR8 _SCI0BD.Bits.SBR8
#define SCI0BD_SBR9 _SCI0BD.Bits.SBR9
#define SCI0BD_SBR10 _SCI0BD.Bits.SBR10
#define SCI0BD_SBR11 _SCI0BD.Bits.SBR11
#define SCI0BD_SBR12 _SCI0BD.Bits.SBR12
#define SCI0BD_TNP0 _SCI0BD.Bits.TNP0
#define SCI0BD_TNP1 _SCI0BD.Bits.TNP1
#define SCI0BD_IREN _SCI0BD.Bits.IREN
#define SCI0BD_SBR _SCI0BD.MergedBits.grpSBR
#define SCI0BD_TNP _SCI0BD.MergedBits.grpTNP


/*** SCI1BD - SCI 1 Baud Rate Register; 0x000000D0 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** SCI1BDH - SCI 1 Baud Rate Register High; 0x000000D0 ***/
    union {
      byte Byte;
      struct {
        byte SBR8        :1;                                       /* SCI baud rate Bit 8 */
        byte SBR9        :1;                                       /* SCI baud rate Bit 9 */
        byte SBR10       :1;                                       /* SCI baud rate Bit 10 */
        byte SBR11       :1;                                       /* SCI baud rate Bit 11 */
        byte SBR12       :1;                                       /* SCI baud rate Bit 12 */
        byte TNP0        :1;                                       /* Transmitter Narrow Pulse Bit 0 */
        byte TNP1        :1;                                       /* Transmitter Narrow Pulse Bit 1 */
        byte IREN        :1;                                       /* Infrared Enable Bit */
      } Bits;
      struct {
        byte grpSBR_8 :5;
        byte grpTNP :2;
        byte     :1;
      } MergedBits;
    } SCI1BDHSTR;
    #define SCI1BDH _SCI1BD.Overlap_STR.SCI1BDHSTR.Byte
    #define SCI1BDH_SBR8 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.SBR8
    #define SCI1BDH_SBR9 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.SBR9
    #define SCI1BDH_SBR10 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.SBR10
    #define SCI1BDH_SBR11 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.SBR11
    #define SCI1BDH_SBR12 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.SBR12
    #define SCI1BDH_TNP0 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.TNP0
    #define SCI1BDH_TNP1 _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.TNP1
    #define SCI1BDH_IREN _SCI1BD.Overlap_STR.SCI1BDHSTR.Bits.IREN
    #define SCI1BDH_SBR_8 _SCI1BD.Overlap_STR.SCI1BDHSTR.MergedBits.grpSBR_8
    #define SCI1BDH_TNP _SCI1BD.Overlap_STR.SCI1BDHSTR.MergedBits.grpTNP
    #define SCI1BDH_SBR SCI1BDH_SBR_8
    
    /*** SCI1BDL - SCI 1 Baud Rate Register Low; 0x000000D1 ***/
    union {
      byte Byte;
      struct {
        byte SBR0        :1;                                       /* SCI baud rate Bit 0 */
        byte SBR1        :1;                                       /* SCI baud rate Bit 1 */
        byte SBR2        :1;                                       /* SCI baud rate Bit 2 */
        byte SBR3        :1;                                       /* SCI baud rate Bit 3 */
        byte SBR4        :1;                                       /* SCI baud rate Bit 4 */
        byte SBR5        :1;                                       /* SCI baud rate Bit 5 */
        byte SBR6        :1;                                       /* SCI baud rate Bit 6 */
        byte SBR7        :1;                                       /* SCI baud rate Bit 7 */
      } Bits;
      struct {
        byte grpSBR :8;
      } MergedBits;
    } SCI1BDLSTR;
    #define SCI1BDL _SCI1BD.Overlap_STR.SCI1BDLSTR.Byte
    #define SCI1BDL_SBR0 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR0
    #define SCI1BDL_SBR1 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR1
    #define SCI1BDL_SBR2 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR2
    #define SCI1BDL_SBR3 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR3
    #define SCI1BDL_SBR4 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR4
    #define SCI1BDL_SBR5 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR5
    #define SCI1BDL_SBR6 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR6
    #define SCI1BDL_SBR7 _SCI1BD.Overlap_STR.SCI1BDLSTR.Bits.SBR7
    #define SCI1BDL_SBR _SCI1BD.Overlap_STR.SCI1BDLSTR.MergedBits.grpSBR
    
  } Overlap_STR;

  struct {
    word SBR0        :1;                                       /* SCI baud rate Bit 0 */
    word SBR1        :1;                                       /* SCI baud rate Bit 1 */
    word SBR2        :1;                                       /* SCI baud rate Bit 2 */
    word SBR3        :1;                                       /* SCI baud rate Bit 3 */
    word SBR4        :1;                                       /* SCI baud rate Bit 4 */
    word SBR5        :1;                                       /* SCI baud rate Bit 5 */
    word SBR6        :1;                                       /* SCI baud rate Bit 6 */
    word SBR7        :1;                                       /* SCI baud rate Bit 7 */
    word SBR8        :1;                                       /* SCI baud rate Bit 8 */
    word SBR9        :1;                                       /* SCI baud rate Bit 9 */
    word SBR10       :1;                                       /* SCI baud rate Bit 10 */
    word SBR11       :1;                                       /* SCI baud rate Bit 11 */
    word SBR12       :1;                                       /* SCI baud rate Bit 12 */
    word TNP0        :1;                                       /* Transmitter Narrow Pulse Bit 0 */
    word TNP1        :1;                                       /* Transmitter Narrow Pulse Bit 1 */
    word IREN        :1;                                       /* Infrared Enable Bit */
  } Bits;
  struct {
    word grpSBR  :13;
    word grpTNP  :2;
    word         :1;
  } MergedBits;
} SCI1BDSTR;
extern volatile SCI1BDSTR _SCI1BD @(REG_BASE + 0x000000D0);
#define SCI1BD _SCI1BD.Word
#define SCI1BD_SBR0 _SCI1BD.Bits.SBR0
#define SCI1BD_SBR1 _SCI1BD.Bits.SBR1
#define SCI1BD_SBR2 _SCI1BD.Bits.SBR2
#define SCI1BD_SBR3 _SCI1BD.Bits.SBR3
#define SCI1BD_SBR4 _SCI1BD.Bits.SBR4
#define SCI1BD_SBR5 _SCI1BD.Bits.SBR5
#define SCI1BD_SBR6 _SCI1BD.Bits.SBR6
#define SCI1BD_SBR7 _SCI1BD.Bits.SBR7
#define SCI1BD_SBR8 _SCI1BD.Bits.SBR8
#define SCI1BD_SBR9 _SCI1BD.Bits.SBR9
#define SCI1BD_SBR10 _SCI1BD.Bits.SBR10
#define SCI1BD_SBR11 _SCI1BD.Bits.SBR11
#define SCI1BD_SBR12 _SCI1BD.Bits.SBR12
#define SCI1BD_TNP0 _SCI1BD.Bits.TNP0
#define SCI1BD_TNP1 _SCI1BD.Bits.TNP1
#define SCI1BD_IREN _SCI1BD.Bits.IREN
#define SCI1BD_SBR _SCI1BD.MergedBits.grpSBR
#define SCI1BD_TNP _SCI1BD.MergedBits.grpTNP


/*** SCI2BD - SCI 2 Baud Rate Register; 0x000000E8 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** SCI2BDH - SCI 2 Baud Rate Register High; 0x000000E8 ***/
    union {
      byte Byte;
      struct {
        byte SBR8        :1;                                       /* SCI baud rate Bit 8 */
        byte SBR9        :1;                                       /* SCI baud rate Bit 9 */
        byte SBR10       :1;                                       /* SCI baud rate Bit 10 */
        byte SBR11       :1;                                       /* SCI baud rate Bit 11 */
        byte SBR12       :1;                                       /* SCI baud rate Bit 12 */
        byte TNP0        :1;                                       /* Transmitter Narrow Pulse Bit 0 */
        byte TNP1        :1;                                       /* Transmitter Narrow Pulse Bit 1 */
        byte IREN        :1;                                       /* Infrared Enable Bit */
      } Bits;
      struct {
        byte grpSBR_8 :5;
        byte grpTNP :2;
        byte     :1;
      } MergedBits;
    } SCI2BDHSTR;
    #define SCI2BDH _SCI2BD.Overlap_STR.SCI2BDHSTR.Byte
    #define SCI2BDH_SBR8 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.SBR8
    #define SCI2BDH_SBR9 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.SBR9
    #define SCI2BDH_SBR10 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.SBR10
    #define SCI2BDH_SBR11 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.SBR11
    #define SCI2BDH_SBR12 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.SBR12
    #define SCI2BDH_TNP0 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.TNP0
    #define SCI2BDH_TNP1 _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.TNP1
    #define SCI2BDH_IREN _SCI2BD.Overlap_STR.SCI2BDHSTR.Bits.IREN
    #define SCI2BDH_SBR_8 _SCI2BD.Overlap_STR.SCI2BDHSTR.MergedBits.grpSBR_8
    #define SCI2BDH_TNP _SCI2BD.Overlap_STR.SCI2BDHSTR.MergedBits.grpTNP
    #define SCI2BDH_SBR SCI2BDH_SBR_8
    
    /*** SCI2BDL - SCI 2 Baud Rate Register Low; 0x000000E9 ***/
    union {
      byte Byte;
      struct {
        byte SBR0        :1;                                       /* SCI baud rate Bit 0 */
        byte SBR1        :1;                                       /* SCI baud rate Bit 1 */
        byte SBR2        :1;                                       /* SCI baud rate Bit 2 */
        byte SBR3        :1;                                       /* SCI baud rate Bit 3 */
        byte SBR4        :1;                                       /* SCI baud rate Bit 4 */
        byte SBR5        :1;                                       /* SCI baud rate Bit 5 */
        byte SBR6        :1;                                       /* SCI baud rate Bit 6 */
        byte SBR7        :1;                                       /* SCI baud rate Bit 7 */
      } Bits;
      struct {
        byte grpSBR :8;
      } MergedBits;
    } SCI2BDLSTR;
    #define SCI2BDL _SCI2BD.Overlap_STR.SCI2BDLSTR.Byte
    #define SCI2BDL_SBR0 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR0
    #define SCI2BDL_SBR1 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR1
    #define SCI2BDL_SBR2 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR2
    #define SCI2BDL_SBR3 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR3
    #define SCI2BDL_SBR4 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR4
    #define SCI2BDL_SBR5 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR5
    #define SCI2BDL_SBR6 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR6
    #define SCI2BDL_SBR7 _SCI2BD.Overlap_STR.SCI2BDLSTR.Bits.SBR7
    #define SCI2BDL_SBR _SCI2BD.Overlap_STR.SCI2BDLSTR.MergedBits.grpSBR
    
  } Overlap_STR;

  struct {
    word SBR0        :1;                                       /* SCI baud rate Bit 0 */
    word SBR1        :1;                                       /* SCI baud rate Bit 1 */
    word SBR2        :1;                                       /* SCI baud rate Bit 2 */
    word SBR3        :1;                                       /* SCI baud rate Bit 3 */
    word SBR4        :1;                                       /* SCI baud rate Bit 4 */
    word SBR5        :1;                                       /* SCI baud rate Bit 5 */
    word SBR6        :1;                                       /* SCI baud rate Bit 6 */
    word SBR7        :1;                                       /* SCI baud rate Bit 7 */
    word SBR8        :1;                                       /* SCI baud rate Bit 8 */
    word SBR9        :1;                                       /* SCI baud rate Bit 9 */
    word SBR10       :1;                                       /* SCI baud rate Bit 10 */
    word SBR11       :1;                                       /* SCI baud rate Bit 11 */
    word SBR12       :1;                                       /* SCI baud rate Bit 12 */
    word TNP0        :1;                                       /* Transmitter Narrow Pulse Bit 0 */
    word TNP1        :1;                                       /* Transmitter Narrow Pulse Bit 1 */
    word IREN        :1;                                       /* Infrared Enable Bit */
  } Bits;
  struct {
    word grpSBR  :13;
    word grpTNP  :2;
    word         :1;
  } MergedBits;
} SCI2BDSTR;
extern volatile SCI2BDSTR _SCI2BD @(REG_BASE + 0x000000E8);
#define SCI2BD _SCI2BD.Word
#define SCI2BD_SBR0 _SCI2BD.Bits.SBR0
#define SCI2BD_SBR1 _SCI2BD.Bits.SBR1
#define SCI2BD_SBR2 _SCI2BD.Bits.SBR2
#define SCI2BD_SBR3 _SCI2BD.Bits.SBR3
#define SCI2BD_SBR4 _SCI2BD.Bits.SBR4
#define SCI2BD_SBR5 _SCI2BD.Bits.SBR5
#define SCI2BD_SBR6 _SCI2BD.Bits.SBR6
#define SCI2BD_SBR7 _SCI2BD.Bits.SBR7
#define SCI2BD_SBR8 _SCI2BD.Bits.SBR8
#define SCI2BD_SBR9 _SCI2BD.Bits.SBR9
#define SCI2BD_SBR10 _SCI2BD.Bits.SBR10
#define SCI2BD_SBR11 _SCI2BD.Bits.SBR11
#define SCI2BD_SBR12 _SCI2BD.Bits.SBR12
#define SCI2BD_TNP0 _SCI2BD.Bits.TNP0
#define SCI2BD_TNP1 _SCI2BD.Bits.TNP1
#define SCI2BD_IREN _SCI2BD.Bits.IREN
#define SCI2BD_SBR _SCI2BD.MergedBits.grpSBR
#define SCI2BD_TNP _SCI2BD.MergedBits.grpTNP


/*** TIM1_TCNT - TIM1 Timer Count Register; 0x00000144 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM1_TCNTHi - TIM1 Timer Count Register High; 0x00000144 ***/
    union {
      byte Byte;
      struct {
        byte BIT15       :1;                                       /* Timer Count Register Bit 15 */
        byte BIT14       :1;                                       /* Timer Count Register Bit 14 */
        byte BIT13       :1;                                       /* Timer Count Register Bit 13 */
        byte BIT12       :1;                                       /* Timer Count Register Bit 12 */
        byte BIT11       :1;                                       /* Timer Count Register Bit 11 */
        byte BIT10       :1;                                       /* Timer Count Register Bit 10 */
        byte BIT9        :1;                                       /* Timer Count Register Bit 9 */
        byte BIT8        :1;                                       /* Timer Count Register Bit 8 */
      } Bits;
    } TIM1_TCNTHiSTR;
    #define TIM1_TCNTHi _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Byte
    #define TIM1_TCNTHi_BIT15 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT15
    #define TIM1_TCNTHi_BIT14 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT14
    #define TIM1_TCNTHi_BIT13 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT13
    #define TIM1_TCNTHi_BIT12 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT12
    #define TIM1_TCNTHi_BIT11 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT11
    #define TIM1_TCNTHi_BIT10 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT10
    #define TIM1_TCNTHi_BIT9 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT9
    #define TIM1_TCNTHi_BIT8 _TIM1_TCNT.Overlap_STR.TIM1_TCNTHiSTR.Bits.BIT8
    
    /*** TIM1_TCNTLo - TIM1 Timer Count Register Low; 0x00000145 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Count Register Bit 0 */
        byte BIT1        :1;                                       /* Timer Count Register Bit 1 */
        byte BIT2        :1;                                       /* Timer Count Register Bit 2 */
        byte BIT3        :1;                                       /* Timer Count Register Bit 3 */
        byte BIT4        :1;                                       /* Timer Count Bit Register 4 */
        byte BIT5        :1;                                       /* Timer Count Bit Register 5 */
        byte BIT6        :1;                                       /* Timer Count Bit Register 6 */
        byte BIT7        :1;                                       /* Timer Count Bit Register 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM1_TCNTLoSTR;
    #define TIM1_TCNTLo _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Byte
    #define TIM1_TCNTLo_BIT0 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT0
    #define TIM1_TCNTLo_BIT1 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT1
    #define TIM1_TCNTLo_BIT2 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT2
    #define TIM1_TCNTLo_BIT3 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT3
    #define TIM1_TCNTLo_BIT4 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT4
    #define TIM1_TCNTLo_BIT5 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT5
    #define TIM1_TCNTLo_BIT6 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT6
    #define TIM1_TCNTLo_BIT7 _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.Bits.BIT7
    #define TIM1_TCNTLo_BIT _TIM1_TCNT.Overlap_STR.TIM1_TCNTLoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM1_TCNTSTR;
extern volatile TIM1_TCNTSTR _TIM1_TCNT @(REG_BASE + 0x00000144);
#define TIM1_TCNT _TIM1_TCNT.Word
#define TIM1_TCNT_BIT _TIM1_TCNT.MergedBits.grpBIT


/*** TIM1_TC4 - TIM1 Timer Input Capture/Output Compare Register 4; 0x00000158 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM1_TC4Hi - TIM1 Timer Input Capture/Output Compare Register 4 High; 0x00000158 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM1_TC4HiSTR;
    #define TIM1_TC4Hi _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Byte
    #define TIM1_TC4Hi_BIT8 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT8
    #define TIM1_TC4Hi_BIT9 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT9
    #define TIM1_TC4Hi_BIT10 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT10
    #define TIM1_TC4Hi_BIT11 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT11
    #define TIM1_TC4Hi_BIT12 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT12
    #define TIM1_TC4Hi_BIT13 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT13
    #define TIM1_TC4Hi_BIT14 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT14
    #define TIM1_TC4Hi_BIT15 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.Bits.BIT15
    #define TIM1_TC4Hi_BIT_8 _TIM1_TC4.Overlap_STR.TIM1_TC4HiSTR.MergedBits.grpBIT_8
    #define TIM1_TC4Hi_BIT TIM1_TC4Hi_BIT_8
    
    /*** TIM1_TC4Lo - TIM1 Timer Input Capture/Output Compare Register 4 Low; 0x00000159 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM1_TC4LoSTR;
    #define TIM1_TC4Lo _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Byte
    #define TIM1_TC4Lo_BIT0 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT0
    #define TIM1_TC4Lo_BIT1 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT1
    #define TIM1_TC4Lo_BIT2 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT2
    #define TIM1_TC4Lo_BIT3 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT3
    #define TIM1_TC4Lo_BIT4 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT4
    #define TIM1_TC4Lo_BIT5 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT5
    #define TIM1_TC4Lo_BIT6 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT6
    #define TIM1_TC4Lo_BIT7 _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.Bits.BIT7
    #define TIM1_TC4Lo_BIT _TIM1_TC4.Overlap_STR.TIM1_TC4LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM1_TC4STR;
extern volatile TIM1_TC4STR _TIM1_TC4 @(REG_BASE + 0x00000158);
#define TIM1_TC4 _TIM1_TC4.Word
#define TIM1_TC4_BIT _TIM1_TC4.MergedBits.grpBIT


/*** TIM1_TC5 - TIM1 Timer Input Capture/Output Compare Register 5; 0x0000015A ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM1_TC5Hi - TIM1 Timer Input Capture/Output Compare Register 5 High; 0x0000015A ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM1_TC5HiSTR;
    #define TIM1_TC5Hi _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Byte
    #define TIM1_TC5Hi_BIT8 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT8
    #define TIM1_TC5Hi_BIT9 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT9
    #define TIM1_TC5Hi_BIT10 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT10
    #define TIM1_TC5Hi_BIT11 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT11
    #define TIM1_TC5Hi_BIT12 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT12
    #define TIM1_TC5Hi_BIT13 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT13
    #define TIM1_TC5Hi_BIT14 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT14
    #define TIM1_TC5Hi_BIT15 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.Bits.BIT15
    #define TIM1_TC5Hi_BIT_8 _TIM1_TC5.Overlap_STR.TIM1_TC5HiSTR.MergedBits.grpBIT_8
    #define TIM1_TC5Hi_BIT TIM1_TC5Hi_BIT_8
    
    /*** TIM1_TC5Lo - TIM1 Timer Input Capture/Output Compare Register 5 Low; 0x0000015B ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM1_TC5LoSTR;
    #define TIM1_TC5Lo _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Byte
    #define TIM1_TC5Lo_BIT0 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT0
    #define TIM1_TC5Lo_BIT1 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT1
    #define TIM1_TC5Lo_BIT2 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT2
    #define TIM1_TC5Lo_BIT3 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT3
    #define TIM1_TC5Lo_BIT4 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT4
    #define TIM1_TC5Lo_BIT5 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT5
    #define TIM1_TC5Lo_BIT6 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT6
    #define TIM1_TC5Lo_BIT7 _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.Bits.BIT7
    #define TIM1_TC5Lo_BIT _TIM1_TC5.Overlap_STR.TIM1_TC5LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM1_TC5STR;
extern volatile TIM1_TC5STR _TIM1_TC5 @(REG_BASE + 0x0000015A);
#define TIM1_TC5 _TIM1_TC5.Word
#define TIM1_TC5_BIT _TIM1_TC5.MergedBits.grpBIT


/*** TIM1_TC6 - TIM1 Timer Input Capture/Output Compare Register 6; 0x0000015C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM1_TC6Hi - TIM1 Timer Input Capture/Output Compare Register 6 High; 0x0000015C ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM1_TC6HiSTR;
    #define TIM1_TC6Hi _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Byte
    #define TIM1_TC6Hi_BIT8 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT8
    #define TIM1_TC6Hi_BIT9 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT9
    #define TIM1_TC6Hi_BIT10 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT10
    #define TIM1_TC6Hi_BIT11 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT11
    #define TIM1_TC6Hi_BIT12 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT12
    #define TIM1_TC6Hi_BIT13 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT13
    #define TIM1_TC6Hi_BIT14 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT14
    #define TIM1_TC6Hi_BIT15 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.Bits.BIT15
    #define TIM1_TC6Hi_BIT_8 _TIM1_TC6.Overlap_STR.TIM1_TC6HiSTR.MergedBits.grpBIT_8
    #define TIM1_TC6Hi_BIT TIM1_TC6Hi_BIT_8
    
    /*** TIM1_TC6Lo - TIM1 Timer Input Capture/Output Compare Register 6 Low; 0x0000015D ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM1_TC6LoSTR;
    #define TIM1_TC6Lo _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Byte
    #define TIM1_TC6Lo_BIT0 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT0
    #define TIM1_TC6Lo_BIT1 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT1
    #define TIM1_TC6Lo_BIT2 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT2
    #define TIM1_TC6Lo_BIT3 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT3
    #define TIM1_TC6Lo_BIT4 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT4
    #define TIM1_TC6Lo_BIT5 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT5
    #define TIM1_TC6Lo_BIT6 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT6
    #define TIM1_TC6Lo_BIT7 _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.Bits.BIT7
    #define TIM1_TC6Lo_BIT _TIM1_TC6.Overlap_STR.TIM1_TC6LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM1_TC6STR;
extern volatile TIM1_TC6STR _TIM1_TC6 @(REG_BASE + 0x0000015C);
#define TIM1_TC6 _TIM1_TC6.Word
#define TIM1_TC6_BIT _TIM1_TC6.MergedBits.grpBIT


/*** TIM1_TC7 - TIM1 Timer Input Capture/Output Compare Register 7; 0x0000015E ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM1_TC7Hi - TIM1 Timer Input Capture/Output Compare Register 7 High; 0x0000015E ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM1_TC7HiSTR;
    #define TIM1_TC7Hi _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Byte
    #define TIM1_TC7Hi_BIT8 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT8
    #define TIM1_TC7Hi_BIT9 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT9
    #define TIM1_TC7Hi_BIT10 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT10
    #define TIM1_TC7Hi_BIT11 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT11
    #define TIM1_TC7Hi_BIT12 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT12
    #define TIM1_TC7Hi_BIT13 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT13
    #define TIM1_TC7Hi_BIT14 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT14
    #define TIM1_TC7Hi_BIT15 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.Bits.BIT15
    #define TIM1_TC7Hi_BIT_8 _TIM1_TC7.Overlap_STR.TIM1_TC7HiSTR.MergedBits.grpBIT_8
    #define TIM1_TC7Hi_BIT TIM1_TC7Hi_BIT_8
    
    /*** TIM1_TC7Lo - TIM1 Timer Input Capture/Output Compare Register 7 Low; 0x0000015F ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM1_TC7LoSTR;
    #define TIM1_TC7Lo _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Byte
    #define TIM1_TC7Lo_BIT0 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT0
    #define TIM1_TC7Lo_BIT1 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT1
    #define TIM1_TC7Lo_BIT2 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT2
    #define TIM1_TC7Lo_BIT3 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT3
    #define TIM1_TC7Lo_BIT4 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT4
    #define TIM1_TC7Lo_BIT5 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT5
    #define TIM1_TC7Lo_BIT6 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT6
    #define TIM1_TC7Lo_BIT7 _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.Bits.BIT7
    #define TIM1_TC7Lo_BIT _TIM1_TC7.Overlap_STR.TIM1_TC7LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM1_TC7STR;
extern volatile TIM1_TC7STR _TIM1_TC7 @(REG_BASE + 0x0000015E);
#define TIM1_TC7 _TIM1_TC7.Word
#define TIM1_TC7_BIT _TIM1_TC7.MergedBits.grpBIT


/*** TIM1_PACNT - TIM1 Pulse Accumulators Count Register; 0x00000162 ***/
typedef union {
  word Word;
  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM1_PACNTSTR;
extern volatile TIM1_PACNTSTR _TIM1_PACNT @(REG_BASE + 0x00000162);
#define TIM1_PACNT _TIM1_PACNT.Word
#define TIM1_PACNT_BIT _TIM1_PACNT.MergedBits.grpBIT


/*** TIM2_TCNT - TIM2 Timer Count Register; 0x00000184 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM2_TCNTHi - TIM2 Timer Count Register High; 0x00000184 ***/
    union {
      byte Byte;
      struct {
        byte BIT15       :1;                                       /* Timer Count Register Bit 15 */
        byte BIT14       :1;                                       /* Timer Count Register Bit 14 */
        byte BIT13       :1;                                       /* Timer Count Register Bit 13 */
        byte BIT12       :1;                                       /* Timer Count Register Bit 12 */
        byte BIT11       :1;                                       /* Timer Count Register Bit 11 */
        byte BIT10       :1;                                       /* Timer Count Register Bit 10 */
        byte BIT9        :1;                                       /* Timer Count Register Bit 9 */
        byte BIT8        :1;                                       /* Timer Count Register Bit 8 */
      } Bits;
    } TIM2_TCNTHiSTR;
    #define TIM2_TCNTHi _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Byte
    #define TIM2_TCNTHi_BIT15 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT15
    #define TIM2_TCNTHi_BIT14 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT14
    #define TIM2_TCNTHi_BIT13 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT13
    #define TIM2_TCNTHi_BIT12 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT12
    #define TIM2_TCNTHi_BIT11 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT11
    #define TIM2_TCNTHi_BIT10 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT10
    #define TIM2_TCNTHi_BIT9 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT9
    #define TIM2_TCNTHi_BIT8 _TIM2_TCNT.Overlap_STR.TIM2_TCNTHiSTR.Bits.BIT8
    
    /*** TIM2_TCNTLo - TIM2 Timer Count Register Low; 0x00000185 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Count Register Bit 0 */
        byte BIT1        :1;                                       /* Timer Count Register Bit 1 */
        byte BIT2        :1;                                       /* Timer Count Register Bit 2 */
        byte BIT3        :1;                                       /* Timer Count Register Bit 3 */
        byte BIT4        :1;                                       /* Timer Count Bit Register 4 */
        byte BIT5        :1;                                       /* Timer Count Bit Register 5 */
        byte BIT6        :1;                                       /* Timer Count Bit Register 6 */
        byte BIT7        :1;                                       /* Timer Count Bit Register 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM2_TCNTLoSTR;
    #define TIM2_TCNTLo _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Byte
    #define TIM2_TCNTLo_BIT0 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT0
    #define TIM2_TCNTLo_BIT1 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT1
    #define TIM2_TCNTLo_BIT2 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT2
    #define TIM2_TCNTLo_BIT3 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT3
    #define TIM2_TCNTLo_BIT4 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT4
    #define TIM2_TCNTLo_BIT5 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT5
    #define TIM2_TCNTLo_BIT6 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT6
    #define TIM2_TCNTLo_BIT7 _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.Bits.BIT7
    #define TIM2_TCNTLo_BIT _TIM2_TCNT.Overlap_STR.TIM2_TCNTLoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM2_TCNTSTR;
extern volatile TIM2_TCNTSTR _TIM2_TCNT @(REG_BASE + 0x00000184);
#define TIM2_TCNT _TIM2_TCNT.Word
#define TIM2_TCNT_BIT _TIM2_TCNT.MergedBits.grpBIT


/*** TIM2_TC4 - TIM2 Timer Input Capture/Output Compare Register 4; 0x00000198 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM2_TC4Hi - TIM2 Timer Input Capture/Output Compare Register 4 High; 0x00000198 ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM2_TC4HiSTR;
    #define TIM2_TC4Hi _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Byte
    #define TIM2_TC4Hi_BIT8 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT8
    #define TIM2_TC4Hi_BIT9 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT9
    #define TIM2_TC4Hi_BIT10 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT10
    #define TIM2_TC4Hi_BIT11 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT11
    #define TIM2_TC4Hi_BIT12 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT12
    #define TIM2_TC4Hi_BIT13 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT13
    #define TIM2_TC4Hi_BIT14 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT14
    #define TIM2_TC4Hi_BIT15 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.Bits.BIT15
    #define TIM2_TC4Hi_BIT_8 _TIM2_TC4.Overlap_STR.TIM2_TC4HiSTR.MergedBits.grpBIT_8
    #define TIM2_TC4Hi_BIT TIM2_TC4Hi_BIT_8
    
    /*** TIM2_TC4Lo - TIM2 Timer Input Capture/Output Compare Register 4 Low; 0x00000199 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 4 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM2_TC4LoSTR;
    #define TIM2_TC4Lo _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Byte
    #define TIM2_TC4Lo_BIT0 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT0
    #define TIM2_TC4Lo_BIT1 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT1
    #define TIM2_TC4Lo_BIT2 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT2
    #define TIM2_TC4Lo_BIT3 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT3
    #define TIM2_TC4Lo_BIT4 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT4
    #define TIM2_TC4Lo_BIT5 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT5
    #define TIM2_TC4Lo_BIT6 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT6
    #define TIM2_TC4Lo_BIT7 _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.Bits.BIT7
    #define TIM2_TC4Lo_BIT _TIM2_TC4.Overlap_STR.TIM2_TC4LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM2_TC4STR;
extern volatile TIM2_TC4STR _TIM2_TC4 @(REG_BASE + 0x00000198);
#define TIM2_TC4 _TIM2_TC4.Word
#define TIM2_TC4_BIT _TIM2_TC4.MergedBits.grpBIT


/*** TIM2_TC5 - TIM2 Timer Input Capture/Output Compare Register 5; 0x0000019A ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM2_TC5Hi - TIM2 Timer Input Capture/Output Compare Register 5 High; 0x0000019A ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM2_TC5HiSTR;
    #define TIM2_TC5Hi _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Byte
    #define TIM2_TC5Hi_BIT8 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT8
    #define TIM2_TC5Hi_BIT9 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT9
    #define TIM2_TC5Hi_BIT10 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT10
    #define TIM2_TC5Hi_BIT11 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT11
    #define TIM2_TC5Hi_BIT12 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT12
    #define TIM2_TC5Hi_BIT13 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT13
    #define TIM2_TC5Hi_BIT14 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT14
    #define TIM2_TC5Hi_BIT15 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.Bits.BIT15
    #define TIM2_TC5Hi_BIT_8 _TIM2_TC5.Overlap_STR.TIM2_TC5HiSTR.MergedBits.grpBIT_8
    #define TIM2_TC5Hi_BIT TIM2_TC5Hi_BIT_8
    
    /*** TIM2_TC5Lo - TIM2 Timer Input Capture/Output Compare Register 5 Low; 0x0000019B ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 5 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM2_TC5LoSTR;
    #define TIM2_TC5Lo _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Byte
    #define TIM2_TC5Lo_BIT0 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT0
    #define TIM2_TC5Lo_BIT1 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT1
    #define TIM2_TC5Lo_BIT2 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT2
    #define TIM2_TC5Lo_BIT3 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT3
    #define TIM2_TC5Lo_BIT4 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT4
    #define TIM2_TC5Lo_BIT5 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT5
    #define TIM2_TC5Lo_BIT6 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT6
    #define TIM2_TC5Lo_BIT7 _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.Bits.BIT7
    #define TIM2_TC5Lo_BIT _TIM2_TC5.Overlap_STR.TIM2_TC5LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM2_TC5STR;
extern volatile TIM2_TC5STR _TIM2_TC5 @(REG_BASE + 0x0000019A);
#define TIM2_TC5 _TIM2_TC5.Word
#define TIM2_TC5_BIT _TIM2_TC5.MergedBits.grpBIT


/*** TIM2_TC6 - TIM2 Timer Input Capture/Output Compare Register 6; 0x0000019C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM2_TC6Hi - TIM2 Timer Input Capture/Output Compare Register 6 High; 0x0000019C ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM2_TC6HiSTR;
    #define TIM2_TC6Hi _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Byte
    #define TIM2_TC6Hi_BIT8 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT8
    #define TIM2_TC6Hi_BIT9 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT9
    #define TIM2_TC6Hi_BIT10 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT10
    #define TIM2_TC6Hi_BIT11 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT11
    #define TIM2_TC6Hi_BIT12 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT12
    #define TIM2_TC6Hi_BIT13 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT13
    #define TIM2_TC6Hi_BIT14 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT14
    #define TIM2_TC6Hi_BIT15 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.Bits.BIT15
    #define TIM2_TC6Hi_BIT_8 _TIM2_TC6.Overlap_STR.TIM2_TC6HiSTR.MergedBits.grpBIT_8
    #define TIM2_TC6Hi_BIT TIM2_TC6Hi_BIT_8
    
    /*** TIM2_TC6Lo - TIM2 Timer Input Capture/Output Compare Register 6 Low; 0x0000019D ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 6 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM2_TC6LoSTR;
    #define TIM2_TC6Lo _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Byte
    #define TIM2_TC6Lo_BIT0 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT0
    #define TIM2_TC6Lo_BIT1 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT1
    #define TIM2_TC6Lo_BIT2 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT2
    #define TIM2_TC6Lo_BIT3 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT3
    #define TIM2_TC6Lo_BIT4 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT4
    #define TIM2_TC6Lo_BIT5 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT5
    #define TIM2_TC6Lo_BIT6 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT6
    #define TIM2_TC6Lo_BIT7 _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.Bits.BIT7
    #define TIM2_TC6Lo_BIT _TIM2_TC6.Overlap_STR.TIM2_TC6LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM2_TC6STR;
extern volatile TIM2_TC6STR _TIM2_TC6 @(REG_BASE + 0x0000019C);
#define TIM2_TC6 _TIM2_TC6.Word
#define TIM2_TC6_BIT _TIM2_TC6.MergedBits.grpBIT


/*** TIM2_TC7 - TIM2 Timer Input Capture/Output Compare Register 7; 0x0000019E ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** TIM2_TC7Hi - TIM2 Timer Input Capture/Output Compare Register 7 High; 0x0000019E ***/
    union {
      byte Byte;
      struct {
        byte BIT8        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 8 */
        byte BIT9        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 9 */
        byte BIT10       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 10 */
        byte BIT11       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 11 */
        byte BIT12       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 12 */
        byte BIT13       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 13 */
        byte BIT14       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 14 */
        byte BIT15       :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 15 */
      } Bits;
      struct {
        byte grpBIT_8 :8;
      } MergedBits;
    } TIM2_TC7HiSTR;
    #define TIM2_TC7Hi _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Byte
    #define TIM2_TC7Hi_BIT8 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT8
    #define TIM2_TC7Hi_BIT9 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT9
    #define TIM2_TC7Hi_BIT10 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT10
    #define TIM2_TC7Hi_BIT11 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT11
    #define TIM2_TC7Hi_BIT12 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT12
    #define TIM2_TC7Hi_BIT13 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT13
    #define TIM2_TC7Hi_BIT14 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT14
    #define TIM2_TC7Hi_BIT15 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.Bits.BIT15
    #define TIM2_TC7Hi_BIT_8 _TIM2_TC7.Overlap_STR.TIM2_TC7HiSTR.MergedBits.grpBIT_8
    #define TIM2_TC7Hi_BIT TIM2_TC7Hi_BIT_8
    
    /*** TIM2_TC7Lo - TIM2 Timer Input Capture/Output Compare Register 7 Low; 0x0000019F ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 0 */
        byte BIT1        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 1 */
        byte BIT2        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 2 */
        byte BIT3        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 3 */
        byte BIT4        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 4 */
        byte BIT5        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 5 */
        byte BIT6        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 6 */
        byte BIT7        :1;                                       /* Timer Input Capture/Output Compare Register 7 Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } TIM2_TC7LoSTR;
    #define TIM2_TC7Lo _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Byte
    #define TIM2_TC7Lo_BIT0 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT0
    #define TIM2_TC7Lo_BIT1 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT1
    #define TIM2_TC7Lo_BIT2 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT2
    #define TIM2_TC7Lo_BIT3 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT3
    #define TIM2_TC7Lo_BIT4 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT4
    #define TIM2_TC7Lo_BIT5 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT5
    #define TIM2_TC7Lo_BIT6 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT6
    #define TIM2_TC7Lo_BIT7 _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.Bits.BIT7
    #define TIM2_TC7Lo_BIT _TIM2_TC7.Overlap_STR.TIM2_TC7LoSTR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM2_TC7STR;
extern volatile TIM2_TC7STR _TIM2_TC7 @(REG_BASE + 0x0000019E);
#define TIM2_TC7 _TIM2_TC7.Word
#define TIM2_TC7_BIT _TIM2_TC7.MergedBits.grpBIT


/*** TIM2_PACNT - TIM2 Pulse Accumulators Count Register; 0x000001A2 ***/
typedef union {
  word Word;
  struct {
    word grpBIT  :16;
  } MergedBits;
} TIM2_PACNTSTR;
extern volatile TIM2_PACNTSTR _TIM2_PACNT @(REG_BASE + 0x000001A2);
#define TIM2_PACNT _TIM2_PACNT.Word
#define TIM2_PACNT_BIT _TIM2_PACNT.MergedBits.grpBIT


/*** PWMCNT01 - PWM Channel Counter 01 Register; 0x000001EC ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMCNT0 - PWM Channel Counter 0 Register; 0x000001EC ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMCNT0STR;
    #define PWMCNT0 _PWMCNT01.Overlap_STR.PWMCNT0STR.Byte
    #define PWMCNT0_BIT _PWMCNT01.Overlap_STR.PWMCNT0STR.MergedBits.grpBIT
    
    /*** PWMCNT1 - PWM Channel Counter 1 Register; 0x000001ED ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMCNT1STR;
    #define PWMCNT1 _PWMCNT01.Overlap_STR.PWMCNT1STR.Byte
    #define PWMCNT1_BIT _PWMCNT01.Overlap_STR.PWMCNT1STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMCNT01STR;
extern volatile PWMCNT01STR _PWMCNT01 @(REG_BASE + 0x000001EC);
#define PWMCNT01 _PWMCNT01.Word
#define PWMCNT01_BIT _PWMCNT01.MergedBits.grpBIT


/*** PWMCNT23 - PWM Channel Counter 23 Register; 0x000001EE ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMCNT2 - PWM Channel Counter 2 Register; 0x000001EE ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMCNT2STR;
    #define PWMCNT2 _PWMCNT23.Overlap_STR.PWMCNT2STR.Byte
    #define PWMCNT2_BIT _PWMCNT23.Overlap_STR.PWMCNT2STR.MergedBits.grpBIT
    
    /*** PWMCNT3 - PWM Channel Counter 3 Register; 0x000001EF ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMCNT3STR;
    #define PWMCNT3 _PWMCNT23.Overlap_STR.PWMCNT3STR.Byte
    #define PWMCNT3_BIT _PWMCNT23.Overlap_STR.PWMCNT3STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMCNT23STR;
extern volatile PWMCNT23STR _PWMCNT23 @(REG_BASE + 0x000001EE);
#define PWMCNT23 _PWMCNT23.Word
#define PWMCNT23_BIT _PWMCNT23.MergedBits.grpBIT


/*** PWMCNT45 - PWM Channel Counter 45 Register; 0x000001F0 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMCNT4 - PWM Channel Counter 4 Register; 0x000001F0 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* PWM Channel Counter Bit 0 */
        byte BIT1        :1;                                       /* PWM Channel Counter Bit 1 */
        byte BIT2        :1;                                       /* PWM Channel Counter Bit 2 */
        byte BIT3        :1;                                       /* PWM Channel Counter Bit 3 */
        byte BIT4        :1;                                       /* PWM Channel Counter Bit 4 */
        byte BIT5        :1;                                       /* PWM Channel Counter Bit 5 */
        byte BIT6        :1;                                       /* PWM Channel Counter Bit 6 */
        byte BIT7        :1;                                       /* PWM Channel Counter Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMCNT4STR;
    #define PWMCNT4 _PWMCNT45.Overlap_STR.PWMCNT4STR.Byte
    #define PWMCNT4_BIT0 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT0
    #define PWMCNT4_BIT1 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT1
    #define PWMCNT4_BIT2 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT2
    #define PWMCNT4_BIT3 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT3
    #define PWMCNT4_BIT4 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT4
    #define PWMCNT4_BIT5 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT5
    #define PWMCNT4_BIT6 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT6
    #define PWMCNT4_BIT7 _PWMCNT45.Overlap_STR.PWMCNT4STR.Bits.BIT7
    #define PWMCNT4_BIT _PWMCNT45.Overlap_STR.PWMCNT4STR.MergedBits.grpBIT
    
    /*** PWMCNT5 - PWM Channel Counter 5 Register; 0x000001F1 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* PWM Channel Counter Bit 0 */
        byte BIT1        :1;                                       /* PWM Channel Counter Bit 1 */
        byte BIT2        :1;                                       /* PWM Channel Counter Bit 2 */
        byte BIT3        :1;                                       /* PWM Channel Counter Bit 3 */
        byte BIT4        :1;                                       /* PWM Channel Counter Bit 4 */
        byte BIT5        :1;                                       /* PWM Channel Counter Bit 5 */
        byte BIT6        :1;                                       /* PWM Channel Counter Bit 6 */
        byte BIT7        :1;                                       /* PWM Channel Counter Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMCNT5STR;
    #define PWMCNT5 _PWMCNT45.Overlap_STR.PWMCNT5STR.Byte
    #define PWMCNT5_BIT0 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT0
    #define PWMCNT5_BIT1 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT1
    #define PWMCNT5_BIT2 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT2
    #define PWMCNT5_BIT3 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT3
    #define PWMCNT5_BIT4 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT4
    #define PWMCNT5_BIT5 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT5
    #define PWMCNT5_BIT6 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT6
    #define PWMCNT5_BIT7 _PWMCNT45.Overlap_STR.PWMCNT5STR.Bits.BIT7
    #define PWMCNT5_BIT _PWMCNT45.Overlap_STR.PWMCNT5STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word BIT0        :1;                                       /* PWM Channel Counter Bit 0 */
    word BIT1        :1;                                       /* PWM Channel Counter Bit 1 */
    word BIT2        :1;                                       /* PWM Channel Counter Bit 2 */
    word BIT3        :1;                                       /* PWM Channel Counter Bit 3 */
    word BIT4        :1;                                       /* PWM Channel Counter Bit 4 */
    word BIT5        :1;                                       /* PWM Channel Counter Bit 5 */
    word BIT6        :1;                                       /* PWM Channel Counter Bit 6 */
    word BIT7        :1;                                       /* PWM Channel Counter Bit 7 */
    word BIT8        :1;                                       /* PWM Channel Counter Bit 8 */
    word BIT9        :1;                                       /* PWM Channel Counter Bit 9 */
    word BIT10       :1;                                       /* PWM Channel Counter Bit 10 */
    word BIT11       :1;                                       /* PWM Channel Counter Bit 11 */
    word BIT12       :1;                                       /* PWM Channel Counter Bit 12 */
    word BIT13       :1;                                       /* PWM Channel Counter Bit 13 */
    word BIT14       :1;                                       /* PWM Channel Counter Bit 14 */
    word BIT15       :1;                                       /* PWM Channel Counter Bit 15 */
  } Bits;
  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMCNT45STR;
extern volatile PWMCNT45STR _PWMCNT45 @(REG_BASE + 0x000001F0);
#define PWMCNT45 _PWMCNT45.Word
#define PWMCNT45_BIT0 _PWMCNT45.Bits.BIT0
#define PWMCNT45_BIT1 _PWMCNT45.Bits.BIT1
#define PWMCNT45_BIT2 _PWMCNT45.Bits.BIT2
#define PWMCNT45_BIT3 _PWMCNT45.Bits.BIT3
#define PWMCNT45_BIT4 _PWMCNT45.Bits.BIT4
#define PWMCNT45_BIT5 _PWMCNT45.Bits.BIT5
#define PWMCNT45_BIT6 _PWMCNT45.Bits.BIT6
#define PWMCNT45_BIT7 _PWMCNT45.Bits.BIT7
#define PWMCNT45_BIT8 _PWMCNT45.Bits.BIT8
#define PWMCNT45_BIT9 _PWMCNT45.Bits.BIT9
#define PWMCNT45_BIT10 _PWMCNT45.Bits.BIT10
#define PWMCNT45_BIT11 _PWMCNT45.Bits.BIT11
#define PWMCNT45_BIT12 _PWMCNT45.Bits.BIT12
#define PWMCNT45_BIT13 _PWMCNT45.Bits.BIT13
#define PWMCNT45_BIT14 _PWMCNT45.Bits.BIT14
#define PWMCNT45_BIT15 _PWMCNT45.Bits.BIT15
#define PWMCNT45_BIT _PWMCNT45.MergedBits.grpBIT


/*** PWMPER01 - PWM Channel Period 01 Register; 0x000001F2 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMPER0 - PWM Channel Period 0 Register; 0x000001F2 ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMPER0STR;
    #define PWMPER0 _PWMPER01.Overlap_STR.PWMPER0STR.Byte
    #define PWMPER0_BIT _PWMPER01.Overlap_STR.PWMPER0STR.MergedBits.grpBIT
    
    /*** PWMPER1 - PWM Channel Period 1 Register; 0x000001F3 ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMPER1STR;
    #define PWMPER1 _PWMPER01.Overlap_STR.PWMPER1STR.Byte
    #define PWMPER1_BIT _PWMPER01.Overlap_STR.PWMPER1STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMPER01STR;
extern volatile PWMPER01STR _PWMPER01 @(REG_BASE + 0x000001F2);
#define PWMPER01 _PWMPER01.Word
#define PWMPER01_BIT _PWMPER01.MergedBits.grpBIT


/*** PWMPER23 - PWM Channel Period 23 Register; 0x000001F4 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMPER2 - PWM Channel Period 2 Register; 0x000001F4 ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMPER2STR;
    #define PWMPER2 _PWMPER23.Overlap_STR.PWMPER2STR.Byte
    #define PWMPER2_BIT _PWMPER23.Overlap_STR.PWMPER2STR.MergedBits.grpBIT
    
    /*** PWMPER3 - PWM Channel Period 3 Register; 0x000001F5 ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMPER3STR;
    #define PWMPER3 _PWMPER23.Overlap_STR.PWMPER3STR.Byte
    #define PWMPER3_BIT _PWMPER23.Overlap_STR.PWMPER3STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMPER23STR;
extern volatile PWMPER23STR _PWMPER23 @(REG_BASE + 0x000001F4);
#define PWMPER23 _PWMPER23.Word
#define PWMPER23_BIT _PWMPER23.MergedBits.grpBIT


/*** PWMPER45 - PWM Channel Period 45 Register; 0x000001F6 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMPER4 - PWM Channel Period 4 Register; 0x000001F6 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* PWM Channel Period Bit 0 */
        byte BIT1        :1;                                       /* PWM Channel Period Bit 1 */
        byte BIT2        :1;                                       /* PWM Channel Period Bit 2 */
        byte BIT3        :1;                                       /* PWM Channel Period Bit 3 */
        byte BIT4        :1;                                       /* PWM Channel Period Bit 4 */
        byte BIT5        :1;                                       /* PWM Channel Period Bit 5 */
        byte BIT6        :1;                                       /* PWM Channel Period Bit 6 */
        byte BIT7        :1;                                       /* PWM Channel Period Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMPER4STR;
    #define PWMPER4 _PWMPER45.Overlap_STR.PWMPER4STR.Byte
    #define PWMPER4_BIT0 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT0
    #define PWMPER4_BIT1 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT1
    #define PWMPER4_BIT2 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT2
    #define PWMPER4_BIT3 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT3
    #define PWMPER4_BIT4 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT4
    #define PWMPER4_BIT5 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT5
    #define PWMPER4_BIT6 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT6
    #define PWMPER4_BIT7 _PWMPER45.Overlap_STR.PWMPER4STR.Bits.BIT7
    #define PWMPER4_BIT _PWMPER45.Overlap_STR.PWMPER4STR.MergedBits.grpBIT
    
    /*** PWMPER5 - PWM Channel Period 5 Register; 0x000001F7 ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* PWM Channel Period Bit 0 */
        byte BIT1        :1;                                       /* PWM Channel Period Bit 1 */
        byte BIT2        :1;                                       /* PWM Channel Period Bit 2 */
        byte BIT3        :1;                                       /* PWM Channel Period Bit 3 */
        byte BIT4        :1;                                       /* PWM Channel Period Bit 4 */
        byte BIT5        :1;                                       /* PWM Channel Period Bit 5 */
        byte BIT6        :1;                                       /* PWM Channel Period Bit 6 */
        byte BIT7        :1;                                       /* PWM Channel Period Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMPER5STR;
    #define PWMPER5 _PWMPER45.Overlap_STR.PWMPER5STR.Byte
    #define PWMPER5_BIT0 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT0
    #define PWMPER5_BIT1 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT1
    #define PWMPER5_BIT2 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT2
    #define PWMPER5_BIT3 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT3
    #define PWMPER5_BIT4 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT4
    #define PWMPER5_BIT5 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT5
    #define PWMPER5_BIT6 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT6
    #define PWMPER5_BIT7 _PWMPER45.Overlap_STR.PWMPER5STR.Bits.BIT7
    #define PWMPER5_BIT _PWMPER45.Overlap_STR.PWMPER5STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word BIT0        :1;                                       /* PWM Channel Period Bit 0 */
    word BIT1        :1;                                       /* PWM Channel Period Bit 1 */
    word BIT2        :1;                                       /* PWM Channel Period Bit 2 */
    word BIT3        :1;                                       /* PWM Channel Period Bit 3 */
    word BIT4        :1;                                       /* PWM Channel Period Bit 4 */
    word BIT5        :1;                                       /* PWM Channel Period Bit 5 */
    word BIT6        :1;                                       /* PWM Channel Period Bit 6 */
    word BIT7        :1;                                       /* PWM Channel Period Bit 7 */
    word BIT8        :1;                                       /* PWM Channel Period Bit 8 */
    word BIT9        :1;                                       /* PWM Channel Period Bit 9 */
    word BIT10       :1;                                       /* PWM Channel Period Bit 10 */
    word BIT11       :1;                                       /* PWM Channel Period Bit 11 */
    word BIT12       :1;                                       /* PWM Channel Period Bit 12 */
    word BIT13       :1;                                       /* PWM Channel Period Bit 13 */
    word BIT14       :1;                                       /* PWM Channel Period Bit 14 */
    word BIT15       :1;                                       /* PWM Channel Period Bit 15 */
  } Bits;
  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMPER45STR;
extern volatile PWMPER45STR _PWMPER45 @(REG_BASE + 0x000001F6);
#define PWMPER45 _PWMPER45.Word
#define PWMPER45_BIT0 _PWMPER45.Bits.BIT0
#define PWMPER45_BIT1 _PWMPER45.Bits.BIT1
#define PWMPER45_BIT2 _PWMPER45.Bits.BIT2
#define PWMPER45_BIT3 _PWMPER45.Bits.BIT3
#define PWMPER45_BIT4 _PWMPER45.Bits.BIT4
#define PWMPER45_BIT5 _PWMPER45.Bits.BIT5
#define PWMPER45_BIT6 _PWMPER45.Bits.BIT6
#define PWMPER45_BIT7 _PWMPER45.Bits.BIT7
#define PWMPER45_BIT8 _PWMPER45.Bits.BIT8
#define PWMPER45_BIT9 _PWMPER45.Bits.BIT9
#define PWMPER45_BIT10 _PWMPER45.Bits.BIT10
#define PWMPER45_BIT11 _PWMPER45.Bits.BIT11
#define PWMPER45_BIT12 _PWMPER45.Bits.BIT12
#define PWMPER45_BIT13 _PWMPER45.Bits.BIT13
#define PWMPER45_BIT14 _PWMPER45.Bits.BIT14
#define PWMPER45_BIT15 _PWMPER45.Bits.BIT15
#define PWMPER45_BIT _PWMPER45.MergedBits.grpBIT


/*** PWMDTY01 - PWM Channel Duty 01 Register; 0x000001F8 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMDTY0 - PWM Channel Duty 0 Register; 0x000001F8 ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMDTY0STR;
    #define PWMDTY0 _PWMDTY01.Overlap_STR.PWMDTY0STR.Byte
    #define PWMDTY0_BIT _PWMDTY01.Overlap_STR.PWMDTY0STR.MergedBits.grpBIT
    
    /*** PWMDTY1 - PWM Channel Duty 1 Register; 0x000001F9 ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMDTY1STR;
    #define PWMDTY1 _PWMDTY01.Overlap_STR.PWMDTY1STR.Byte
    #define PWMDTY1_BIT _PWMDTY01.Overlap_STR.PWMDTY1STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMDTY01STR;
extern volatile PWMDTY01STR _PWMDTY01 @(REG_BASE + 0x000001F8);
#define PWMDTY01 _PWMDTY01.Word
#define PWMDTY01_BIT _PWMDTY01.MergedBits.grpBIT


/*** PWMDTY23 - PWM Channel Duty 23 Register; 0x000001FA ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMDTY2 - PWM Channel Duty 2 Register; 0x000001FA ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMDTY2STR;
    #define PWMDTY2 _PWMDTY23.Overlap_STR.PWMDTY2STR.Byte
    #define PWMDTY2_BIT _PWMDTY23.Overlap_STR.PWMDTY2STR.MergedBits.grpBIT
    
    /*** PWMDTY3 - PWM Channel Duty 3 Register; 0x000001FB ***/
    union {
      byte Byte;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMDTY3STR;
    #define PWMDTY3 _PWMDTY23.Overlap_STR.PWMDTY3STR.Byte
    #define PWMDTY3_BIT _PWMDTY23.Overlap_STR.PWMDTY3STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMDTY23STR;
extern volatile PWMDTY23STR _PWMDTY23 @(REG_BASE + 0x000001FA);
#define PWMDTY23 _PWMDTY23.Word
#define PWMDTY23_BIT _PWMDTY23.MergedBits.grpBIT


/*** PWMDTY45 - PWM Channel Duty 45 Register; 0x000001FC ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PWMDTY4 - PWM Channel Duty 4 Register; 0x000001FC ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* PWM Channel Duty Bit 0 */
        byte BIT1        :1;                                       /* PWM Channel Duty Bit 1 */
        byte BIT2        :1;                                       /* PWM Channel Duty Bit 2 */
        byte BIT3        :1;                                       /* PWM Channel Duty Bit 3 */
        byte BIT4        :1;                                       /* PWM Channel Duty Bit 4 */
        byte BIT5        :1;                                       /* PWM Channel Duty Bit 5 */
        byte BIT6        :1;                                       /* PWM Channel Duty Bit 6 */
        byte BIT7        :1;                                       /* PWM Channel Duty Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMDTY4STR;
    #define PWMDTY4 _PWMDTY45.Overlap_STR.PWMDTY4STR.Byte
    #define PWMDTY4_BIT0 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT0
    #define PWMDTY4_BIT1 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT1
    #define PWMDTY4_BIT2 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT2
    #define PWMDTY4_BIT3 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT3
    #define PWMDTY4_BIT4 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT4
    #define PWMDTY4_BIT5 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT5
    #define PWMDTY4_BIT6 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT6
    #define PWMDTY4_BIT7 _PWMDTY45.Overlap_STR.PWMDTY4STR.Bits.BIT7
    #define PWMDTY4_BIT _PWMDTY45.Overlap_STR.PWMDTY4STR.MergedBits.grpBIT
    
    /*** PWMDTY5 - PWM Channel Duty 5 Register; 0x000001FD ***/
    union {
      byte Byte;
      struct {
        byte BIT0        :1;                                       /* PWM Channel Duty Bit 0 */
        byte BIT1        :1;                                       /* PWM Channel Duty Bit 1 */
        byte BIT2        :1;                                       /* PWM Channel Duty Bit 2 */
        byte BIT3        :1;                                       /* PWM Channel Duty Bit 3 */
        byte BIT4        :1;                                       /* PWM Channel Duty Bit 4 */
        byte BIT5        :1;                                       /* PWM Channel Duty Bit 5 */
        byte BIT6        :1;                                       /* PWM Channel Duty Bit 6 */
        byte BIT7        :1;                                       /* PWM Channel Duty Bit 7 */
      } Bits;
      struct {
        byte grpBIT :8;
      } MergedBits;
    } PWMDTY5STR;
    #define PWMDTY5 _PWMDTY45.Overlap_STR.PWMDTY5STR.Byte
    #define PWMDTY5_BIT0 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT0
    #define PWMDTY5_BIT1 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT1
    #define PWMDTY5_BIT2 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT2
    #define PWMDTY5_BIT3 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT3
    #define PWMDTY5_BIT4 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT4
    #define PWMDTY5_BIT5 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT5
    #define PWMDTY5_BIT6 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT6
    #define PWMDTY5_BIT7 _PWMDTY45.Overlap_STR.PWMDTY5STR.Bits.BIT7
    #define PWMDTY5_BIT _PWMDTY45.Overlap_STR.PWMDTY5STR.MergedBits.grpBIT
    
  } Overlap_STR;

  struct {
    word BIT0        :1;                                       /* PWM Channel Duty Bit 0 */
    word BIT1        :1;                                       /* PWM Channel Duty Bit 1 */
    word BIT2        :1;                                       /* PWM Channel Duty Bit 2 */
    word BIT3        :1;                                       /* PWM Channel Duty Bit 3 */
    word BIT4        :1;                                       /* PWM Channel Duty Bit 4 */
    word BIT5        :1;                                       /* PWM Channel Duty Bit 5 */
    word BIT6        :1;                                       /* PWM Channel Duty Bit 6 */
    word BIT7        :1;                                       /* PWM Channel Duty Bit 7 */
    word BIT8        :1;                                       /* PWM Channel Duty Bit 8 */
    word BIT9        :1;                                       /* PWM Channel Duty Bit 9 */
    word BIT10       :1;                                       /* PWM Channel Duty Bit 10 */
    word BIT11       :1;                                       /* PWM Channel Duty Bit 11 */
    word BIT12       :1;                                       /* PWM Channel Duty Bit 12 */
    word BIT13       :1;                                       /* PWM Channel Duty Bit 13 */
    word BIT14       :1;                                       /* PWM Channel Duty Bit 14 */
    word BIT15       :1;                                       /* PWM Channel Duty Bit 15 */
  } Bits;
  struct {
    word grpBIT  :16;
  } MergedBits;
} PWMDTY45STR;
extern volatile PWMDTY45STR _PWMDTY45 @(REG_BASE + 0x000001FC);
#define PWMDTY45 _PWMDTY45.Word
#define PWMDTY45_BIT0 _PWMDTY45.Bits.BIT0
#define PWMDTY45_BIT1 _PWMDTY45.Bits.BIT1
#define PWMDTY45_BIT2 _PWMDTY45.Bits.BIT2
#define PWMDTY45_BIT3 _PWMDTY45.Bits.BIT3
#define PWMDTY45_BIT4 _PWMDTY45.Bits.BIT4
#define PWMDTY45_BIT5 _PWMDTY45.Bits.BIT5
#define PWMDTY45_BIT6 _PWMDTY45.Bits.BIT6
#define PWMDTY45_BIT7 _PWMDTY45.Bits.BIT7
#define PWMDTY45_BIT8 _PWMDTY45.Bits.BIT8
#define PWMDTY45_BIT9 _PWMDTY45.Bits.BIT9
#define PWMDTY45_BIT10 _PWMDTY45.Bits.BIT10
#define PWMDTY45_BIT11 _PWMDTY45.Bits.BIT11
#define PWMDTY45_BIT12 _PWMDTY45.Bits.BIT12
#define PWMDTY45_BIT13 _PWMDTY45.Bits.BIT13
#define PWMDTY45_BIT14 _PWMDTY45.Bits.BIT14
#define PWMDTY45_BIT15 _PWMDTY45.Bits.BIT15
#define PWMDTY45_BIT _PWMDTY45.MergedBits.grpBIT


/*** PMFVAL0 - PMF Value 0 Register; 0x00000210 ***/
typedef union {
  word Word;
  struct {
    word PMFVAL00    :1;                                       /* PMF Value 0, bit 0 */
    word PMFVAL01    :1;                                       /* PMF Value 0, bit 1 */
    word PMFVAL02    :1;                                       /* PMF Value 0, bit 2 */
    word PMFVAL03    :1;                                       /* PMF Value 0, bit 3 */
    word PMFVAL04    :1;                                       /* PMF Value 0, bit 4 */
    word PMFVAL05    :1;                                       /* PMF Value 0, bit 5 */
    word PMFVAL06    :1;                                       /* PMF Value 0, bit 6 */
    word PMFVAL07    :1;                                       /* PMF Value 0, bit 7 */
    word PMFVAL08    :1;                                       /* PMF Value 0, bit 8 */
    word PMFVAL09    :1;                                       /* PMF Value 0, bit 9 */
    word PMFVAL010   :1;                                       /* PMF Value 0, bit 10 */
    word PMFVAL011   :1;                                       /* PMF Value 0, bit 11 */
    word PMFVAL012   :1;                                       /* PMF Value 0, bit 12 */
    word PMFVAL013   :1;                                       /* PMF Value 0, bit 13 */
    word PMFVAL014   :1;                                       /* PMF Value 0, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFVAL0 :15;
    word         :1;
  } MergedBits;
} PMFVAL0STR;
extern volatile PMFVAL0STR _PMFVAL0 @(REG_BASE + 0x00000210);
#define PMFVAL0 _PMFVAL0.Word
#define PMFVAL0_PMFVAL00 _PMFVAL0.Bits.PMFVAL00
#define PMFVAL0_PMFVAL01 _PMFVAL0.Bits.PMFVAL01
#define PMFVAL0_PMFVAL02 _PMFVAL0.Bits.PMFVAL02
#define PMFVAL0_PMFVAL03 _PMFVAL0.Bits.PMFVAL03
#define PMFVAL0_PMFVAL04 _PMFVAL0.Bits.PMFVAL04
#define PMFVAL0_PMFVAL05 _PMFVAL0.Bits.PMFVAL05
#define PMFVAL0_PMFVAL06 _PMFVAL0.Bits.PMFVAL06
#define PMFVAL0_PMFVAL07 _PMFVAL0.Bits.PMFVAL07
#define PMFVAL0_PMFVAL08 _PMFVAL0.Bits.PMFVAL08
#define PMFVAL0_PMFVAL09 _PMFVAL0.Bits.PMFVAL09
#define PMFVAL0_PMFVAL010 _PMFVAL0.Bits.PMFVAL010
#define PMFVAL0_PMFVAL011 _PMFVAL0.Bits.PMFVAL011
#define PMFVAL0_PMFVAL012 _PMFVAL0.Bits.PMFVAL012
#define PMFVAL0_PMFVAL013 _PMFVAL0.Bits.PMFVAL013
#define PMFVAL0_PMFVAL014 _PMFVAL0.Bits.PMFVAL014
#define PMFVAL0_PMFVAL0 _PMFVAL0.MergedBits.grpPMFVAL0


/*** PMFVAL1 - PMF Value 1 Register; 0x00000212 ***/
typedef union {
  word Word;
  struct {
    word PMFVAL10    :1;                                       /* PMF Value 1, bit 0 */
    word PMFVAL11    :1;                                       /* PMF Value 1, bit 1 */
    word PMFVAL12    :1;                                       /* PMF Value 1, bit 2 */
    word PMFVAL13    :1;                                       /* PMF Value 1, bit 3 */
    word PMFVAL14    :1;                                       /* PMF Value 1, bit 4 */
    word PMFVAL15    :1;                                       /* PMF Value 1, bit 5 */
    word PMFVAL16    :1;                                       /* PMF Value 1, bit 6 */
    word PMFVAL17    :1;                                       /* PMF Value 1, bit 7 */
    word PMFVAL18    :1;                                       /* PMF Value 1, bit 8 */
    word PMFVAL19    :1;                                       /* PMF Value 1, bit 9 */
    word PMFVAL110   :1;                                       /* PMF Value 1, bit 10 */
    word PMFVAL111   :1;                                       /* PMF Value 1, bit 11 */
    word PMFVAL112   :1;                                       /* PMF Value 1, bit 12 */
    word PMFVAL113   :1;                                       /* PMF Value 1, bit 13 */
    word PMFVAL114   :1;                                       /* PMF Value 1, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFVAL_10 :10;
    word grpPMFVAL1_10 :5;
    word         :1;
  } MergedBits;
} PMFVAL1STR;
extern volatile PMFVAL1STR _PMFVAL1 @(REG_BASE + 0x00000212);
#define PMFVAL1 _PMFVAL1.Word
#define PMFVAL1_PMFVAL10 _PMFVAL1.Bits.PMFVAL10
#define PMFVAL1_PMFVAL11 _PMFVAL1.Bits.PMFVAL11
#define PMFVAL1_PMFVAL12 _PMFVAL1.Bits.PMFVAL12
#define PMFVAL1_PMFVAL13 _PMFVAL1.Bits.PMFVAL13
#define PMFVAL1_PMFVAL14 _PMFVAL1.Bits.PMFVAL14
#define PMFVAL1_PMFVAL15 _PMFVAL1.Bits.PMFVAL15
#define PMFVAL1_PMFVAL16 _PMFVAL1.Bits.PMFVAL16
#define PMFVAL1_PMFVAL17 _PMFVAL1.Bits.PMFVAL17
#define PMFVAL1_PMFVAL18 _PMFVAL1.Bits.PMFVAL18
#define PMFVAL1_PMFVAL19 _PMFVAL1.Bits.PMFVAL19
#define PMFVAL1_PMFVAL110 _PMFVAL1.Bits.PMFVAL110
#define PMFVAL1_PMFVAL111 _PMFVAL1.Bits.PMFVAL111
#define PMFVAL1_PMFVAL112 _PMFVAL1.Bits.PMFVAL112
#define PMFVAL1_PMFVAL113 _PMFVAL1.Bits.PMFVAL113
#define PMFVAL1_PMFVAL114 _PMFVAL1.Bits.PMFVAL114
#define PMFVAL1_PMFVAL_10 _PMFVAL1.MergedBits.grpPMFVAL_10
#define PMFVAL1_PMFVAL1_10 _PMFVAL1.MergedBits.grpPMFVAL1_10
#define PMFVAL1_PMFVAL PMFVAL1_PMFVAL_10


/*** PMFVAL2 - PMF Value 2 Register; 0x00000214 ***/
typedef union {
  word Word;
  struct {
    word PMFVAL20    :1;                                       /* PMF Value 2, bit 0 */
    word PMFVAL21    :1;                                       /* PMF Value 2, bit 1 */
    word PMFVAL22    :1;                                       /* PMF Value 2, bit 2 */
    word PMFVAL23    :1;                                       /* PMF Value 2, bit 3 */
    word PMFVAL24    :1;                                       /* PMF Value 2, bit 4 */
    word PMFVAL25    :1;                                       /* PMF Value 2, bit 5 */
    word PMFVAL26    :1;                                       /* PMF Value 2, bit 6 */
    word PMFVAL27    :1;                                       /* PMF Value 2, bit 7 */
    word PMFVAL28    :1;                                       /* PMF Value 2, bit 8 */
    word PMFVAL29    :1;                                       /* PMF Value 2, bit 9 */
    word PMFVAL210   :1;                                       /* PMF Value 2, bit 10 */
    word PMFVAL211   :1;                                       /* PMF Value 2, bit 11 */
    word PMFVAL212   :1;                                       /* PMF Value 2, bit 12 */
    word PMFVAL213   :1;                                       /* PMF Value 2, bit 13 */
    word PMFVAL214   :1;                                       /* PMF Value 2, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFVAL_20 :10;
    word grpPMFVAL2_10 :5;
    word         :1;
  } MergedBits;
} PMFVAL2STR;
extern volatile PMFVAL2STR _PMFVAL2 @(REG_BASE + 0x00000214);
#define PMFVAL2 _PMFVAL2.Word
#define PMFVAL2_PMFVAL20 _PMFVAL2.Bits.PMFVAL20
#define PMFVAL2_PMFVAL21 _PMFVAL2.Bits.PMFVAL21
#define PMFVAL2_PMFVAL22 _PMFVAL2.Bits.PMFVAL22
#define PMFVAL2_PMFVAL23 _PMFVAL2.Bits.PMFVAL23
#define PMFVAL2_PMFVAL24 _PMFVAL2.Bits.PMFVAL24
#define PMFVAL2_PMFVAL25 _PMFVAL2.Bits.PMFVAL25
#define PMFVAL2_PMFVAL26 _PMFVAL2.Bits.PMFVAL26
#define PMFVAL2_PMFVAL27 _PMFVAL2.Bits.PMFVAL27
#define PMFVAL2_PMFVAL28 _PMFVAL2.Bits.PMFVAL28
#define PMFVAL2_PMFVAL29 _PMFVAL2.Bits.PMFVAL29
#define PMFVAL2_PMFVAL210 _PMFVAL2.Bits.PMFVAL210
#define PMFVAL2_PMFVAL211 _PMFVAL2.Bits.PMFVAL211
#define PMFVAL2_PMFVAL212 _PMFVAL2.Bits.PMFVAL212
#define PMFVAL2_PMFVAL213 _PMFVAL2.Bits.PMFVAL213
#define PMFVAL2_PMFVAL214 _PMFVAL2.Bits.PMFVAL214
#define PMFVAL2_PMFVAL_20 _PMFVAL2.MergedBits.grpPMFVAL_20
#define PMFVAL2_PMFVAL2_10 _PMFVAL2.MergedBits.grpPMFVAL2_10
#define PMFVAL2_PMFVAL PMFVAL2_PMFVAL_20


/*** PMFVAL3 - PMF Value 3 Register; 0x00000216 ***/
typedef union {
  word Word;
  struct {
    word PMFVAL30    :1;                                       /* PMF Value 3, bit 0 */
    word PMFVAL31    :1;                                       /* PMF Value 3, bit 1 */
    word PMFVAL32    :1;                                       /* PMF Value 3, bit 2 */
    word PMFVAL33    :1;                                       /* PMF Value 3, bit 3 */
    word PMFVAL34    :1;                                       /* PMF Value 3, bit 4 */
    word PMFVAL35    :1;                                       /* PMF Value 3, bit 5 */
    word PMFVAL36    :1;                                       /* PMF Value 3, bit 6 */
    word PMFVAL37    :1;                                       /* PMF Value 3, bit 7 */
    word PMFVAL38    :1;                                       /* PMF Value 3, bit 8 */
    word PMFVAL39    :1;                                       /* PMF Value 3, bit 9 */
    word PMFVAL310   :1;                                       /* PMF Value 3, bit 10 */
    word PMFVAL311   :1;                                       /* PMF Value 3, bit 11 */
    word PMFVAL312   :1;                                       /* PMF Value 3, bit 12 */
    word PMFVAL313   :1;                                       /* PMF Value 3, bit 13 */
    word PMFVAL314   :1;                                       /* PMF Value 3, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFVAL_30 :10;
    word grpPMFVAL3_10 :5;
    word         :1;
  } MergedBits;
} PMFVAL3STR;
extern volatile PMFVAL3STR _PMFVAL3 @(REG_BASE + 0x00000216);
#define PMFVAL3 _PMFVAL3.Word
#define PMFVAL3_PMFVAL30 _PMFVAL3.Bits.PMFVAL30
#define PMFVAL3_PMFVAL31 _PMFVAL3.Bits.PMFVAL31
#define PMFVAL3_PMFVAL32 _PMFVAL3.Bits.PMFVAL32
#define PMFVAL3_PMFVAL33 _PMFVAL3.Bits.PMFVAL33
#define PMFVAL3_PMFVAL34 _PMFVAL3.Bits.PMFVAL34
#define PMFVAL3_PMFVAL35 _PMFVAL3.Bits.PMFVAL35
#define PMFVAL3_PMFVAL36 _PMFVAL3.Bits.PMFVAL36
#define PMFVAL3_PMFVAL37 _PMFVAL3.Bits.PMFVAL37
#define PMFVAL3_PMFVAL38 _PMFVAL3.Bits.PMFVAL38
#define PMFVAL3_PMFVAL39 _PMFVAL3.Bits.PMFVAL39
#define PMFVAL3_PMFVAL310 _PMFVAL3.Bits.PMFVAL310
#define PMFVAL3_PMFVAL311 _PMFVAL3.Bits.PMFVAL311
#define PMFVAL3_PMFVAL312 _PMFVAL3.Bits.PMFVAL312
#define PMFVAL3_PMFVAL313 _PMFVAL3.Bits.PMFVAL313
#define PMFVAL3_PMFVAL314 _PMFVAL3.Bits.PMFVAL314
#define PMFVAL3_PMFVAL_30 _PMFVAL3.MergedBits.grpPMFVAL_30
#define PMFVAL3_PMFVAL3_10 _PMFVAL3.MergedBits.grpPMFVAL3_10
#define PMFVAL3_PMFVAL PMFVAL3_PMFVAL_30


/*** PMFVAL4 - PMF Value 4 Register; 0x00000218 ***/
typedef union {
  word Word;
  struct {
    word PMFVAL40    :1;                                       /* PMF Value 4, bit 0 */
    word PMFVAL41    :1;                                       /* PMF Value 4, bit 1 */
    word PMFVAL42    :1;                                       /* PMF Value 4, bit 2 */
    word PMFVAL43    :1;                                       /* PMF Value 4, bit 3 */
    word PMFVAL44    :1;                                       /* PMF Value 4, bit 4 */
    word PMFVAL45    :1;                                       /* PMF Value 4, bit 5 */
    word PMFVAL46    :1;                                       /* PMF Value 4, bit 6 */
    word PMFVAL47    :1;                                       /* PMF Value 4, bit 7 */
    word PMFVAL48    :1;                                       /* PMF Value 4, bit 8 */
    word PMFVAL49    :1;                                       /* PMF Value 4, bit 9 */
    word PMFVAL410   :1;                                       /* PMF Value 4, bit 10 */
    word PMFVAL411   :1;                                       /* PMF Value 4, bit 11 */
    word PMFVAL412   :1;                                       /* PMF Value 4, bit 12 */
    word PMFVAL413   :1;                                       /* PMF Value 4, bit 13 */
    word PMFVAL414   :1;                                       /* PMF Value 4, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFVAL_40 :10;
    word grpPMFVAL4_10 :5;
    word         :1;
  } MergedBits;
} PMFVAL4STR;
extern volatile PMFVAL4STR _PMFVAL4 @(REG_BASE + 0x00000218);
#define PMFVAL4 _PMFVAL4.Word
#define PMFVAL4_PMFVAL40 _PMFVAL4.Bits.PMFVAL40
#define PMFVAL4_PMFVAL41 _PMFVAL4.Bits.PMFVAL41
#define PMFVAL4_PMFVAL42 _PMFVAL4.Bits.PMFVAL42
#define PMFVAL4_PMFVAL43 _PMFVAL4.Bits.PMFVAL43
#define PMFVAL4_PMFVAL44 _PMFVAL4.Bits.PMFVAL44
#define PMFVAL4_PMFVAL45 _PMFVAL4.Bits.PMFVAL45
#define PMFVAL4_PMFVAL46 _PMFVAL4.Bits.PMFVAL46
#define PMFVAL4_PMFVAL47 _PMFVAL4.Bits.PMFVAL47
#define PMFVAL4_PMFVAL48 _PMFVAL4.Bits.PMFVAL48
#define PMFVAL4_PMFVAL49 _PMFVAL4.Bits.PMFVAL49
#define PMFVAL4_PMFVAL410 _PMFVAL4.Bits.PMFVAL410
#define PMFVAL4_PMFVAL411 _PMFVAL4.Bits.PMFVAL411
#define PMFVAL4_PMFVAL412 _PMFVAL4.Bits.PMFVAL412
#define PMFVAL4_PMFVAL413 _PMFVAL4.Bits.PMFVAL413
#define PMFVAL4_PMFVAL414 _PMFVAL4.Bits.PMFVAL414
#define PMFVAL4_PMFVAL_40 _PMFVAL4.MergedBits.grpPMFVAL_40
#define PMFVAL4_PMFVAL4_10 _PMFVAL4.MergedBits.grpPMFVAL4_10
#define PMFVAL4_PMFVAL PMFVAL4_PMFVAL_40


/*** PMFVAL5 - PMF Value 5 Register; 0x0000021A ***/
typedef union {
  word Word;
  struct {
    word PMFVAL50    :1;                                       /* PMF Value 5, bit 0 */
    word PMFVAL51    :1;                                       /* PMF Value 5, bit 1 */
    word PMFVAL52    :1;                                       /* PMF Value 5, bit 2 */
    word PMFVAL53    :1;                                       /* PMF Value 5, bit 3 */
    word PMFVAL54    :1;                                       /* PMF Value 5, bit 4 */
    word PMFVAL55    :1;                                       /* PMF Value 5, bit 5 */
    word PMFVAL56    :1;                                       /* PMF Value 5, bit 6 */
    word PMFVAL57    :1;                                       /* PMF Value 5, bit 7 */
    word PMFVAL58    :1;                                       /* PMF Value 5, bit 8 */
    word PMFVAL59    :1;                                       /* PMF Value 5, bit 9 */
    word PMFVAL510   :1;                                       /* PMF Value 5, bit 10 */
    word PMFVAL511   :1;                                       /* PMF Value 5, bit 11 */
    word PMFVAL512   :1;                                       /* PMF Value 5, bit 12 */
    word PMFVAL513   :1;                                       /* PMF Value 5, bit 13 */
    word PMFVAL514   :1;                                       /* PMF Value 5, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFVAL_50 :10;
    word grpPMFVAL5_10 :5;
    word         :1;
  } MergedBits;
} PMFVAL5STR;
extern volatile PMFVAL5STR _PMFVAL5 @(REG_BASE + 0x0000021A);
#define PMFVAL5 _PMFVAL5.Word
#define PMFVAL5_PMFVAL50 _PMFVAL5.Bits.PMFVAL50
#define PMFVAL5_PMFVAL51 _PMFVAL5.Bits.PMFVAL51
#define PMFVAL5_PMFVAL52 _PMFVAL5.Bits.PMFVAL52
#define PMFVAL5_PMFVAL53 _PMFVAL5.Bits.PMFVAL53
#define PMFVAL5_PMFVAL54 _PMFVAL5.Bits.PMFVAL54
#define PMFVAL5_PMFVAL55 _PMFVAL5.Bits.PMFVAL55
#define PMFVAL5_PMFVAL56 _PMFVAL5.Bits.PMFVAL56
#define PMFVAL5_PMFVAL57 _PMFVAL5.Bits.PMFVAL57
#define PMFVAL5_PMFVAL58 _PMFVAL5.Bits.PMFVAL58
#define PMFVAL5_PMFVAL59 _PMFVAL5.Bits.PMFVAL59
#define PMFVAL5_PMFVAL510 _PMFVAL5.Bits.PMFVAL510
#define PMFVAL5_PMFVAL511 _PMFVAL5.Bits.PMFVAL511
#define PMFVAL5_PMFVAL512 _PMFVAL5.Bits.PMFVAL512
#define PMFVAL5_PMFVAL513 _PMFVAL5.Bits.PMFVAL513
#define PMFVAL5_PMFVAL514 _PMFVAL5.Bits.PMFVAL514
#define PMFVAL5_PMFVAL_50 _PMFVAL5.MergedBits.grpPMFVAL_50
#define PMFVAL5_PMFVAL5_10 _PMFVAL5.MergedBits.grpPMFVAL5_10
#define PMFVAL5_PMFVAL PMFVAL5_PMFVAL_50


/*** PMFCNTA - PMF Counter A Register; 0x00000222 ***/
typedef union {
  word Word;
  struct {
    word PMFCNTA0    :1;                                       /* PMF Counter A, bit 0 */
    word PMFCNTA1    :1;                                       /* PMF Counter A, bit 1 */
    word PMFCNTA2    :1;                                       /* PMF Counter A, bit 2 */
    word PMFCNTA3    :1;                                       /* PMF Counter A, bit 3 */
    word PMFCNTA4    :1;                                       /* PMF Counter A, bit 4 */
    word PMFCNTA5    :1;                                       /* PMF Counter A, bit 5 */
    word PMFCNTA6    :1;                                       /* PMF Counter A, bit 6 */
    word PMFCNTA7    :1;                                       /* PMF Counter A, bit 7 */
    word PMFCNTA8    :1;                                       /* PMF Counter A, bit 8 */
    word PMFCNTA9    :1;                                       /* PMF Counter A, bit 9 */
    word PMFCNTA10   :1;                                       /* PMF Counter A, bit 10 */
    word PMFCNTA11   :1;                                       /* PMF Counter A, bit 11 */
    word PMFCNTA12   :1;                                       /* PMF Counter A, bit 12 */
    word PMFCNTA13   :1;                                       /* PMF Counter A, bit 13 */
    word PMFCNTA14   :1;                                       /* PMF Counter A, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFCNTA :15;
    word         :1;
  } MergedBits;
} PMFCNTASTR;
extern volatile PMFCNTASTR _PMFCNTA @(REG_BASE + 0x00000222);
#define PMFCNTA _PMFCNTA.Word
#define PMFCNTA_PMFCNTA0 _PMFCNTA.Bits.PMFCNTA0
#define PMFCNTA_PMFCNTA1 _PMFCNTA.Bits.PMFCNTA1
#define PMFCNTA_PMFCNTA2 _PMFCNTA.Bits.PMFCNTA2
#define PMFCNTA_PMFCNTA3 _PMFCNTA.Bits.PMFCNTA3
#define PMFCNTA_PMFCNTA4 _PMFCNTA.Bits.PMFCNTA4
#define PMFCNTA_PMFCNTA5 _PMFCNTA.Bits.PMFCNTA5
#define PMFCNTA_PMFCNTA6 _PMFCNTA.Bits.PMFCNTA6
#define PMFCNTA_PMFCNTA7 _PMFCNTA.Bits.PMFCNTA7
#define PMFCNTA_PMFCNTA8 _PMFCNTA.Bits.PMFCNTA8
#define PMFCNTA_PMFCNTA9 _PMFCNTA.Bits.PMFCNTA9
#define PMFCNTA_PMFCNTA10 _PMFCNTA.Bits.PMFCNTA10
#define PMFCNTA_PMFCNTA11 _PMFCNTA.Bits.PMFCNTA11
#define PMFCNTA_PMFCNTA12 _PMFCNTA.Bits.PMFCNTA12
#define PMFCNTA_PMFCNTA13 _PMFCNTA.Bits.PMFCNTA13
#define PMFCNTA_PMFCNTA14 _PMFCNTA.Bits.PMFCNTA14
#define PMFCNTA_PMFCNTA _PMFCNTA.MergedBits.grpPMFCNTA


/*** PMFMODA - PMF Counter Modulo A Register; 0x00000224 ***/
typedef union {
  word Word;
  struct {
    word PMFMODA0    :1;                                       /* PMF Counter Modulo A, bit 0 */
    word PMFMODA1    :1;                                       /* PMF Counter Modulo A, bit 1 */
    word PMFMODA2    :1;                                       /* PMF Counter Modulo A, bit 2 */
    word PMFMODA3    :1;                                       /* PMF Counter Modulo A, bit 3 */
    word PMFMODA4    :1;                                       /* PMF Counter Modulo A, bit 4 */
    word PMFMODA5    :1;                                       /* PMF Counter Modulo A, bit 5 */
    word PMFMODA6    :1;                                       /* PMF Counter Modulo A, bit 6 */
    word PMFMODA7    :1;                                       /* PMF Counter Modulo A, bit 7 */
    word PMFMODA8    :1;                                       /* PMF Counter Modulo A, bit 8 */
    word PMFMODA9    :1;                                       /* PMF Counter Modulo A, bit 9 */
    word PMFMODA10   :1;                                       /* PMF Counter Modulo A, bit 10 */
    word PMFMODA11   :1;                                       /* PMF Counter Modulo A, bit 11 */
    word PMFMODA12   :1;                                       /* PMF Counter Modulo A, bit 12 */
    word PMFMODA13   :1;                                       /* PMF Counter Modulo A, bit 13 */
    word PMFMODA14   :1;                                       /* PMF Counter Modulo A, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFMODA :15;
    word         :1;
  } MergedBits;
} PMFMODASTR;
extern volatile PMFMODASTR _PMFMODA @(REG_BASE + 0x00000224);
#define PMFMODA _PMFMODA.Word
#define PMFMODA_PMFMODA0 _PMFMODA.Bits.PMFMODA0
#define PMFMODA_PMFMODA1 _PMFMODA.Bits.PMFMODA1
#define PMFMODA_PMFMODA2 _PMFMODA.Bits.PMFMODA2
#define PMFMODA_PMFMODA3 _PMFMODA.Bits.PMFMODA3
#define PMFMODA_PMFMODA4 _PMFMODA.Bits.PMFMODA4
#define PMFMODA_PMFMODA5 _PMFMODA.Bits.PMFMODA5
#define PMFMODA_PMFMODA6 _PMFMODA.Bits.PMFMODA6
#define PMFMODA_PMFMODA7 _PMFMODA.Bits.PMFMODA7
#define PMFMODA_PMFMODA8 _PMFMODA.Bits.PMFMODA8
#define PMFMODA_PMFMODA9 _PMFMODA.Bits.PMFMODA9
#define PMFMODA_PMFMODA10 _PMFMODA.Bits.PMFMODA10
#define PMFMODA_PMFMODA11 _PMFMODA.Bits.PMFMODA11
#define PMFMODA_PMFMODA12 _PMFMODA.Bits.PMFMODA12
#define PMFMODA_PMFMODA13 _PMFMODA.Bits.PMFMODA13
#define PMFMODA_PMFMODA14 _PMFMODA.Bits.PMFMODA14
#define PMFMODA_PMFMODA _PMFMODA.MergedBits.grpPMFMODA


/*** PMFDTMA - PMF Deadtime A Register; 0x00000226 ***/
typedef union {
  word Word;
  struct {
    word PMFDTMA0    :1;                                       /* PMF Deadtime A, bit 0 */
    word PMFDTMA1    :1;                                       /* PMF Deadtime A, bit 1 */
    word PMFDTMA2    :1;                                       /* PMF Deadtime A, bit 2 */
    word PMFDTMA3    :1;                                       /* PMF Deadtime A, bit 3 */
    word PMFDTMA4    :1;                                       /* PMF Deadtime A, bit 4 */
    word PMFDTMA5    :1;                                       /* PMF Deadtime A, bit 5 */
    word PMFDTMA6    :1;                                       /* PMF Deadtime A, bit 6 */
    word PMFDTMA7    :1;                                       /* PMF Deadtime A, bit 7 */
    word PMFDTMA8    :1;                                       /* PMF Deadtime A, bit 8 */
    word PMFDTMA9    :1;                                       /* PMF Deadtime A, bit 9 */
    word PMFDTMA10   :1;                                       /* PMF Deadtime A, bit 10 */
    word PMFDTMA11   :1;                                       /* PMF Deadtime A, bit 11 */
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
  } Bits;
  struct {
    word grpPMFDTMA :12;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
  } MergedBits;
} PMFDTMASTR;
extern volatile PMFDTMASTR _PMFDTMA @(REG_BASE + 0x00000226);
#define PMFDTMA _PMFDTMA.Word
#define PMFDTMA_PMFDTMA0 _PMFDTMA.Bits.PMFDTMA0
#define PMFDTMA_PMFDTMA1 _PMFDTMA.Bits.PMFDTMA1
#define PMFDTMA_PMFDTMA2 _PMFDTMA.Bits.PMFDTMA2
#define PMFDTMA_PMFDTMA3 _PMFDTMA.Bits.PMFDTMA3
#define PMFDTMA_PMFDTMA4 _PMFDTMA.Bits.PMFDTMA4
#define PMFDTMA_PMFDTMA5 _PMFDTMA.Bits.PMFDTMA5
#define PMFDTMA_PMFDTMA6 _PMFDTMA.Bits.PMFDTMA6
#define PMFDTMA_PMFDTMA7 _PMFDTMA.Bits.PMFDTMA7
#define PMFDTMA_PMFDTMA8 _PMFDTMA.Bits.PMFDTMA8
#define PMFDTMA_PMFDTMA9 _PMFDTMA.Bits.PMFDTMA9
#define PMFDTMA_PMFDTMA10 _PMFDTMA.Bits.PMFDTMA10
#define PMFDTMA_PMFDTMA11 _PMFDTMA.Bits.PMFDTMA11
#define PMFDTMA_PMFDTMA _PMFDTMA.MergedBits.grpPMFDTMA


/*** PMFCNTB - PMF Counter B Register; 0x0000022A ***/
typedef union {
  word Word;
  struct {
    word PMFCNTB0    :1;                                       /* PMF Counter B, bit 0 */
    word PMFCNTB1    :1;                                       /* PMF Counter B, bit 1 */
    word PMFCNTB2    :1;                                       /* PMF Counter B, bit 2 */
    word PMFCNTB3    :1;                                       /* PMF Counter B, bit 3 */
    word PMFCNTB4    :1;                                       /* PMF Counter B, bit 4 */
    word PMFCNTB5    :1;                                       /* PMF Counter B, bit 5 */
    word PMFCNTB6    :1;                                       /* PMF Counter B, bit 6 */
    word PMFCNTB7    :1;                                       /* PMF Counter B, bit 7 */
    word PMFCNTB8    :1;                                       /* PMF Counter B, bit 8 */
    word PMFCNTB9    :1;                                       /* PMF Counter B, bit 9 */
    word PMFCNTB10   :1;                                       /* PMF Counter B, bit 10 */
    word PMFCNTB11   :1;                                       /* PMF Counter B, bit 11 */
    word PMFCNTB12   :1;                                       /* PMF Counter B, bit 12 */
    word PMFCNTB13   :1;                                       /* PMF Counter B, bit 13 */
    word PMFCNTB14   :1;                                       /* PMF Counter B, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFCNTB :15;
    word         :1;
  } MergedBits;
} PMFCNTBSTR;
extern volatile PMFCNTBSTR _PMFCNTB @(REG_BASE + 0x0000022A);
#define PMFCNTB _PMFCNTB.Word
#define PMFCNTB_PMFCNTB0 _PMFCNTB.Bits.PMFCNTB0
#define PMFCNTB_PMFCNTB1 _PMFCNTB.Bits.PMFCNTB1
#define PMFCNTB_PMFCNTB2 _PMFCNTB.Bits.PMFCNTB2
#define PMFCNTB_PMFCNTB3 _PMFCNTB.Bits.PMFCNTB3
#define PMFCNTB_PMFCNTB4 _PMFCNTB.Bits.PMFCNTB4
#define PMFCNTB_PMFCNTB5 _PMFCNTB.Bits.PMFCNTB5
#define PMFCNTB_PMFCNTB6 _PMFCNTB.Bits.PMFCNTB6
#define PMFCNTB_PMFCNTB7 _PMFCNTB.Bits.PMFCNTB7
#define PMFCNTB_PMFCNTB8 _PMFCNTB.Bits.PMFCNTB8
#define PMFCNTB_PMFCNTB9 _PMFCNTB.Bits.PMFCNTB9
#define PMFCNTB_PMFCNTB10 _PMFCNTB.Bits.PMFCNTB10
#define PMFCNTB_PMFCNTB11 _PMFCNTB.Bits.PMFCNTB11
#define PMFCNTB_PMFCNTB12 _PMFCNTB.Bits.PMFCNTB12
#define PMFCNTB_PMFCNTB13 _PMFCNTB.Bits.PMFCNTB13
#define PMFCNTB_PMFCNTB14 _PMFCNTB.Bits.PMFCNTB14
#define PMFCNTB_PMFCNTB _PMFCNTB.MergedBits.grpPMFCNTB


/*** PMFMODB - PMF Counter Modulo B Register; 0x0000022C ***/
typedef union {
  word Word;
  struct {
    word PMFMODB0    :1;                                       /* PMF Counter Modulo B, bit 0 */
    word PMFMODB1    :1;                                       /* PMF Counter Modulo B, bit 1 */
    word PMFMODB2    :1;                                       /* PMF Counter Modulo B, bit 2 */
    word PMFMODB3    :1;                                       /* PMF Counter Modulo B, bit 3 */
    word PMFMODB4    :1;                                       /* PMF Counter Modulo B, bit 4 */
    word PMFMODB5    :1;                                       /* PMF Counter Modulo B, bit 5 */
    word PMFMODB6    :1;                                       /* PMF Counter Modulo B, bit 6 */
    word PMFMODB7    :1;                                       /* PMF Counter Modulo B, bit 7 */
    word PMFMODB8    :1;                                       /* PMF Counter Modulo B, bit 8 */
    word PMFMODB9    :1;                                       /* PMF Counter Modulo B, bit 9 */
    word PMFMODB10   :1;                                       /* PMF Counter Modulo B, bit 10 */
    word PMFMODB11   :1;                                       /* PMF Counter Modulo B, bit 11 */
    word PMFMODB12   :1;                                       /* PMF Counter Modulo B, bit 12 */
    word PMFMODB13   :1;                                       /* PMF Counter Modulo B, bit 13 */
    word PMFMODB14   :1;                                       /* PMF Counter Modulo B, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFMODB :15;
    word         :1;
  } MergedBits;
} PMFMODBSTR;
extern volatile PMFMODBSTR _PMFMODB @(REG_BASE + 0x0000022C);
#define PMFMODB _PMFMODB.Word
#define PMFMODB_PMFMODB0 _PMFMODB.Bits.PMFMODB0
#define PMFMODB_PMFMODB1 _PMFMODB.Bits.PMFMODB1
#define PMFMODB_PMFMODB2 _PMFMODB.Bits.PMFMODB2
#define PMFMODB_PMFMODB3 _PMFMODB.Bits.PMFMODB3
#define PMFMODB_PMFMODB4 _PMFMODB.Bits.PMFMODB4
#define PMFMODB_PMFMODB5 _PMFMODB.Bits.PMFMODB5
#define PMFMODB_PMFMODB6 _PMFMODB.Bits.PMFMODB6
#define PMFMODB_PMFMODB7 _PMFMODB.Bits.PMFMODB7
#define PMFMODB_PMFMODB8 _PMFMODB.Bits.PMFMODB8
#define PMFMODB_PMFMODB9 _PMFMODB.Bits.PMFMODB9
#define PMFMODB_PMFMODB10 _PMFMODB.Bits.PMFMODB10
#define PMFMODB_PMFMODB11 _PMFMODB.Bits.PMFMODB11
#define PMFMODB_PMFMODB12 _PMFMODB.Bits.PMFMODB12
#define PMFMODB_PMFMODB13 _PMFMODB.Bits.PMFMODB13
#define PMFMODB_PMFMODB14 _PMFMODB.Bits.PMFMODB14
#define PMFMODB_PMFMODB _PMFMODB.MergedBits.grpPMFMODB


/*** PMFDTMB - PMF Deadtime B Register; 0x0000022E ***/
typedef union {
  word Word;
  struct {
    word PMFDTMB0    :1;                                       /* PMF Deadtime B, bit 0 */
    word PMFDTMB1    :1;                                       /* PMF Deadtime B, bit 1 */
    word PMFDTMB2    :1;                                       /* PMF Deadtime B, bit 2 */
    word PMFDTMB3    :1;                                       /* PMF Deadtime B, bit 3 */
    word PMFDTMB4    :1;                                       /* PMF Deadtime B, bit 4 */
    word PMFDTMB5    :1;                                       /* PMF Deadtime B, bit 5 */
    word PMFDTMB6    :1;                                       /* PMF Deadtime B, bit 6 */
    word PMFDTMB7    :1;                                       /* PMF Deadtime B, bit 7 */
    word PMFDTMB8    :1;                                       /* PMF Deadtime B, bit 8 */
    word PMFDTMB9    :1;                                       /* PMF Deadtime B, bit 9 */
    word PMFDTMB10   :1;                                       /* PMF Deadtime B, bit 10 */
    word PMFDTMB11   :1;                                       /* PMF Deadtime B, bit 11 */
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
  } Bits;
  struct {
    word grpPMFDTMB :12;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
  } MergedBits;
} PMFDTMBSTR;
extern volatile PMFDTMBSTR _PMFDTMB @(REG_BASE + 0x0000022E);
#define PMFDTMB _PMFDTMB.Word
#define PMFDTMB_PMFDTMB0 _PMFDTMB.Bits.PMFDTMB0
#define PMFDTMB_PMFDTMB1 _PMFDTMB.Bits.PMFDTMB1
#define PMFDTMB_PMFDTMB2 _PMFDTMB.Bits.PMFDTMB2
#define PMFDTMB_PMFDTMB3 _PMFDTMB.Bits.PMFDTMB3
#define PMFDTMB_PMFDTMB4 _PMFDTMB.Bits.PMFDTMB4
#define PMFDTMB_PMFDTMB5 _PMFDTMB.Bits.PMFDTMB5
#define PMFDTMB_PMFDTMB6 _PMFDTMB.Bits.PMFDTMB6
#define PMFDTMB_PMFDTMB7 _PMFDTMB.Bits.PMFDTMB7
#define PMFDTMB_PMFDTMB8 _PMFDTMB.Bits.PMFDTMB8
#define PMFDTMB_PMFDTMB9 _PMFDTMB.Bits.PMFDTMB9
#define PMFDTMB_PMFDTMB10 _PMFDTMB.Bits.PMFDTMB10
#define PMFDTMB_PMFDTMB11 _PMFDTMB.Bits.PMFDTMB11
#define PMFDTMB_PMFDTMB _PMFDTMB.MergedBits.grpPMFDTMB


/*** PMFCNTC - PMF Counter C Register; 0x00000232 ***/
typedef union {
  word Word;
  struct {
    word PMFCNTC0    :1;                                       /* PMF Counter C, bit 0 */
    word PMFCNTC1    :1;                                       /* PMF Counter C, bit 1 */
    word PMFCNTC2    :1;                                       /* PMF Counter C, bit 2 */
    word PMFCNTC3    :1;                                       /* PMF Counter C, bit 3 */
    word PMFCNTC4    :1;                                       /* PMF Counter C, bit 4 */
    word PMFCNTC5    :1;                                       /* PMF Counter C, bit 5 */
    word PMFCNTC6    :1;                                       /* PMF Counter C, bit 6 */
    word PMFCNTC7    :1;                                       /* PMF Counter C, bit 7 */
    word PMFCNTC8    :1;                                       /* PMF Counter C, bit 8 */
    word PMFCNTC9    :1;                                       /* PMF Counter C, bit 9 */
    word PMFCNTC10   :1;                                       /* PMF Counter C, bit 10 */
    word PMFCNTC11   :1;                                       /* PMF Counter C, bit 11 */
    word PMFCNTC12   :1;                                       /* PMF Counter C, bit 12 */
    word PMFCNTC13   :1;                                       /* PMF Counter C, bit 13 */
    word PMFCNTC14   :1;                                       /* PMF Counter C, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFCNTC :15;
    word         :1;
  } MergedBits;
} PMFCNTCSTR;
extern volatile PMFCNTCSTR _PMFCNTC @(REG_BASE + 0x00000232);
#define PMFCNTC _PMFCNTC.Word
#define PMFCNTC_PMFCNTC0 _PMFCNTC.Bits.PMFCNTC0
#define PMFCNTC_PMFCNTC1 _PMFCNTC.Bits.PMFCNTC1
#define PMFCNTC_PMFCNTC2 _PMFCNTC.Bits.PMFCNTC2
#define PMFCNTC_PMFCNTC3 _PMFCNTC.Bits.PMFCNTC3
#define PMFCNTC_PMFCNTC4 _PMFCNTC.Bits.PMFCNTC4
#define PMFCNTC_PMFCNTC5 _PMFCNTC.Bits.PMFCNTC5
#define PMFCNTC_PMFCNTC6 _PMFCNTC.Bits.PMFCNTC6
#define PMFCNTC_PMFCNTC7 _PMFCNTC.Bits.PMFCNTC7
#define PMFCNTC_PMFCNTC8 _PMFCNTC.Bits.PMFCNTC8
#define PMFCNTC_PMFCNTC9 _PMFCNTC.Bits.PMFCNTC9
#define PMFCNTC_PMFCNTC10 _PMFCNTC.Bits.PMFCNTC10
#define PMFCNTC_PMFCNTC11 _PMFCNTC.Bits.PMFCNTC11
#define PMFCNTC_PMFCNTC12 _PMFCNTC.Bits.PMFCNTC12
#define PMFCNTC_PMFCNTC13 _PMFCNTC.Bits.PMFCNTC13
#define PMFCNTC_PMFCNTC14 _PMFCNTC.Bits.PMFCNTC14
#define PMFCNTC_PMFCNTC _PMFCNTC.MergedBits.grpPMFCNTC


/*** PMFMODC - PMF Counter Modulo C Register; 0x00000234 ***/
typedef union {
  word Word;
  struct {
    word PMFMODC0    :1;                                       /* PMF Counter Modulo C, bit 0 */
    word PMFMODC1    :1;                                       /* PMF Counter Modulo C, bit 1 */
    word PMFMODC2    :1;                                       /* PMF Counter Modulo C, bit 2 */
    word PMFMODC3    :1;                                       /* PMF Counter Modulo C, bit 3 */
    word PMFMODC4    :1;                                       /* PMF Counter Modulo C, bit 4 */
    word PMFMODC5    :1;                                       /* PMF Counter Modulo C, bit 5 */
    word PMFMODC6    :1;                                       /* PMF Counter Modulo C, bit 6 */
    word PMFMODC7    :1;                                       /* PMF Counter Modulo C, bit 7 */
    word PMFMODC8    :1;                                       /* PMF Counter Modulo C, bit 8 */
    word PMFMODC9    :1;                                       /* PMF Counter Modulo C, bit 9 */
    word PMFMODC10   :1;                                       /* PMF Counter Modulo C, bit 10 */
    word PMFMODC11   :1;                                       /* PMF Counter Modulo C, bit 11 */
    word PMFMODC12   :1;                                       /* PMF Counter Modulo C, bit 12 */
    word PMFMODC13   :1;                                       /* PMF Counter Modulo C, bit 13 */
    word PMFMODC14   :1;                                       /* PMF Counter Modulo C, bit 14 */
    word             :1; 
  } Bits;
  struct {
    word grpPMFMODC :15;
    word         :1;
  } MergedBits;
} PMFMODCSTR;
extern volatile PMFMODCSTR _PMFMODC @(REG_BASE + 0x00000234);
#define PMFMODC _PMFMODC.Word
#define PMFMODC_PMFMODC0 _PMFMODC.Bits.PMFMODC0
#define PMFMODC_PMFMODC1 _PMFMODC.Bits.PMFMODC1
#define PMFMODC_PMFMODC2 _PMFMODC.Bits.PMFMODC2
#define PMFMODC_PMFMODC3 _PMFMODC.Bits.PMFMODC3
#define PMFMODC_PMFMODC4 _PMFMODC.Bits.PMFMODC4
#define PMFMODC_PMFMODC5 _PMFMODC.Bits.PMFMODC5
#define PMFMODC_PMFMODC6 _PMFMODC.Bits.PMFMODC6
#define PMFMODC_PMFMODC7 _PMFMODC.Bits.PMFMODC7
#define PMFMODC_PMFMODC8 _PMFMODC.Bits.PMFMODC8
#define PMFMODC_PMFMODC9 _PMFMODC.Bits.PMFMODC9
#define PMFMODC_PMFMODC10 _PMFMODC.Bits.PMFMODC10
#define PMFMODC_PMFMODC11 _PMFMODC.Bits.PMFMODC11
#define PMFMODC_PMFMODC12 _PMFMODC.Bits.PMFMODC12
#define PMFMODC_PMFMODC13 _PMFMODC.Bits.PMFMODC13
#define PMFMODC_PMFMODC14 _PMFMODC.Bits.PMFMODC14
#define PMFMODC_PMFMODC _PMFMODC.MergedBits.grpPMFMODC


/*** PMFDTMC - PMF Deadtime C Register; 0x00000236 ***/
typedef union {
  word Word;
  struct {
    word PMFDTMC0    :1;                                       /* PMF Deadtime C, bit 0 */
    word PMFDTMC1    :1;                                       /* PMF Deadtime C, bit 1 */
    word PMFDTMC2    :1;                                       /* PMF Deadtime C, bit 2 */
    word PMFDTMC3    :1;                                       /* PMF Deadtime C, bit 3 */
    word PMFDTMC4    :1;                                       /* PMF Deadtime C, bit 4 */
    word PMFDTMC5    :1;                                       /* PMF Deadtime C, bit 5 */
    word PMFDTMC6    :1;                                       /* PMF Deadtime C, bit 6 */
    word PMFDTMC7    :1;                                       /* PMF Deadtime C, bit 7 */
    word PMFDTMC8    :1;                                       /* PMF Deadtime C, bit 8 */
    word PMFDTMC9    :1;                                       /* PMF Deadtime C, bit 9 */
    word PMFDTMC10   :1;                                       /* PMF Deadtime C, bit 10 */
    word PMFDTMC11   :1;                                       /* PMF Deadtime C, bit 11 */
    word             :1; 
    word             :1; 
    word             :1; 
    word             :1; 
  } Bits;
  struct {
    word grpPMFDTMC :12;
    word         :1;
    word         :1;
    word         :1;
    word         :1;
  } MergedBits;
} PMFDTMCSTR;
extern volatile PMFDTMCSTR _PMFDTMC @(REG_BASE + 0x00000236);
#define PMFDTMC _PMFDTMC.Word
#define PMFDTMC_PMFDTMC0 _PMFDTMC.Bits.PMFDTMC0
#define PMFDTMC_PMFDTMC1 _PMFDTMC.Bits.PMFDTMC1
#define PMFDTMC_PMFDTMC2 _PMFDTMC.Bits.PMFDTMC2
#define PMFDTMC_PMFDTMC3 _PMFDTMC.Bits.PMFDTMC3
#define PMFDTMC_PMFDTMC4 _PMFDTMC.Bits.PMFDTMC4
#define PMFDTMC_PMFDTMC5 _PMFDTMC.Bits.PMFDTMC5
#define PMFDTMC_PMFDTMC6 _PMFDTMC.Bits.PMFDTMC6
#define PMFDTMC_PMFDTMC7 _PMFDTMC.Bits.PMFDTMC7
#define PMFDTMC_PMFDTMC8 _PMFDTMC.Bits.PMFDTMC8
#define PMFDTMC_PMFDTMC9 _PMFDTMC.Bits.PMFDTMC9
#define PMFDTMC_PMFDTMC10 _PMFDTMC.Bits.PMFDTMC10
#define PMFDTMC_PMFDTMC11 _PMFDTMC.Bits.PMFDTMC11
#define PMFDTMC_PMFDTMC _PMFDTMC.MergedBits.grpPMFDTMC


/*** PTAD - Port AD I/O Register; 0x00000270 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PTADLo - Port AD I/O Register Low; 0x00000270 ***/
    union {
      byte Byte;
      struct {
        byte PTAD0       :1;                                       /* Port AD Bit 0 */
        byte PTAD1       :1;                                       /* Port AD Bit 1 */
        byte PTAD2       :1;                                       /* Port AD Bit 2 */
        byte PTAD3       :1;                                       /* Port AD Bit 3 */
        byte PTAD4       :1;                                       /* Port AD Bit 4 */
        byte PTAD5       :1;                                       /* Port AD Bit 5 */
        byte PTAD6       :1;                                       /* Port AD Bit 6 */
        byte PTAD7       :1;                                       /* Port AD Bit 7 */
      } Bits;
      struct {
        byte grpPTAD :8;
      } MergedBits;
    } PTADLoSTR;
    #define PTADLo _PTAD.Overlap_STR.PTADLoSTR.Byte
    #define PTADLo_PTAD0 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD0
    #define PTADLo_PTAD1 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD1
    #define PTADLo_PTAD2 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD2
    #define PTADLo_PTAD3 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD3
    #define PTADLo_PTAD4 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD4
    #define PTADLo_PTAD5 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD5
    #define PTADLo_PTAD6 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD6
    #define PTADLo_PTAD7 _PTAD.Overlap_STR.PTADLoSTR.Bits.PTAD7
    #define PTADLo_PTAD _PTAD.Overlap_STR.PTADLoSTR.MergedBits.grpPTAD
    
    /*** PTADHi - Port AD I/O Register High; 0x00000271 ***/
    union {
      byte Byte;
      struct {
        byte PTAD8       :1;                                       /* Port AD Bit 8 */
        byte PTAD9       :1;                                       /* Port AD Bit 9 */
        byte PTAD10      :1;                                       /* Port AD Bit 10 */
        byte PTAD11      :1;                                       /* Port AD Bit 11 */
        byte PTAD12      :1;                                       /* Port AD Bit 12 */
        byte PTAD13      :1;                                       /* Port AD Bit 13 */
        byte PTAD14      :1;                                       /* Port AD Bit 14 */
        byte PTAD15      :1;                                       /* Port AD Bit 15 */
      } Bits;
      struct {
        byte grpPTAD_8 :8;
      } MergedBits;
    } PTADHiSTR;
    #define PTADHi _PTAD.Overlap_STR.PTADHiSTR.Byte
    #define PTADHi_PTAD8 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD8
    #define PTADHi_PTAD9 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD9
    #define PTADHi_PTAD10 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD10
    #define PTADHi_PTAD11 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD11
    #define PTADHi_PTAD12 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD12
    #define PTADHi_PTAD13 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD13
    #define PTADHi_PTAD14 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD14
    #define PTADHi_PTAD15 _PTAD.Overlap_STR.PTADHiSTR.Bits.PTAD15
    #define PTADHi_PTAD_8 _PTAD.Overlap_STR.PTADHiSTR.MergedBits.grpPTAD_8
    #define PTADHi_PTAD PTADHi_PTAD_8
    
  } Overlap_STR;

  struct {
    word PTAD0       :1;                                       /* Port AD Bit 0 */
    word PTAD1       :1;                                       /* Port AD Bit 1 */
    word PTAD2       :1;                                       /* Port AD Bit 2 */
    word PTAD3       :1;                                       /* Port AD Bit 3 */
    word PTAD4       :1;                                       /* Port AD Bit 4 */
    word PTAD5       :1;                                       /* Port AD Bit 5 */
    word PTAD6       :1;                                       /* Port AD Bit 6 */
    word PTAD7       :1;                                       /* Port AD Bit 7 */
    word PTAD8       :1;                                       /* Port AD Bit 8 */
    word PTAD9       :1;                                       /* Port AD Bit 9 */
    word PTAD10      :1;                                       /* Port AD Bit 10 */
    word PTAD11      :1;                                       /* Port AD Bit 11 */
    word PTAD12      :1;                                       /* Port AD Bit 12 */
    word PTAD13      :1;                                       /* Port AD Bit 13 */
    word PTAD14      :1;                                       /* Port AD Bit 14 */
    word PTAD15      :1;                                       /* Port AD Bit 15 */
  } Bits;
  struct {
    word grpPTAD :16;
  } MergedBits;
} PTADSTR;
extern volatile PTADSTR _PTAD @(REG_BASE + 0x00000270);
#define PTAD _PTAD.Word
#define PTAD_PTAD0 _PTAD.Bits.PTAD0
#define PTAD_PTAD1 _PTAD.Bits.PTAD1
#define PTAD_PTAD2 _PTAD.Bits.PTAD2
#define PTAD_PTAD3 _PTAD.Bits.PTAD3
#define PTAD_PTAD4 _PTAD.Bits.PTAD4
#define PTAD_PTAD5 _PTAD.Bits.PTAD5
#define PTAD_PTAD6 _PTAD.Bits.PTAD6
#define PTAD_PTAD7 _PTAD.Bits.PTAD7
#define PTAD_PTAD8 _PTAD.Bits.PTAD8
#define PTAD_PTAD9 _PTAD.Bits.PTAD9
#define PTAD_PTAD10 _PTAD.Bits.PTAD10
#define PTAD_PTAD11 _PTAD.Bits.PTAD11
#define PTAD_PTAD12 _PTAD.Bits.PTAD12
#define PTAD_PTAD13 _PTAD.Bits.PTAD13
#define PTAD_PTAD14 _PTAD.Bits.PTAD14
#define PTAD_PTAD15 _PTAD.Bits.PTAD15
#define PTAD_PTAD _PTAD.MergedBits.grpPTAD


/*** PTIAD - Port AD Input Register; 0x00000272 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PTIADLo - Port AD Input Register Low; 0x00000272 ***/
    union {
      byte Byte;
      struct {
        byte PTIAD0      :1;                                       /* Port AD Bit 0 */
        byte PTIAD1      :1;                                       /* Port AD Bit 1 */
        byte PTIAD2      :1;                                       /* Port AD Bit 2 */
        byte PTIAD3      :1;                                       /* Port AD Bit 3 */
        byte PTIAD4      :1;                                       /* Port AD Bit 4 */
        byte PTIAD5      :1;                                       /* Port AD Bit 5 */
        byte PTIAD6      :1;                                       /* Port AD Bit 6 */
        byte PTIAD7      :1;                                       /* Port AD Bit 7 */
      } Bits;
      struct {
        byte grpPTIAD :8;
      } MergedBits;
    } PTIADLoSTR;
    #define PTIADLo _PTIAD.Overlap_STR.PTIADLoSTR.Byte
    #define PTIADLo_PTIAD0 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD0
    #define PTIADLo_PTIAD1 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD1
    #define PTIADLo_PTIAD2 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD2
    #define PTIADLo_PTIAD3 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD3
    #define PTIADLo_PTIAD4 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD4
    #define PTIADLo_PTIAD5 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD5
    #define PTIADLo_PTIAD6 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD6
    #define PTIADLo_PTIAD7 _PTIAD.Overlap_STR.PTIADLoSTR.Bits.PTIAD7
    #define PTIADLo_PTIAD _PTIAD.Overlap_STR.PTIADLoSTR.MergedBits.grpPTIAD
    
    /*** PTIADHi - Port AD Input Register High; 0x00000273 ***/
    union {
      byte Byte;
      struct {
        byte PTIAD8      :1;                                       /* Port AD Bit 8 */
        byte PTIAD9      :1;                                       /* Port AD Bit 9 */
        byte PTIAD10     :1;                                       /* Port AD Bit 10 */
        byte PTIAD11     :1;                                       /* Port AD Bit 11 */
        byte PTIAD12     :1;                                       /* Port AD Bit 12 */
        byte PTIAD13     :1;                                       /* Port AD Bit 13 */
        byte PTIAD14     :1;                                       /* Port AD Bit 14 */
        byte PTIAD15     :1;                                       /* Port AD Bit 15 */
      } Bits;
      struct {
        byte grpPTIAD_8 :8;
      } MergedBits;
    } PTIADHiSTR;
    #define PTIADHi _PTIAD.Overlap_STR.PTIADHiSTR.Byte
    #define PTIADHi_PTIAD8 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD8
    #define PTIADHi_PTIAD9 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD9
    #define PTIADHi_PTIAD10 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD10
    #define PTIADHi_PTIAD11 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD11
    #define PTIADHi_PTIAD12 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD12
    #define PTIADHi_PTIAD13 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD13
    #define PTIADHi_PTIAD14 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD14
    #define PTIADHi_PTIAD15 _PTIAD.Overlap_STR.PTIADHiSTR.Bits.PTIAD15
    #define PTIADHi_PTIAD_8 _PTIAD.Overlap_STR.PTIADHiSTR.MergedBits.grpPTIAD_8
    #define PTIADHi_PTIAD PTIADHi_PTIAD_8
    
  } Overlap_STR;

  struct {
    word PTIAD0      :1;                                       /* Port AD Bit 0 */
    word PTIAD1      :1;                                       /* Port AD Bit 1 */
    word PTIAD2      :1;                                       /* Port AD Bit 2 */
    word PTIAD3      :1;                                       /* Port AD Bit 3 */
    word PTIAD4      :1;                                       /* Port AD Bit 4 */
    word PTIAD5      :1;                                       /* Port AD Bit 5 */
    word PTIAD6      :1;                                       /* Port AD Bit 6 */
    word PTIAD7      :1;                                       /* Port AD Bit 7 */
    word PTIAD8      :1;                                       /* Port AD Bit 8 */
    word PTIAD9      :1;                                       /* Port AD Bit 9 */
    word PTIAD10     :1;                                       /* Port AD Bit 10 */
    word PTIAD11     :1;                                       /* Port AD Bit 11 */
    word PTIAD12     :1;                                       /* Port AD Bit 12 */
    word PTIAD13     :1;                                       /* Port AD Bit 13 */
    word PTIAD14     :1;                                       /* Port AD Bit 14 */
    word PTIAD15     :1;                                       /* Port AD Bit 15 */
  } Bits;
  struct {
    word grpPTIAD :16;
  } MergedBits;
} PTIADSTR;
extern volatile PTIADSTR _PTIAD @(REG_BASE + 0x00000272);
#define PTIAD _PTIAD.Word
#define PTIAD_PTIAD0 _PTIAD.Bits.PTIAD0
#define PTIAD_PTIAD1 _PTIAD.Bits.PTIAD1
#define PTIAD_PTIAD2 _PTIAD.Bits.PTIAD2
#define PTIAD_PTIAD3 _PTIAD.Bits.PTIAD3
#define PTIAD_PTIAD4 _PTIAD.Bits.PTIAD4
#define PTIAD_PTIAD5 _PTIAD.Bits.PTIAD5
#define PTIAD_PTIAD6 _PTIAD.Bits.PTIAD6
#define PTIAD_PTIAD7 _PTIAD.Bits.PTIAD7
#define PTIAD_PTIAD8 _PTIAD.Bits.PTIAD8
#define PTIAD_PTIAD9 _PTIAD.Bits.PTIAD9
#define PTIAD_PTIAD10 _PTIAD.Bits.PTIAD10
#define PTIAD_PTIAD11 _PTIAD.Bits.PTIAD11
#define PTIAD_PTIAD12 _PTIAD.Bits.PTIAD12
#define PTIAD_PTIAD13 _PTIAD.Bits.PTIAD13
#define PTIAD_PTIAD14 _PTIAD.Bits.PTIAD14
#define PTIAD_PTIAD15 _PTIAD.Bits.PTIAD15
#define PTIAD_PTIAD _PTIAD.MergedBits.grpPTIAD


/*** DDRAD - Port AD Data Direction Register; 0x00000274 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** DDRADLo - Port AD Data Direction Register Low; 0x00000274 ***/
    union {
      byte Byte;
      struct {
        byte DDRAD0      :1;                                       /* Port AD Data Direction Bit 0 */
        byte DDRAD1      :1;                                       /* Port AD Data Direction Bit 1 */
        byte DDRAD2      :1;                                       /* Port AD Data Direction Bit 2 */
        byte DDRAD3      :1;                                       /* Port AD Data Direction Bit 3 */
        byte DDRAD4      :1;                                       /* Port AD Data Direction Bit 4 */
        byte DDRAD5      :1;                                       /* Port AD Data Direction Bit 5 */
        byte DDRAD6      :1;                                       /* Port AD Data Direction Bit 6 */
        byte DDRAD7      :1;                                       /* Port AD Data Direction Bit 7 */
      } Bits;
      struct {
        byte grpDDRAD :8;
      } MergedBits;
    } DDRADLoSTR;
    #define DDRADLo _DDRAD.Overlap_STR.DDRADLoSTR.Byte
    #define DDRADLo_DDRAD0 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD0
    #define DDRADLo_DDRAD1 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD1
    #define DDRADLo_DDRAD2 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD2
    #define DDRADLo_DDRAD3 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD3
    #define DDRADLo_DDRAD4 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD4
    #define DDRADLo_DDRAD5 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD5
    #define DDRADLo_DDRAD6 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD6
    #define DDRADLo_DDRAD7 _DDRAD.Overlap_STR.DDRADLoSTR.Bits.DDRAD7
    #define DDRADLo_DDRAD _DDRAD.Overlap_STR.DDRADLoSTR.MergedBits.grpDDRAD
    
    /*** DDRADHi - Port AD Data Direction Register High; 0x00000275 ***/
    union {
      byte Byte;
      struct {
        byte DDRAD8      :1;                                       /* Port AD Data Direction Bit 8 */
        byte DDRAD9      :1;                                       /* Port AD Data Direction Bit 9 */
        byte DDRAD10     :1;                                       /* Port AD Data Direction Bit 10 */
        byte DDRAD11     :1;                                       /* Port AD Data Direction Bit 11 */
        byte DDRAD12     :1;                                       /* Port AD Data Direction Bit 12 */
        byte DDRAD13     :1;                                       /* Port AD Data Direction Bit 13 */
        byte DDRAD14     :1;                                       /* Port AD Data Direction Bit 14 */
        byte DDRAD15     :1;                                       /* Port AD Data Direction Bit 15 */
      } Bits;
      struct {
        byte grpDDRAD_8 :8;
      } MergedBits;
    } DDRADHiSTR;
    #define DDRADHi _DDRAD.Overlap_STR.DDRADHiSTR.Byte
    #define DDRADHi_DDRAD8 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD8
    #define DDRADHi_DDRAD9 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD9
    #define DDRADHi_DDRAD10 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD10
    #define DDRADHi_DDRAD11 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD11
    #define DDRADHi_DDRAD12 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD12
    #define DDRADHi_DDRAD13 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD13
    #define DDRADHi_DDRAD14 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD14
    #define DDRADHi_DDRAD15 _DDRAD.Overlap_STR.DDRADHiSTR.Bits.DDRAD15
    #define DDRADHi_DDRAD_8 _DDRAD.Overlap_STR.DDRADHiSTR.MergedBits.grpDDRAD_8
    #define DDRADHi_DDRAD DDRADHi_DDRAD_8
    
  } Overlap_STR;

  struct {
    word DDRAD0      :1;                                       /* Port AD Data Direction Bit 0 */
    word DDRAD1      :1;                                       /* Port AD Data Direction Bit 1 */
    word DDRAD2      :1;                                       /* Port AD Data Direction Bit 2 */
    word DDRAD3      :1;                                       /* Port AD Data Direction Bit 3 */
    word DDRAD4      :1;                                       /* Port AD Data Direction Bit 4 */
    word DDRAD5      :1;                                       /* Port AD Data Direction Bit 5 */
    word DDRAD6      :1;                                       /* Port AD Data Direction Bit 6 */
    word DDRAD7      :1;                                       /* Port AD Data Direction Bit 7 */
    word DDRAD8      :1;                                       /* Port AD Data Direction Bit 8 */
    word DDRAD9      :1;                                       /* Port AD Data Direction Bit 9 */
    word DDRAD10     :1;                                       /* Port AD Data Direction Bit 10 */
    word DDRAD11     :1;                                       /* Port AD Data Direction Bit 11 */
    word DDRAD12     :1;                                       /* Port AD Data Direction Bit 12 */
    word DDRAD13     :1;                                       /* Port AD Data Direction Bit 13 */
    word DDRAD14     :1;                                       /* Port AD Data Direction Bit 14 */
    word DDRAD15     :1;                                       /* Port AD Data Direction Bit 15 */
  } Bits;
  struct {
    word grpDDRAD :16;
  } MergedBits;
} DDRADSTR;
extern volatile DDRADSTR _DDRAD @(REG_BASE + 0x00000274);
#define DDRAD _DDRAD.Word
#define DDRAD_DDRAD0 _DDRAD.Bits.DDRAD0
#define DDRAD_DDRAD1 _DDRAD.Bits.DDRAD1
#define DDRAD_DDRAD2 _DDRAD.Bits.DDRAD2
#define DDRAD_DDRAD3 _DDRAD.Bits.DDRAD3
#define DDRAD_DDRAD4 _DDRAD.Bits.DDRAD4
#define DDRAD_DDRAD5 _DDRAD.Bits.DDRAD5
#define DDRAD_DDRAD6 _DDRAD.Bits.DDRAD6
#define DDRAD_DDRAD7 _DDRAD.Bits.DDRAD7
#define DDRAD_DDRAD8 _DDRAD.Bits.DDRAD8
#define DDRAD_DDRAD9 _DDRAD.Bits.DDRAD9
#define DDRAD_DDRAD10 _DDRAD.Bits.DDRAD10
#define DDRAD_DDRAD11 _DDRAD.Bits.DDRAD11
#define DDRAD_DDRAD12 _DDRAD.Bits.DDRAD12
#define DDRAD_DDRAD13 _DDRAD.Bits.DDRAD13
#define DDRAD_DDRAD14 _DDRAD.Bits.DDRAD14
#define DDRAD_DDRAD15 _DDRAD.Bits.DDRAD15
#define DDRAD_DDRAD _DDRAD.MergedBits.grpDDRAD


/*** RDRAD - Port AD Reduced Drive Register; 0x00000276 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** RDRADLo - Port AD Reduced Drive Register Low; 0x00000276 ***/
    union {
      byte Byte;
      struct {
        byte RDRAD0      :1;                                       /* Port AD Reduced Drive Bit 0 */
        byte RDRAD1      :1;                                       /* Port AD Reduced Drive Bit 1 */
        byte RDRAD2      :1;                                       /* Port AD Reduced Drive Bit 2 */
        byte RDRAD3      :1;                                       /* Port AD Reduced Drive Bit 3 */
        byte RDRAD4      :1;                                       /* Port AD Reduced Drive Bit 4 */
        byte RDRAD5      :1;                                       /* Port AD Reduced Drive Bit 5 */
        byte RDRAD6      :1;                                       /* Port AD Reduced Drive Bit 6 */
        byte RDRAD7      :1;                                       /* Port AD Reduced Drive Bit 7 */
      } Bits;
      struct {
        byte grpRDRAD :8;
      } MergedBits;
    } RDRADLoSTR;
    #define RDRADLo _RDRAD.Overlap_STR.RDRADLoSTR.Byte
    #define RDRADLo_RDRAD0 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD0
    #define RDRADLo_RDRAD1 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD1
    #define RDRADLo_RDRAD2 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD2
    #define RDRADLo_RDRAD3 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD3
    #define RDRADLo_RDRAD4 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD4
    #define RDRADLo_RDRAD5 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD5
    #define RDRADLo_RDRAD6 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD6
    #define RDRADLo_RDRAD7 _RDRAD.Overlap_STR.RDRADLoSTR.Bits.RDRAD7
    #define RDRADLo_RDRAD _RDRAD.Overlap_STR.RDRADLoSTR.MergedBits.grpRDRAD
    
    /*** RDRADHi - Port AD Reduced Drive Register High; 0x00000277 ***/
    union {
      byte Byte;
      struct {
        byte RDRAD8      :1;                                       /* Port AD Reduced Drive Bit 8 */
        byte RDRAD9      :1;                                       /* Port AD Reduced Drive Bit 9 */
        byte RDRAD10     :1;                                       /* Port AD Reduced Drive Bit 10 */
        byte RDRAD11     :1;                                       /* Port AD Reduced Drive Bit 11 */
        byte RDRAD12     :1;                                       /* Port AD Reduced Drive Bit 12 */
        byte RDRAD13     :1;                                       /* Port AD Reduced Drive Bit 13 */
        byte RDRAD14     :1;                                       /* Port AD Reduced Drive Bit 14 */
        byte RDRAD15     :1;                                       /* Port AD Reduced Drive Bit 15 */
      } Bits;
      struct {
        byte grpRDRAD_8 :8;
      } MergedBits;
    } RDRADHiSTR;
    #define RDRADHi _RDRAD.Overlap_STR.RDRADHiSTR.Byte
    #define RDRADHi_RDRAD8 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD8
    #define RDRADHi_RDRAD9 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD9
    #define RDRADHi_RDRAD10 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD10
    #define RDRADHi_RDRAD11 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD11
    #define RDRADHi_RDRAD12 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD12
    #define RDRADHi_RDRAD13 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD13
    #define RDRADHi_RDRAD14 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD14
    #define RDRADHi_RDRAD15 _RDRAD.Overlap_STR.RDRADHiSTR.Bits.RDRAD15
    #define RDRADHi_RDRAD_8 _RDRAD.Overlap_STR.RDRADHiSTR.MergedBits.grpRDRAD_8
    #define RDRADHi_RDRAD RDRADHi_RDRAD_8
    
  } Overlap_STR;

  struct {
    word RDRAD0      :1;                                       /* Port AD Reduced Drive Bit 0 */
    word RDRAD1      :1;                                       /* Port AD Reduced Drive Bit 1 */
    word RDRAD2      :1;                                       /* Port AD Reduced Drive Bit 2 */
    word RDRAD3      :1;                                       /* Port AD Reduced Drive Bit 3 */
    word RDRAD4      :1;                                       /* Port AD Reduced Drive Bit 4 */
    word RDRAD5      :1;                                       /* Port AD Reduced Drive Bit 5 */
    word RDRAD6      :1;                                       /* Port AD Reduced Drive Bit 6 */
    word RDRAD7      :1;                                       /* Port AD Reduced Drive Bit 7 */
    word RDRAD8      :1;                                       /* Port AD Reduced Drive Bit 8 */
    word RDRAD9      :1;                                       /* Port AD Reduced Drive Bit 9 */
    word RDRAD10     :1;                                       /* Port AD Reduced Drive Bit 10 */
    word RDRAD11     :1;                                       /* Port AD Reduced Drive Bit 11 */
    word RDRAD12     :1;                                       /* Port AD Reduced Drive Bit 12 */
    word RDRAD13     :1;                                       /* Port AD Reduced Drive Bit 13 */
    word RDRAD14     :1;                                       /* Port AD Reduced Drive Bit 14 */
    word RDRAD15     :1;                                       /* Port AD Reduced Drive Bit 15 */
  } Bits;
  struct {
    word grpRDRAD :16;
  } MergedBits;
} RDRADSTR;
extern volatile RDRADSTR _RDRAD @(REG_BASE + 0x00000276);
#define RDRAD _RDRAD.Word
#define RDRAD_RDRAD0 _RDRAD.Bits.RDRAD0
#define RDRAD_RDRAD1 _RDRAD.Bits.RDRAD1
#define RDRAD_RDRAD2 _RDRAD.Bits.RDRAD2
#define RDRAD_RDRAD3 _RDRAD.Bits.RDRAD3
#define RDRAD_RDRAD4 _RDRAD.Bits.RDRAD4
#define RDRAD_RDRAD5 _RDRAD.Bits.RDRAD5
#define RDRAD_RDRAD6 _RDRAD.Bits.RDRAD6
#define RDRAD_RDRAD7 _RDRAD.Bits.RDRAD7
#define RDRAD_RDRAD8 _RDRAD.Bits.RDRAD8
#define RDRAD_RDRAD9 _RDRAD.Bits.RDRAD9
#define RDRAD_RDRAD10 _RDRAD.Bits.RDRAD10
#define RDRAD_RDRAD11 _RDRAD.Bits.RDRAD11
#define RDRAD_RDRAD12 _RDRAD.Bits.RDRAD12
#define RDRAD_RDRAD13 _RDRAD.Bits.RDRAD13
#define RDRAD_RDRAD14 _RDRAD.Bits.RDRAD14
#define RDRAD_RDRAD15 _RDRAD.Bits.RDRAD15
#define RDRAD_RDRAD _RDRAD.MergedBits.grpRDRAD


/*** PERAD - Port AD Pull Device Enable Register; 0x00000278 ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PERADLo - Port AD Pull Device Enable Register Low; 0x00000278 ***/
    union {
      byte Byte;
      struct {
        byte PERAD0      :1;                                       /* Port AD Pull Device Enable Bit 0 */
        byte PERAD1      :1;                                       /* Port AD Pull Device Enable Bit 1 */
        byte PERAD2      :1;                                       /* Port AD Pull Device Enable Bit 2 */
        byte PERAD3      :1;                                       /* Port AD Pull Device Enable Bit 3 */
        byte PERAD4      :1;                                       /* Port AD Pull Device Enable Bit 4 */
        byte PERAD5      :1;                                       /* Port AD Pull Device Enable Bit 5 */
        byte PERAD6      :1;                                       /* Port AD Pull Device Enable Bit 6 */
        byte PERAD7      :1;                                       /* Port AD Pull Device Enable Bit 7 */
      } Bits;
      struct {
        byte grpPERAD :8;
      } MergedBits;
    } PERADLoSTR;
    #define PERADLo _PERAD.Overlap_STR.PERADLoSTR.Byte
    #define PERADLo_PERAD0 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD0
    #define PERADLo_PERAD1 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD1
    #define PERADLo_PERAD2 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD2
    #define PERADLo_PERAD3 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD3
    #define PERADLo_PERAD4 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD4
    #define PERADLo_PERAD5 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD5
    #define PERADLo_PERAD6 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD6
    #define PERADLo_PERAD7 _PERAD.Overlap_STR.PERADLoSTR.Bits.PERAD7
    #define PERADLo_PERAD _PERAD.Overlap_STR.PERADLoSTR.MergedBits.grpPERAD
    
    /*** PERADHi - Port AD Pull Device Enable Register High; 0x00000279 ***/
    union {
      byte Byte;
      struct {
        byte PERAD8      :1;                                       /* Port AD Pull Device Enable Bit 8 */
        byte PERAD9      :1;                                       /* Port AD Pull Device Enable Bit 9 */
        byte PERAD10     :1;                                       /* Port AD Pull Device Enable Bit 10 */
        byte PERAD11     :1;                                       /* Port AD Pull Device Enable Bit 11 */
        byte PERAD12     :1;                                       /* Port AD Pull Device Enable Bit 12 */
        byte PERAD13     :1;                                       /* Port AD Pull Device Enable Bit 13 */
        byte PERAD14     :1;                                       /* Port AD Pull Device Enable Bit 14 */
        byte PERAD15     :1;                                       /* Port AD Pull Device Enable Bit 15 */
      } Bits;
      struct {
        byte grpPERAD_8 :8;
      } MergedBits;
    } PERADHiSTR;
    #define PERADHi _PERAD.Overlap_STR.PERADHiSTR.Byte
    #define PERADHi_PERAD8 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD8
    #define PERADHi_PERAD9 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD9
    #define PERADHi_PERAD10 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD10
    #define PERADHi_PERAD11 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD11
    #define PERADHi_PERAD12 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD12
    #define PERADHi_PERAD13 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD13
    #define PERADHi_PERAD14 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD14
    #define PERADHi_PERAD15 _PERAD.Overlap_STR.PERADHiSTR.Bits.PERAD15
    #define PERADHi_PERAD_8 _PERAD.Overlap_STR.PERADHiSTR.MergedBits.grpPERAD_8
    #define PERADHi_PERAD PERADHi_PERAD_8
    
  } Overlap_STR;

  struct {
    word PERAD0      :1;                                       /* Port AD Pull Device Enable Bit 0 */
    word PERAD1      :1;                                       /* Port AD Pull Device Enable Bit 1 */
    word PERAD2      :1;                                       /* Port AD Pull Device Enable Bit 2 */
    word PERAD3      :1;                                       /* Port AD Pull Device Enable Bit 3 */
    word PERAD4      :1;                                       /* Port AD Pull Device Enable Bit 4 */
    word PERAD5      :1;                                       /* Port AD Pull Device Enable Bit 5 */
    word PERAD6      :1;                                       /* Port AD Pull Device Enable Bit 6 */
    word PERAD7      :1;                                       /* Port AD Pull Device Enable Bit 7 */
    word PERAD8      :1;                                       /* Port AD Pull Device Enable Bit 8 */
    word PERAD9      :1;                                       /* Port AD Pull Device Enable Bit 9 */
    word PERAD10     :1;                                       /* Port AD Pull Device Enable Bit 10 */
    word PERAD11     :1;                                       /* Port AD Pull Device Enable Bit 11 */
    word PERAD12     :1;                                       /* Port AD Pull Device Enable Bit 12 */
    word PERAD13     :1;                                       /* Port AD Pull Device Enable Bit 13 */
    word PERAD14     :1;                                       /* Port AD Pull Device Enable Bit 14 */
    word PERAD15     :1;                                       /* Port AD Pull Device Enable Bit 15 */
  } Bits;
  struct {
    word grpPERAD :16;
  } MergedBits;
} PERADSTR;
extern volatile PERADSTR _PERAD @(REG_BASE + 0x00000278);
#define PERAD _PERAD.Word
#define PERAD_PERAD0 _PERAD.Bits.PERAD0
#define PERAD_PERAD1 _PERAD.Bits.PERAD1
#define PERAD_PERAD2 _PERAD.Bits.PERAD2
#define PERAD_PERAD3 _PERAD.Bits.PERAD3
#define PERAD_PERAD4 _PERAD.Bits.PERAD4
#define PERAD_PERAD5 _PERAD.Bits.PERAD5
#define PERAD_PERAD6 _PERAD.Bits.PERAD6
#define PERAD_PERAD7 _PERAD.Bits.PERAD7
#define PERAD_PERAD8 _PERAD.Bits.PERAD8
#define PERAD_PERAD9 _PERAD.Bits.PERAD9
#define PERAD_PERAD10 _PERAD.Bits.PERAD10
#define PERAD_PERAD11 _PERAD.Bits.PERAD11
#define PERAD_PERAD12 _PERAD.Bits.PERAD12
#define PERAD_PERAD13 _PERAD.Bits.PERAD13
#define PERAD_PERAD14 _PERAD.Bits.PERAD14
#define PERAD_PERAD15 _PERAD.Bits.PERAD15
#define PERAD_PERAD _PERAD.MergedBits.grpPERAD


/*** PPSAD - Port AD Polarity Select Register; 0x0000027A ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PPSADLo - Port AD Polarity Select Register Low; 0x0000027A ***/
    union {
      byte Byte;
      struct {
        byte PPSAD0      :1;                                       /* Port AD Polarity Select Bit 0 */
        byte PPSAD1      :1;                                       /* Port AD Polarity Select Bit 1 */
        byte PPSAD2      :1;                                       /* Port AD Polarity Select Bit 2 */
        byte PPSAD3      :1;                                       /* Port AD Polarity Select Bit 3 */
        byte PPSAD4      :1;                                       /* Port AD Polarity Select Bit 4 */
        byte PPSAD5      :1;                                       /* Port AD Polarity Select Bit 5 */
        byte PPSAD6      :1;                                       /* Port AD Polarity Select Bit 6 */
        byte PPSAD7      :1;                                       /* Port AD Polarity Select Bit 7 */
      } Bits;
      struct {
        byte grpPPSAD :8;
      } MergedBits;
    } PPSADLoSTR;
    #define PPSADLo _PPSAD.Overlap_STR.PPSADLoSTR.Byte
    #define PPSADLo_PPSAD0 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD0
    #define PPSADLo_PPSAD1 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD1
    #define PPSADLo_PPSAD2 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD2
    #define PPSADLo_PPSAD3 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD3
    #define PPSADLo_PPSAD4 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD4
    #define PPSADLo_PPSAD5 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD5
    #define PPSADLo_PPSAD6 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD6
    #define PPSADLo_PPSAD7 _PPSAD.Overlap_STR.PPSADLoSTR.Bits.PPSAD7
    #define PPSADLo_PPSAD _PPSAD.Overlap_STR.PPSADLoSTR.MergedBits.grpPPSAD
    
    /*** PPSADHi - Port AD Polarity Select Register High; 0x0000027B ***/
    union {
      byte Byte;
      struct {
        byte PPSAD8      :1;                                       /* Port AD Polarity Select Bit 8 */
        byte PPSAD9      :1;                                       /* Port AD Polarity Select Bit 9 */
        byte PPSAD10     :1;                                       /* Port AD Polarity Select Bit 10 */
        byte PPSAD11     :1;                                       /* Port AD Polarity Select Bit 11 */
        byte PPSAD12     :1;                                       /* Port AD Polarity Select Bit 12 */
        byte PPSAD13     :1;                                       /* Port AD Polarity Select Bit 13 */
        byte PPSAD14     :1;                                       /* Port AD Polarity Select Bit 14 */
        byte PPSAD15     :1;                                       /* Port AD Polarity Select Bit 15 */
      } Bits;
      struct {
        byte grpPPSAD_8 :8;
      } MergedBits;
    } PPSADHiSTR;
    #define PPSADHi _PPSAD.Overlap_STR.PPSADHiSTR.Byte
    #define PPSADHi_PPSAD8 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD8
    #define PPSADHi_PPSAD9 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD9
    #define PPSADHi_PPSAD10 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD10
    #define PPSADHi_PPSAD11 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD11
    #define PPSADHi_PPSAD12 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD12
    #define PPSADHi_PPSAD13 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD13
    #define PPSADHi_PPSAD14 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD14
    #define PPSADHi_PPSAD15 _PPSAD.Overlap_STR.PPSADHiSTR.Bits.PPSAD15
    #define PPSADHi_PPSAD_8 _PPSAD.Overlap_STR.PPSADHiSTR.MergedBits.grpPPSAD_8
    #define PPSADHi_PPSAD PPSADHi_PPSAD_8
    
  } Overlap_STR;

  struct {
    word PPSAD0      :1;                                       /* Port AD Polarity Select Bit 0 */
    word PPSAD1      :1;                                       /* Port AD Polarity Select Bit 1 */
    word PPSAD2      :1;                                       /* Port AD Polarity Select Bit 2 */
    word PPSAD3      :1;                                       /* Port AD Polarity Select Bit 3 */
    word PPSAD4      :1;                                       /* Port AD Polarity Select Bit 4 */
    word PPSAD5      :1;                                       /* Port AD Polarity Select Bit 5 */
    word PPSAD6      :1;                                       /* Port AD Polarity Select Bit 6 */
    word PPSAD7      :1;                                       /* Port AD Polarity Select Bit 7 */
    word PPSAD8      :1;                                       /* Port AD Polarity Select Bit 8 */
    word PPSAD9      :1;                                       /* Port AD Polarity Select Bit 9 */
    word PPSAD10     :1;                                       /* Port AD Polarity Select Bit 10 */
    word PPSAD11     :1;                                       /* Port AD Polarity Select Bit 11 */
    word PPSAD12     :1;                                       /* Port AD Polarity Select Bit 12 */
    word PPSAD13     :1;                                       /* Port AD Polarity Select Bit 13 */
    word PPSAD14     :1;                                       /* Port AD Polarity Select Bit 14 */
    word PPSAD15     :1;                                       /* Port AD Polarity Select Bit 15 */
  } Bits;
  struct {
    word grpPPSAD :16;
  } MergedBits;
} PPSADSTR;
extern volatile PPSADSTR _PPSAD @(REG_BASE + 0x0000027A);
#define PPSAD _PPSAD.Word
#define PPSAD_PPSAD0 _PPSAD.Bits.PPSAD0
#define PPSAD_PPSAD1 _PPSAD.Bits.PPSAD1
#define PPSAD_PPSAD2 _PPSAD.Bits.PPSAD2
#define PPSAD_PPSAD3 _PPSAD.Bits.PPSAD3
#define PPSAD_PPSAD4 _PPSAD.Bits.PPSAD4
#define PPSAD_PPSAD5 _PPSAD.Bits.PPSAD5
#define PPSAD_PPSAD6 _PPSAD.Bits.PPSAD6
#define PPSAD_PPSAD7 _PPSAD.Bits.PPSAD7
#define PPSAD_PPSAD8 _PPSAD.Bits.PPSAD8
#define PPSAD_PPSAD9 _PPSAD.Bits.PPSAD9
#define PPSAD_PPSAD10 _PPSAD.Bits.PPSAD10
#define PPSAD_PPSAD11 _PPSAD.Bits.PPSAD11
#define PPSAD_PPSAD12 _PPSAD.Bits.PPSAD12
#define PPSAD_PPSAD13 _PPSAD.Bits.PPSAD13
#define PPSAD_PPSAD14 _PPSAD.Bits.PPSAD14
#define PPSAD_PPSAD15 _PPSAD.Bits.PPSAD15
#define PPSAD_PPSAD _PPSAD.MergedBits.grpPPSAD


/*** PIEAD - Port AD Interrupt Enable Register; 0x0000027C ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PIEADHi - Port AD Interrupt Enable Register High; 0x0000027C ***/
    union {
      byte Byte;
      struct {
        byte PIEAD8      :1;                                       /* Port AD Interrupt Enable Bit 8 */
        byte PIEAD9      :1;                                       /* Port AD Interrupt Enable Bit 9 */
        byte PIEAD10     :1;                                       /* Port AD Interrupt Enable Bit 10 */
        byte PIEAD11     :1;                                       /* Port AD Interrupt Enable Bit 11 */
        byte PIEAD12     :1;                                       /* Port AD Interrupt Enable Bit 12 */
        byte PIEAD13     :1;                                       /* Port AD Interrupt Enable Bit 13 */
        byte PIEAD14     :1;                                       /* Port AD Interrupt Enable Bit 14 */
        byte PIEAD15     :1;                                       /* Port AD Interrupt Enable Bit 15 */
      } Bits;
      struct {
        byte grpPIEAD_8 :8;
      } MergedBits;
    } PIEADHiSTR;
    #define PIEADHi _PIEAD.Overlap_STR.PIEADHiSTR.Byte
    #define PIEADHi_PIEAD8 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD8
    #define PIEADHi_PIEAD9 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD9
    #define PIEADHi_PIEAD10 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD10
    #define PIEADHi_PIEAD11 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD11
    #define PIEADHi_PIEAD12 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD12
    #define PIEADHi_PIEAD13 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD13
    #define PIEADHi_PIEAD14 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD14
    #define PIEADHi_PIEAD15 _PIEAD.Overlap_STR.PIEADHiSTR.Bits.PIEAD15
    #define PIEADHi_PIEAD_8 _PIEAD.Overlap_STR.PIEADHiSTR.MergedBits.grpPIEAD_8
    #define PIEADHi_PIEAD PIEADHi_PIEAD_8
    
    /*** PIEADLo - Port AD Interrupt Enable Register Low; 0x0000027D ***/
    union {
      byte Byte;
      struct {
        byte PIEAD0      :1;                                       /* Port AD Interrupt Enable Bit 0 */
        byte PIEAD1      :1;                                       /* Port AD Interrupt Enable Bit 1 */
        byte PIEAD2      :1;                                       /* Port AD Interrupt Enable Bit 2 */
        byte PIEAD3      :1;                                       /* Port AD Interrupt Enable Bit 3 */
        byte PIEAD4      :1;                                       /* Port AD Interrupt Enable Bit 4 */
        byte PIEAD5      :1;                                       /* Port AD Interrupt Enable Bit 5 */
        byte PIEAD6      :1;                                       /* Port AD Interrupt Enable Bit 6 */
        byte PIEAD7      :1;                                       /* Port AD Interrupt Enable Bit 7 */
      } Bits;
      struct {
        byte grpPIEAD :8;
      } MergedBits;
    } PIEADLoSTR;
    #define PIEADLo _PIEAD.Overlap_STR.PIEADLoSTR.Byte
    #define PIEADLo_PIEAD0 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD0
    #define PIEADLo_PIEAD1 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD1
    #define PIEADLo_PIEAD2 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD2
    #define PIEADLo_PIEAD3 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD3
    #define PIEADLo_PIEAD4 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD4
    #define PIEADLo_PIEAD5 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD5
    #define PIEADLo_PIEAD6 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD6
    #define PIEADLo_PIEAD7 _PIEAD.Overlap_STR.PIEADLoSTR.Bits.PIEAD7
    #define PIEADLo_PIEAD _PIEAD.Overlap_STR.PIEADLoSTR.MergedBits.grpPIEAD
    
  } Overlap_STR;

  struct {
    word PIEAD0      :1;                                       /* Port AD Interrupt Enable Bit 0 */
    word PIEAD1      :1;                                       /* Port AD Interrupt Enable Bit 1 */
    word PIEAD2      :1;                                       /* Port AD Interrupt Enable Bit 2 */
    word PIEAD3      :1;                                       /* Port AD Interrupt Enable Bit 3 */
    word PIEAD4      :1;                                       /* Port AD Interrupt Enable Bit 4 */
    word PIEAD5      :1;                                       /* Port AD Interrupt Enable Bit 5 */
    word PIEAD6      :1;                                       /* Port AD Interrupt Enable Bit 6 */
    word PIEAD7      :1;                                       /* Port AD Interrupt Enable Bit 7 */
    word PIEAD8      :1;                                       /* Port AD Interrupt Enable Bit 8 */
    word PIEAD9      :1;                                       /* Port AD Interrupt Enable Bit 9 */
    word PIEAD10     :1;                                       /* Port AD Interrupt Enable Bit 10 */
    word PIEAD11     :1;                                       /* Port AD Interrupt Enable Bit 11 */
    word PIEAD12     :1;                                       /* Port AD Interrupt Enable Bit 12 */
    word PIEAD13     :1;                                       /* Port AD Interrupt Enable Bit 13 */
    word PIEAD14     :1;                                       /* Port AD Interrupt Enable Bit 14 */
    word PIEAD15     :1;                                       /* Port AD Interrupt Enable Bit 15 */
  } Bits;
  struct {
    word grpPIEAD :16;
  } MergedBits;
} PIEADSTR;
extern volatile PIEADSTR _PIEAD @(REG_BASE + 0x0000027C);
#define PIEAD _PIEAD.Word
#define PIEAD_PIEAD0 _PIEAD.Bits.PIEAD0
#define PIEAD_PIEAD1 _PIEAD.Bits.PIEAD1
#define PIEAD_PIEAD2 _PIEAD.Bits.PIEAD2
#define PIEAD_PIEAD3 _PIEAD.Bits.PIEAD3
#define PIEAD_PIEAD4 _PIEAD.Bits.PIEAD4
#define PIEAD_PIEAD5 _PIEAD.Bits.PIEAD5
#define PIEAD_PIEAD6 _PIEAD.Bits.PIEAD6
#define PIEAD_PIEAD7 _PIEAD.Bits.PIEAD7
#define PIEAD_PIEAD8 _PIEAD.Bits.PIEAD8
#define PIEAD_PIEAD9 _PIEAD.Bits.PIEAD9
#define PIEAD_PIEAD10 _PIEAD.Bits.PIEAD10
#define PIEAD_PIEAD11 _PIEAD.Bits.PIEAD11
#define PIEAD_PIEAD12 _PIEAD.Bits.PIEAD12
#define PIEAD_PIEAD13 _PIEAD.Bits.PIEAD13
#define PIEAD_PIEAD14 _PIEAD.Bits.PIEAD14
#define PIEAD_PIEAD15 _PIEAD.Bits.PIEAD15
#define PIEAD_PIEAD _PIEAD.MergedBits.grpPIEAD


/*** PIFAD - Port AD Interrupt Flag Register; 0x0000027E ***/
typedef union {
  word Word;
   /* Overlapped registers: */
  struct {
    /*** PIFADHi - Port AD Interrupt Flag Register High; 0x0000027E ***/
    union {
      byte Byte;
      struct {
        byte PIFAD8      :1;                                       /* Port AD Interrupt Flag Bit 8 */
        byte PIFAD9      :1;                                       /* Port AD Interrupt Flag Bit 9 */
        byte PIFAD10     :1;                                       /* Port AD Interrupt Flag Bit 10 */
        byte PIFAD11     :1;                                       /* Port AD Interrupt Flag Bit 11 */
        byte PIFAD12     :1;                                       /* Port AD Interrupt Flag Bit 12 */
        byte PIFAD13     :1;                                       /* Port AD Interrupt Flag Bit 13 */
        byte PIFAD14     :1;                                       /* Port AD Interrupt Flag Bit 14 */
        byte PIFAD15     :1;                                       /* Port AD Interrupt Flag Bit 15 */
      } Bits;
      struct {
        byte grpPIFAD_8 :8;
      } MergedBits;
    } PIFADHiSTR;
    #define PIFADHi _PIFAD.Overlap_STR.PIFADHiSTR.Byte
    #define PIFADHi_PIFAD8 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD8
    #define PIFADHi_PIFAD9 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD9
    #define PIFADHi_PIFAD10 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD10
    #define PIFADHi_PIFAD11 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD11
    #define PIFADHi_PIFAD12 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD12
    #define PIFADHi_PIFAD13 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD13
    #define PIFADHi_PIFAD14 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD14
    #define PIFADHi_PIFAD15 _PIFAD.Overlap_STR.PIFADHiSTR.Bits.PIFAD15
    #define PIFADHi_PIFAD_8 _PIFAD.Overlap_STR.PIFADHiSTR.MergedBits.grpPIFAD_8
    #define PIFADHi_PIFAD PIFADHi_PIFAD_8
    
    /*** PIFADLo - Port AD Interrupt Flag Register Low; 0x0000027F ***/
    union {
      byte Byte;
      struct {
        byte PIFAD0      :1;                                       /* Port AD Interrupt Flag Bit 0 */
        byte PIFAD1      :1;                                       /* Port AD Interrupt Flag Bit 1 */
        byte PIFAD2      :1;                                       /* Port AD Interrupt Flag Bit 2 */
        byte PIFAD3      :1;                                       /* Port AD Interrupt Flag Bit 3 */
        byte PIFAD4      :1;                                       /* Port AD Interrupt Flag Bit 4 */
        byte PIFAD5      :1;                                       /* Port AD Interrupt Flag Bit 5 */
        byte PIFAD6      :1;                                       /* Port AD Interrupt Flag Bit 6 */
        byte PIFAD7      :1;                                       /* Port AD Interrupt Flag Bit 7 */
      } Bits;
      struct {
        byte grpPIFAD :8;
      } MergedBits;
    } PIFADLoSTR;
    #define PIFADLo _PIFAD.Overlap_STR.PIFADLoSTR.Byte
    #define PIFADLo_PIFAD0 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD0
    #define PIFADLo_PIFAD1 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD1
    #define PIFADLo_PIFAD2 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD2
    #define PIFADLo_PIFAD3 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD3
    #define PIFADLo_PIFAD4 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD4
    #define PIFADLo_PIFAD5 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD5
    #define PIFADLo_PIFAD6 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD6
    #define PIFADLo_PIFAD7 _PIFAD.Overlap_STR.PIFADLoSTR.Bits.PIFAD7
    #define PIFADLo_PIFAD _PIFAD.Overlap_STR.PIFADLoSTR.MergedBits.grpPIFAD
    
  } Overlap_STR;

  struct {
    word PIFAD0      :1;                                       /* Port AD Interrupt Flag Bit 0 */
    word PIFAD1      :1;                                       /* Port AD Interrupt Flag Bit 1 */
    word PIFAD2      :1;                                       /* Port AD Interrupt Flag Bit 2 */
    word PIFAD3      :1;                                       /* Port AD Interrupt Flag Bit 3 */
    word PIFAD4      :1;                                       /* Port AD Interrupt Flag Bit 4 */
    word PIFAD5      :1;                                       /* Port AD Interrupt Flag Bit 5 */
    word PIFAD6      :1;                                       /* Port AD Interrupt Flag Bit 6 */
    word PIFAD7      :1;                                       /* Port AD Interrupt Flag Bit 7 */
    word PIFAD8      :1;                                       /* Port AD Interrupt Flag Bit 8 */
    word PIFAD9      :1;                                       /* Port AD Interrupt Flag Bit 9 */
    word PIFAD10     :1;                                       /* Port AD Interrupt Flag Bit 10 */
    word PIFAD11     :1;                                       /* Port AD Interrupt Flag Bit 11 */
    word PIFAD12     :1;                                       /* Port AD Interrupt Flag Bit 12 */
    word PIFAD13     :1;                                       /* Port AD Interrupt Flag Bit 13 */
    word PIFAD14     :1;                                       /* Port AD Interrupt Flag Bit 14 */
    word PIFAD15     :1;                                       /* Port AD Interrupt Flag Bit 15 */
  } Bits;
  struct {
    word grpPIFAD :16;
  } MergedBits;
} PIFADSTR;
extern volatile PIFADSTR _PIFAD @(REG_BASE + 0x0000027E);
#define PIFAD _PIFAD.Word
#define PIFAD_PIFAD0 _PIFAD.Bits.PIFAD0
#define PIFAD_PIFAD1 _PIFAD.Bits.PIFAD1
#define PIFAD_PIFAD2 _PIFAD.Bits.PIFAD2
#define PIFAD_PIFAD3 _PIFAD.Bits.PIFAD3
#define PIFAD_PIFAD4 _PIFAD.Bits.PIFAD4
#define PIFAD_PIFAD5 _PIFAD.Bits.PIFAD5
#define PIFAD_PIFAD6 _PIFAD.Bits.PIFAD6
#define PIFAD_PIFAD7 _PIFAD.Bits.PIFAD7
#define PIFAD_PIFAD8 _PIFAD.Bits.PIFAD8
#define PIFAD_PIFAD9 _PIFAD.Bits.PIFAD9
#define PIFAD_PIFAD10 _PIFAD.Bits.PIFAD10
#define PIFAD_PIFAD11 _PIFAD.Bits.PIFAD11
#define PIFAD_PIFAD12 _PIFAD.Bits.PIFAD12
#define PIFAD_PIFAD13 _PIFAD.Bits.PIFAD13
#define PIFAD_PIFAD14 _PIFAD.Bits.PIFAD14
#define PIFAD_PIFAD15 _PIFAD.Bits.PIFAD15
#define PIFAD_PIFAD _PIFAD.MergedBits.grpPIFAD


/*** PORTE - Port E Register; 0x00000008 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Port E Bit 0 */
    byte BIT1        :1;                                       /* Port E Bit 1 */
    byte             :1; 
    byte             :1; 
    byte BIT4        :1;                                       /* Port E Bit 4 */
    byte             :1; 
    byte             :1; 
    byte BIT7        :1;                                       /* Port E Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :2;
    byte         :1;
    byte         :1;
    byte grpBIT_4 :1;
    byte         :1;
    byte         :1;
    byte grpBIT_7 :1;
  } MergedBits;
} PORTESTR;
extern volatile PORTESTR _PORTE @(REG_BASE + 0x00000008);
#define PORTE _PORTE.Byte
#define PORTE_BIT0 _PORTE.Bits.BIT0
#define PORTE_BIT1 _PORTE.Bits.BIT1
#define PORTE_BIT4 _PORTE.Bits.BIT4
#define PORTE_BIT7 _PORTE.Bits.BIT7
#define PORTE_BIT _PORTE.MergedBits.grpBIT


/*** DDRE - Port E Data Direction Register; 0x00000009 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte BIT4        :1;                                       /* Data Direction Port E Bit 4 */
    byte             :1; 
    byte             :1; 
    byte BIT7        :1;                                       /* Data Direction Port E Bit 7 */
  } Bits;
} DDRESTR;
extern volatile DDRESTR _DDRE @(REG_BASE + 0x00000009);
#define DDRE _DDRE.Byte
#define DDRE_BIT4 _DDRE.Bits.BIT4
#define DDRE_BIT7 _DDRE.Bits.BIT7


/*** PEAR - Port E Assignment Register; 0x0000000A ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte RDWE        :1;                                       /* Read / Write Enable */
    byte LSTRE       :1;                                       /* Low Strobe (LSTRB) Enable */
    byte NECLK       :1;                                       /* No External E Clock */
    byte PIPOE       :1;                                       /* Pipe Status Signal Output Enable */
    byte             :1; 
    byte NOACCE      :1;                                       /* CPU No Access Output Enable */
  } Bits;
} PEARSTR;
extern volatile PEARSTR _PEAR @(REG_BASE + 0x0000000A);
#define PEAR _PEAR.Byte
#define PEAR_RDWE _PEAR.Bits.RDWE
#define PEAR_LSTRE _PEAR.Bits.LSTRE
#define PEAR_NECLK _PEAR.Bits.NECLK
#define PEAR_PIPOE _PEAR.Bits.PIPOE
#define PEAR_NOACCE _PEAR.Bits.NOACCE


/*** MODE - Mode Register; 0x0000000B ***/
typedef union {
  byte Byte;
  struct {
    byte EME         :1;                                       /* Emulate Port E */
    byte EMK         :1;                                       /* Emulate Port K */
    byte             :1; 
    byte IVIS        :1;                                       /* Internal Visibility */
    byte             :1; 
    byte MODA        :1;                                       /* Mode Select Bit A */
    byte MODB        :1;                                       /* Mode Select Bit B */
    byte MODC        :1;                                       /* Mode Select Bit C */
  } Bits;
} MODESTR;
extern volatile MODESTR _MODE @(REG_BASE + 0x0000000B);
#define MODE _MODE.Byte
#define MODE_EME _MODE.Bits.EME
#define MODE_EMK _MODE.Bits.EMK
#define MODE_IVIS _MODE.Bits.IVIS
#define MODE_MODA _MODE.Bits.MODA
#define MODE_MODB _MODE.Bits.MODB
#define MODE_MODC _MODE.Bits.MODC


/*** PUCR - Pull-Up Control Register; 0x0000000C ***/
typedef union {
  byte Byte;
  struct {
    byte PUPAE       :1;                                       /* Pull-Up Port A Enable */
    byte PUPBE       :1;                                       /* Pull-Up Port B Enable */
    byte             :1; 
    byte             :1; 
    byte PUPEE       :1;                                       /* Pull-Up Port E Enable */
    byte             :1; 
    byte             :1; 
    byte PUPKE       :1;                                       /* Pull-Up Port K Enable */
  } Bits;
} PUCRSTR;
extern volatile PUCRSTR _PUCR @(REG_BASE + 0x0000000C);
#define PUCR _PUCR.Byte
#define PUCR_PUPAE _PUCR.Bits.PUPAE
#define PUCR_PUPBE _PUCR.Bits.PUPBE
#define PUCR_PUPEE _PUCR.Bits.PUPEE
#define PUCR_PUPKE _PUCR.Bits.PUPKE


/*** RDRIV - Reduced Drive of I/O Lines; 0x0000000D ***/
typedef union {
  byte Byte;
  struct {
    byte RDPA        :1;                                       /* Reduced Drive of Port A */
    byte RDPB        :1;                                       /* Reduced Drive of Port B */
    byte             :1; 
    byte             :1; 
    byte RDPE        :1;                                       /* Reduced Drive of Port E */
    byte             :1; 
    byte             :1; 
    byte RDPK        :1;                                       /* Reduced Drive of Port K */
  } Bits;
} RDRIVSTR;
extern volatile RDRIVSTR _RDRIV @(REG_BASE + 0x0000000D);
#define RDRIV _RDRIV.Byte
#define RDRIV_RDPA _RDRIV.Bits.RDPA
#define RDRIV_RDPB _RDRIV.Bits.RDPB
#define RDRIV_RDPE _RDRIV.Bits.RDPE
#define RDRIV_RDPK _RDRIV.Bits.RDPK


/*** EBICTL - External Bus Interface Control; 0x0000000E ***/
typedef union {
  byte Byte;
  struct {
    byte ESTR        :1;                                       /* E Stretches */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} EBICTLSTR;
extern volatile EBICTLSTR _EBICTL @(REG_BASE + 0x0000000E);
#define EBICTL _EBICTL.Byte
#define EBICTL_ESTR _EBICTL.Bits.ESTR


/*** INITRM - Initialization of Internal RAM Position Register; 0x00000010 ***/
typedef union {
  byte Byte;
  struct {
    byte RAMHAL      :1;                                       /* Internal RAM map alignment */
    byte             :1; 
    byte             :1; 
    byte RAM11       :1;                                       /* Internal RAM map position Bit 11 */
    byte RAM12       :1;                                       /* Internal RAM map position Bit 12 */
    byte RAM13       :1;                                       /* Internal RAM map position Bit 13 */
    byte RAM14       :1;                                       /* Internal RAM map position Bit 14 */
    byte RAM15       :1;                                       /* Internal RAM map position Bit 15 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpRAM_11 :5;
  } MergedBits;
} INITRMSTR;
extern volatile INITRMSTR _INITRM @(REG_BASE + 0x00000010);
#define INITRM _INITRM.Byte
#define INITRM_RAMHAL _INITRM.Bits.RAMHAL
#define INITRM_RAM11 _INITRM.Bits.RAM11
#define INITRM_RAM12 _INITRM.Bits.RAM12
#define INITRM_RAM13 _INITRM.Bits.RAM13
#define INITRM_RAM14 _INITRM.Bits.RAM14
#define INITRM_RAM15 _INITRM.Bits.RAM15
#define INITRM_RAM_11 _INITRM.MergedBits.grpRAM_11
#define INITRM_RAM INITRM_RAM_11


/*** INITRG - Initialization of Internal Register Position Register; 0x00000011 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte REG11       :1;                                       /* Internal register map position REG11 */
    byte REG12       :1;                                       /* Internal register map position REG12 */
    byte REG13       :1;                                       /* Internal register map position REG13 */
    byte REG14       :1;                                       /* Internal register map position REG14 */
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpREG_11 :4;
    byte         :1;
  } MergedBits;
} INITRGSTR;
extern volatile INITRGSTR _INITRG @(REG_BASE + 0x00000011);
#define INITRG _INITRG.Byte
#define INITRG_REG11 _INITRG.Bits.REG11
#define INITRG_REG12 _INITRG.Bits.REG12
#define INITRG_REG13 _INITRG.Bits.REG13
#define INITRG_REG14 _INITRG.Bits.REG14
#define INITRG_REG_11 _INITRG.MergedBits.grpREG_11
#define INITRG_REG INITRG_REG_11


/*** INITEE - Initialization of Internal EEPROM Position Register; 0x00000012 ***/
typedef union {
  byte Byte;
  struct {
    byte EEON        :1;                                       /* Internal EEPROM On */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte EE12        :1;                                       /* Internal EEPROM map position Bit 12 */
    byte EE13        :1;                                       /* Internal EEPROM map position Bit 13 */
    byte EE14        :1;                                       /* Internal EEPROM map position Bit 14 */
    byte EE15        :1;                                       /* Internal EEPROM map position Bit 15 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpEE_12 :4;
  } MergedBits;
} INITEESTR;
extern volatile INITEESTR _INITEE @(REG_BASE + 0x00000012);
#define INITEE _INITEE.Byte
#define INITEE_EEON _INITEE.Bits.EEON
#define INITEE_EE12 _INITEE.Bits.EE12
#define INITEE_EE13 _INITEE.Bits.EE13
#define INITEE_EE14 _INITEE.Bits.EE14
#define INITEE_EE15 _INITEE.Bits.EE15
#define INITEE_EE_12 _INITEE.MergedBits.grpEE_12
#define INITEE_EE INITEE_EE_12


/*** MISC - Miscellaneous Mapping Control Register; 0x00000013 ***/
typedef union {
  byte Byte;
  struct {
    byte ROMON       :1;                                       /* Enable Flash EEPROM */
    byte ROMHM       :1;                                       /* Flash EEPROM only in second half of memory map */
    byte EXSTR0      :1;                                       /* External Access Stretch Bit 0 */
    byte EXSTR1      :1;                                       /* External Access Stretch Bit 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpEXSTR :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} MISCSTR;
extern volatile MISCSTR _MISC @(REG_BASE + 0x00000013);
#define MISC _MISC.Byte
#define MISC_ROMON _MISC.Bits.ROMON
#define MISC_ROMHM _MISC.Bits.ROMHM
#define MISC_EXSTR0 _MISC.Bits.EXSTR0
#define MISC_EXSTR1 _MISC.Bits.EXSTR1
#define MISC_EXSTR _MISC.MergedBits.grpEXSTR


/*** MTST0 - MTST0; 0x00000014 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* MTST0 Bit 0 */
    byte BIT1        :1;                                       /* MTST0 Bit 1 */
    byte BIT2        :1;                                       /* MTST0 Bit 2 */
    byte BIT3        :1;                                       /* MTST0 Bit 3 */
    byte BIT4        :1;                                       /* MTST0 Bit 4 */
    byte BIT5        :1;                                       /* MTST0 Bit 5 */
    byte BIT6        :1;                                       /* MTST0 Bit 6 */
    byte BIT7        :1;                                       /* MTST0 Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} MTST0STR;
extern volatile MTST0STR _MTST0 @(REG_BASE + 0x00000014);
#define MTST0 _MTST0.Byte
#define MTST0_BIT0 _MTST0.Bits.BIT0
#define MTST0_BIT1 _MTST0.Bits.BIT1
#define MTST0_BIT2 _MTST0.Bits.BIT2
#define MTST0_BIT3 _MTST0.Bits.BIT3
#define MTST0_BIT4 _MTST0.Bits.BIT4
#define MTST0_BIT5 _MTST0.Bits.BIT5
#define MTST0_BIT6 _MTST0.Bits.BIT6
#define MTST0_BIT7 _MTST0.Bits.BIT7
#define MTST0_BIT _MTST0.MergedBits.grpBIT


/*** ITCR - Interrupt Test Control Register; 0x00000015 ***/
typedef union {
  byte Byte;
  struct {
    byte ADR0        :1;                                       /* Test register select Bit 0 */
    byte ADR1        :1;                                       /* Test register select Bit 1 */
    byte ADR2        :1;                                       /* Test register select Bit 2 */
    byte ADR3        :1;                                       /* Test register select Bit 3 */
    byte WRTINT      :1;                                       /* Write to the Interrupt Test Registers */
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpADR  :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ITCRSTR;
extern volatile ITCRSTR _ITCR @(REG_BASE + 0x00000015);
#define ITCR _ITCR.Byte
#define ITCR_ADR0 _ITCR.Bits.ADR0
#define ITCR_ADR1 _ITCR.Bits.ADR1
#define ITCR_ADR2 _ITCR.Bits.ADR2
#define ITCR_ADR3 _ITCR.Bits.ADR3
#define ITCR_WRTINT _ITCR.Bits.WRTINT
#define ITCR_ADR _ITCR.MergedBits.grpADR


/*** ITEST - Interrupt Test Register; 0x00000016 ***/
typedef union {
  byte Byte;
  struct {
    byte INT0        :1;                                       /* Interrupt Test Register Bit 0 */
    byte INT2        :1;                                       /* Interrupt Test Register Bit 1 */
    byte INT4        :1;                                       /* Interrupt Test Register Bit 2 */
    byte INT6        :1;                                       /* Interrupt Test Register Bit 3 */
    byte INT8        :1;                                       /* Interrupt Test Register Bit 4 */
    byte INTA        :1;                                       /* Interrupt Test Register Bit 5 */
    byte INTC        :1;                                       /* Interrupt Test Register Bit 6 */
    byte INTE        :1;                                       /* Interrupt Test Register Bit 7 */
  } Bits;
} ITESTSTR;
extern volatile ITESTSTR _ITEST @(REG_BASE + 0x00000016);
#define ITEST _ITEST.Byte
#define ITEST_INT0 _ITEST.Bits.INT0
#define ITEST_INT2 _ITEST.Bits.INT2
#define ITEST_INT4 _ITEST.Bits.INT4
#define ITEST_INT6 _ITEST.Bits.INT6
#define ITEST_INT8 _ITEST.Bits.INT8
#define ITEST_INTA _ITEST.Bits.INTA
#define ITEST_INTC _ITEST.Bits.INTC
#define ITEST_INTE _ITEST.Bits.INTE


/*** MTST1 - MTST1; 0x00000017 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* MTST1 Bit 0 */
    byte BIT1        :1;                                       /* MTST1 Bit 1 */
    byte BIT2        :1;                                       /* MTST1 Bit 2 */
    byte BIT3        :1;                                       /* MTST1 Bit 3 */
    byte BIT4        :1;                                       /* MTST1 Bit 4 */
    byte BIT5        :1;                                       /* MTST1 Bit 5 */
    byte BIT6        :1;                                       /* MTST1 Bit 6 */
    byte BIT7        :1;                                       /* MTST1 Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} MTST1STR;
extern volatile MTST1STR _MTST1 @(REG_BASE + 0x00000017);
#define MTST1 _MTST1.Byte
#define MTST1_BIT0 _MTST1.Bits.BIT0
#define MTST1_BIT1 _MTST1.Bits.BIT1
#define MTST1_BIT2 _MTST1.Bits.BIT2
#define MTST1_BIT3 _MTST1.Bits.BIT3
#define MTST1_BIT4 _MTST1.Bits.BIT4
#define MTST1_BIT5 _MTST1.Bits.BIT5
#define MTST1_BIT6 _MTST1.Bits.BIT6
#define MTST1_BIT7 _MTST1.Bits.BIT7
#define MTST1_BIT _MTST1.MergedBits.grpBIT


/*** VREGCTRL0 - VREG_3V3 - Control Register; 0x00000019 ***/
typedef union {
  byte Byte;
  struct {
    byte LVIF        :1;                                       /* Low Voltage Interrupt Flag */
    byte LVIE        :1;                                       /* Low Voltage Interrupt Enable Bit */
    byte LVDS        :1;                                       /* Low Voltage Detect Status Bit */
    byte LVDE        :1;                                       /* Low Voltage Detect Enable Bit */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} VREGCTRL0STR;
extern volatile VREGCTRL0STR _VREGCTRL0 @(REG_BASE + 0x00000019);
#define VREGCTRL0 _VREGCTRL0.Byte
#define VREGCTRL0_LVIF _VREGCTRL0.Bits.LVIF
#define VREGCTRL0_LVIE _VREGCTRL0.Bits.LVIE
#define VREGCTRL0_LVDS _VREGCTRL0.Bits.LVDS
#define VREGCTRL0_LVDE _VREGCTRL0.Bits.LVDE


/*** PARTIDH - Part ID Register High; 0x0000001A ***/
typedef union {
  byte Byte;
  struct {
    byte ID15        :1;                                       /* Part ID Register Bit 15 */
    byte ID14        :1;                                       /* Part ID Register Bit 14 */
    byte ID13        :1;                                       /* Part ID Register Bit 13 */
    byte ID12        :1;                                       /* Part ID Register Bit 12 */
    byte ID11        :1;                                       /* Part ID Register Bit 11 */
    byte ID10        :1;                                       /* Part ID Register Bit 10 */
    byte ID9         :1;                                       /* Part ID Register Bit 9 */
    byte ID8         :1;                                       /* Part ID Register Bit 8 */
  } Bits;
} PARTIDHSTR;
extern volatile PARTIDHSTR _PARTIDH @(REG_BASE + 0x0000001A);
#define PARTIDH _PARTIDH.Byte
#define PARTIDH_ID15 _PARTIDH.Bits.ID15
#define PARTIDH_ID14 _PARTIDH.Bits.ID14
#define PARTIDH_ID13 _PARTIDH.Bits.ID13
#define PARTIDH_ID12 _PARTIDH.Bits.ID12
#define PARTIDH_ID11 _PARTIDH.Bits.ID11
#define PARTIDH_ID10 _PARTIDH.Bits.ID10
#define PARTIDH_ID9 _PARTIDH.Bits.ID9
#define PARTIDH_ID8 _PARTIDH.Bits.ID8


/*** PARTIDL - Part ID Register Low; 0x0000001B ***/
typedef union {
  byte Byte;
  struct {
    byte ID0         :1;                                       /* Part ID Register Bit 0 */
    byte ID1         :1;                                       /* Part ID Register Bit 1 */
    byte ID2         :1;                                       /* Part ID Register Bit 2 */
    byte ID3         :1;                                       /* Part ID Register Bit 3 */
    byte ID4         :1;                                       /* Part ID Register Bit 4 */
    byte ID5         :1;                                       /* Part ID Register Bit 5 */
    byte ID6         :1;                                       /* Part ID Register Bit 6 */
    byte ID7         :1;                                       /* Part ID Register Bit 7 */
  } Bits;
  struct {
    byte grpID   :8;
  } MergedBits;
} PARTIDLSTR;
extern volatile PARTIDLSTR _PARTIDL @(REG_BASE + 0x0000001B);
#define PARTIDL _PARTIDL.Byte
#define PARTIDL_ID0 _PARTIDL.Bits.ID0
#define PARTIDL_ID1 _PARTIDL.Bits.ID1
#define PARTIDL_ID2 _PARTIDL.Bits.ID2
#define PARTIDL_ID3 _PARTIDL.Bits.ID3
#define PARTIDL_ID4 _PARTIDL.Bits.ID4
#define PARTIDL_ID5 _PARTIDL.Bits.ID5
#define PARTIDL_ID6 _PARTIDL.Bits.ID6
#define PARTIDL_ID7 _PARTIDL.Bits.ID7
#define PARTIDL_ID _PARTIDL.MergedBits.grpID


/*** MEMSIZ0 - Memory Size Register Zero; 0x0000001C ***/
typedef union {
  byte Byte;
  struct {
    byte ram_sw0     :1;                                       /* Allocated RAM Memory Space Bit 0 */
    byte ram_sw1     :1;                                       /* Allocated RAM Memory Space Bit 1 */
    byte ram_sw2     :1;                                       /* Allocated RAM Memory Space Bit 2 */
    byte             :1; 
    byte eep_sw0     :1;                                       /* Allocated EEPROM Memory Space Bit 0 */
    byte eep_sw1     :1;                                       /* Allocated EEPROM Memory Space Bit 1 */
    byte             :1; 
    byte reg_sw0     :1;                                       /* Allocated System Register Space */
  } Bits;
  struct {
    byte grpram_sw :3;
    byte         :1;
    byte grpeep_sw :2;
    byte         :1;
    byte grpreg_sw :1;
  } MergedBits;
} MEMSIZ0STR;
extern volatile MEMSIZ0STR _MEMSIZ0 @(REG_BASE + 0x0000001C);
#define MEMSIZ0 _MEMSIZ0.Byte
#define MEMSIZ0_ram_sw0 _MEMSIZ0.Bits.ram_sw0
#define MEMSIZ0_ram_sw1 _MEMSIZ0.Bits.ram_sw1
#define MEMSIZ0_ram_sw2 _MEMSIZ0.Bits.ram_sw2
#define MEMSIZ0_eep_sw0 _MEMSIZ0.Bits.eep_sw0
#define MEMSIZ0_eep_sw1 _MEMSIZ0.Bits.eep_sw1
#define MEMSIZ0_reg_sw0 _MEMSIZ0.Bits.reg_sw0
#define MEMSIZ0_ram_sw _MEMSIZ0.MergedBits.grpram_sw
#define MEMSIZ0_eep_sw _MEMSIZ0.MergedBits.grpeep_sw


/*** MEMSIZ1 - Memory Size Register One; 0x0000001D ***/
typedef union {
  byte Byte;
  struct {
    byte pag_sw0     :1;                                       /* Allocated Off-Chip Memory Options Bit 0 */
    byte pag_sw1     :1;                                       /* Allocated Off-Chip Memory Options Bit 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte rom_sw0     :1;                                       /* Allocated Flash EEPROM/ROM Physical Memory Space Bit 0 */
    byte rom_sw1     :1;                                       /* Allocated Flash EEPROM/ROM Physical Memory Space Bit 1 */
  } Bits;
  struct {
    byte grppag_sw :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grprom_sw :2;
  } MergedBits;
} MEMSIZ1STR;
extern volatile MEMSIZ1STR _MEMSIZ1 @(REG_BASE + 0x0000001D);
#define MEMSIZ1 _MEMSIZ1.Byte
#define MEMSIZ1_pag_sw0 _MEMSIZ1.Bits.pag_sw0
#define MEMSIZ1_pag_sw1 _MEMSIZ1.Bits.pag_sw1
#define MEMSIZ1_rom_sw0 _MEMSIZ1.Bits.rom_sw0
#define MEMSIZ1_rom_sw1 _MEMSIZ1.Bits.rom_sw1
#define MEMSIZ1_pag_sw _MEMSIZ1.MergedBits.grppag_sw
#define MEMSIZ1_rom_sw _MEMSIZ1.MergedBits.grprom_sw


/*** INTCR - Interrupt Control Register; 0x0000001E ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte IRQEN       :1;                                       /* External IRQ Enable */
    byte IRQE        :1;                                       /* IRQ Select Edge Sensitive Only */
  } Bits;
} INTCRSTR;
extern volatile INTCRSTR _INTCR @(REG_BASE + 0x0000001E);
#define INTCR _INTCR.Byte
#define INTCR_IRQEN _INTCR.Bits.IRQEN
#define INTCR_IRQE _INTCR.Bits.IRQE


/*** HPRIO - Highest Priority I Interrupt; 0x0000001F ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte PSEL1       :1;                                       /* Highest Priority I Interrupt Bit 1 */
    byte PSEL2       :1;                                       /* Highest Priority I Interrupt Bit 2 */
    byte PSEL3       :1;                                       /* Highest Priority I Interrupt Bit 3 */
    byte PSEL4       :1;                                       /* Highest Priority I Interrupt Bit 4 */
    byte PSEL5       :1;                                       /* Highest Priority I Interrupt Bit 5 */
    byte PSEL6       :1;                                       /* Highest Priority I Interrupt Bit 6 */
    byte PSEL7       :1;                                       /* Highest Priority I Interrupt Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte grpPSEL_1 :7;
  } MergedBits;
} HPRIOSTR;
extern volatile HPRIOSTR _HPRIO @(REG_BASE + 0x0000001F);
#define HPRIO _HPRIO.Byte
#define HPRIO_PSEL1 _HPRIO.Bits.PSEL1
#define HPRIO_PSEL2 _HPRIO.Bits.PSEL2
#define HPRIO_PSEL3 _HPRIO.Bits.PSEL3
#define HPRIO_PSEL4 _HPRIO.Bits.PSEL4
#define HPRIO_PSEL5 _HPRIO.Bits.PSEL5
#define HPRIO_PSEL6 _HPRIO.Bits.PSEL6
#define HPRIO_PSEL7 _HPRIO.Bits.PSEL7
#define HPRIO_PSEL_1 _HPRIO.MergedBits.grpPSEL_1
#define HPRIO_PSEL HPRIO_PSEL_1


/*** DBGC1 - Debug Control Register 1; 0x00000020 ***/
typedef union {
  byte Byte;
  struct {
    byte CAPMOD0     :1;                                       /* Capture Mode Field, bit 0 */
    byte CAPMOD1     :1;                                       /* Capture Mode Field, bit 1 */
    byte             :1; 
    byte DBGBRK      :1;                                       /* DBG Breakpoint Enable Bit */
    byte BEGIN       :1;                                       /* Begin/End Trigger Bit */
    byte TRGSEL      :1;                                       /* Trigger Selection Bit */
    byte ARM         :1;                                       /* Arm Bit */
    byte DBGEN       :1;                                       /* DBG Mode Enable Bit */
  } Bits;
  struct {
    byte grpCAPMOD :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} DBGC1STR;
extern volatile DBGC1STR _DBGC1 @(REG_BASE + 0x00000020);
#define DBGC1 _DBGC1.Byte
#define DBGC1_CAPMOD0 _DBGC1.Bits.CAPMOD0
#define DBGC1_CAPMOD1 _DBGC1.Bits.CAPMOD1
#define DBGC1_DBGBRK _DBGC1.Bits.DBGBRK
#define DBGC1_BEGIN _DBGC1.Bits.BEGIN
#define DBGC1_TRGSEL _DBGC1.Bits.TRGSEL
#define DBGC1_ARM _DBGC1.Bits.ARM
#define DBGC1_DBGEN _DBGC1.Bits.DBGEN
#define DBGC1_CAPMOD _DBGC1.MergedBits.grpCAPMOD


/*** DBGSC - Debug Status and Control Register; 0x00000021 ***/
typedef union {
  byte Byte;
  struct {
    byte TRG0        :1;                                       /* Trigger Mode Bits, bit 0 */
    byte TRG1        :1;                                       /* Trigger Mode Bits, bit 1 */
    byte TRG2        :1;                                       /* Trigger Mode Bits, bit 2 */
    byte TRG3        :1;                                       /* Trigger Mode Bits, bit 3 */
    byte             :1; 
    byte CF          :1;                                       /* Comparator C Match Flag */
    byte BF          :1;                                       /* Trigger B Match Flag */
    byte AF          :1;                                       /* Trigger A Match Flag */
  } Bits;
  struct {
    byte grpTRG  :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} DBGSCSTR;
extern volatile DBGSCSTR _DBGSC @(REG_BASE + 0x00000021);
#define DBGSC _DBGSC.Byte
#define DBGSC_TRG0 _DBGSC.Bits.TRG0
#define DBGSC_TRG1 _DBGSC.Bits.TRG1
#define DBGSC_TRG2 _DBGSC.Bits.TRG2
#define DBGSC_TRG3 _DBGSC.Bits.TRG3
#define DBGSC_CF _DBGSC.Bits.CF
#define DBGSC_BF _DBGSC.Bits.BF
#define DBGSC_AF _DBGSC.Bits.AF
#define DBGSC_TRG _DBGSC.MergedBits.grpTRG


/*** DBGTBHi - Debug Trace Buffer Register High; 0x00000022 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT8        :1;                                       /* Trace Buffer Data Bit 8 */
    byte BIT9        :1;                                       /* Trace Buffer Data Bit 9 */
    byte BIT10       :1;                                       /* Trace Buffer Data Bit 10 */
    byte BIT11       :1;                                       /* Trace Buffer Data Bit 11 */
    byte BIT12       :1;                                       /* Trace Buffer Data Bit 12 */
    byte BIT13       :1;                                       /* Trace Buffer Data Bit 13 */
    byte BIT14       :1;                                       /* Trace Buffer Data Bit 14 */
    byte BIT15       :1;                                       /* Trace Buffer Data Bit 15 */
  } Bits;
  struct {
    byte grpBIT_8 :8;
  } MergedBits;
} DBGTBHiSTR;
extern volatile DBGTBHiSTR _DBGTBHi @(REG_BASE + 0x00000022);
#define DBGTBHi _DBGTBHi.Byte
#define DBGTBHi_BIT8 _DBGTBHi.Bits.BIT8
#define DBGTBHi_BIT9 _DBGTBHi.Bits.BIT9
#define DBGTBHi_BIT10 _DBGTBHi.Bits.BIT10
#define DBGTBHi_BIT11 _DBGTBHi.Bits.BIT11
#define DBGTBHi_BIT12 _DBGTBHi.Bits.BIT12
#define DBGTBHi_BIT13 _DBGTBHi.Bits.BIT13
#define DBGTBHi_BIT14 _DBGTBHi.Bits.BIT14
#define DBGTBHi_BIT15 _DBGTBHi.Bits.BIT15
#define DBGTBHi_BIT_8 _DBGTBHi.MergedBits.grpBIT_8
#define DBGTBHi_BIT DBGTBHi_BIT_8


/*** DBGTBLo - Debug Trace Buffer Register Low; 0x00000023 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Trace Buffer Data Bit 0 */
    byte BIT1        :1;                                       /* Trace Buffer Data Bit 1 */
    byte BIT2        :1;                                       /* Trace Buffer Data Bit 2 */
    byte BIT3        :1;                                       /* Trace Buffer Data Bit 3 */
    byte BIT4        :1;                                       /* Trace Buffer Data Bit 4 */
    byte BIT5        :1;                                       /* Trace Buffer Data Bit 5 */
    byte BIT6        :1;                                       /* Trace Buffer Data Bit 6 */
    byte BIT7        :1;                                       /* Trace Buffer Data Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DBGTBLoSTR;
extern volatile DBGTBLoSTR _DBGTBLo @(REG_BASE + 0x00000023);
#define DBGTBLo _DBGTBLo.Byte
#define DBGTBLo_BIT0 _DBGTBLo.Bits.BIT0
#define DBGTBLo_BIT1 _DBGTBLo.Bits.BIT1
#define DBGTBLo_BIT2 _DBGTBLo.Bits.BIT2
#define DBGTBLo_BIT3 _DBGTBLo.Bits.BIT3
#define DBGTBLo_BIT4 _DBGTBLo.Bits.BIT4
#define DBGTBLo_BIT5 _DBGTBLo.Bits.BIT5
#define DBGTBLo_BIT6 _DBGTBLo.Bits.BIT6
#define DBGTBLo_BIT7 _DBGTBLo.Bits.BIT7
#define DBGTBLo_BIT _DBGTBLo.MergedBits.grpBIT


/*** DBGCNT - Debug Count Register; 0x00000024 ***/
typedef union {
  byte Byte;
  struct {
    byte CNT0        :1;                                       /* Count Value, bit 0 */
    byte CNT1        :1;                                       /* Count Value, bit 1 */
    byte CNT2        :1;                                       /* Count Value, bit 2 */
    byte CNT3        :1;                                       /* Count Value, bit 3 */
    byte CNT4        :1;                                       /* Count Value, bit 4 */
    byte CNT5        :1;                                       /* Count Value, bit 5 */
    byte             :1; 
    byte TBF         :1;                                       /* Trace Buffer Full */
  } Bits;
  struct {
    byte grpCNT  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} DBGCNTSTR;
extern volatile DBGCNTSTR _DBGCNT @(REG_BASE + 0x00000024);
#define DBGCNT _DBGCNT.Byte
#define DBGCNT_CNT0 _DBGCNT.Bits.CNT0
#define DBGCNT_CNT1 _DBGCNT.Bits.CNT1
#define DBGCNT_CNT2 _DBGCNT.Bits.CNT2
#define DBGCNT_CNT3 _DBGCNT.Bits.CNT3
#define DBGCNT_CNT4 _DBGCNT.Bits.CNT4
#define DBGCNT_CNT5 _DBGCNT.Bits.CNT5
#define DBGCNT_TBF _DBGCNT.Bits.TBF
#define DBGCNT_CNT _DBGCNT.MergedBits.grpCNT


/*** DBGCCX - Debug Comparator C Extended Register; 0x00000025 ***/
typedef union {
  byte Byte;
  struct {
    byte EXTCMP0     :1;                                       /* Comparator C Extended Compare Bits, bit 0 */
    byte EXTCMP1     :1;                                       /* Comparator C Extended Compare Bits, bit 1 */
    byte EXTCMP2     :1;                                       /* Comparator C Extended Compare Bits, bit 2 */
    byte EXTCMP3     :1;                                       /* Comparator C Extended Compare Bits, bit 3 */
    byte EXTCMP4     :1;                                       /* Comparator C Extended Compare Bits, bit 4 */
    byte EXTCMP5     :1;                                       /* Comparator C Extended Compare Bits, bit 5 */
    byte PAGSEL0     :1;                                       /* Page Selector Field, bit 0 */
    byte PAGSEL1     :1;                                       /* Page Selector Field, bit 1 */
  } Bits;
  struct {
    byte grpEXTCMP :6;
    byte grpPAGSEL :2;
  } MergedBits;
} DBGCCXSTR;
extern volatile DBGCCXSTR _DBGCCX @(REG_BASE + 0x00000025);
#define DBGCCX _DBGCCX.Byte
#define DBGCCX_EXTCMP0 _DBGCCX.Bits.EXTCMP0
#define DBGCCX_EXTCMP1 _DBGCCX.Bits.EXTCMP1
#define DBGCCX_EXTCMP2 _DBGCCX.Bits.EXTCMP2
#define DBGCCX_EXTCMP3 _DBGCCX.Bits.EXTCMP3
#define DBGCCX_EXTCMP4 _DBGCCX.Bits.EXTCMP4
#define DBGCCX_EXTCMP5 _DBGCCX.Bits.EXTCMP5
#define DBGCCX_PAGSEL0 _DBGCCX.Bits.PAGSEL0
#define DBGCCX_PAGSEL1 _DBGCCX.Bits.PAGSEL1
#define DBGCCX_EXTCMP _DBGCCX.MergedBits.grpEXTCMP
#define DBGCCX_PAGSEL _DBGCCX.MergedBits.grpPAGSEL


/*** DBGCCHi - Debug Comparator C Register High; 0x00000026 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT8        :1;                                       /* Comparator C Compare Bit 8 */
    byte BIT9        :1;                                       /* Comparator C Compare Bit 9 */
    byte BIT10       :1;                                       /* Comparator C Compare Bit 10 */
    byte BIT11       :1;                                       /* Comparator C Compare Bit 11 */
    byte BIT12       :1;                                       /* Comparator C Compare Bit 12 */
    byte BIT13       :1;                                       /* Comparator C Compare Bit 13 */
    byte BIT14       :1;                                       /* Comparator C Compare Bit 14 */
    byte BIT15       :1;                                       /* Comparator C Compare Bit 15 */
  } Bits;
  struct {
    byte grpBIT_8 :8;
  } MergedBits;
} DBGCCHiSTR;
extern volatile DBGCCHiSTR _DBGCCHi @(REG_BASE + 0x00000026);
#define DBGCCHi _DBGCCHi.Byte
#define DBGCCHi_BIT8 _DBGCCHi.Bits.BIT8
#define DBGCCHi_BIT9 _DBGCCHi.Bits.BIT9
#define DBGCCHi_BIT10 _DBGCCHi.Bits.BIT10
#define DBGCCHi_BIT11 _DBGCCHi.Bits.BIT11
#define DBGCCHi_BIT12 _DBGCCHi.Bits.BIT12
#define DBGCCHi_BIT13 _DBGCCHi.Bits.BIT13
#define DBGCCHi_BIT14 _DBGCCHi.Bits.BIT14
#define DBGCCHi_BIT15 _DBGCCHi.Bits.BIT15
#define DBGCCHi_BIT_8 _DBGCCHi.MergedBits.grpBIT_8
#define DBGCCHi_BIT DBGCCHi_BIT_8


/*** DBGCCLo - Debug Comparator C Register Low; 0x00000027 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Comparator C Compare Bit 0 */
    byte BIT1        :1;                                       /* Comparator C Compare Bit 1 */
    byte BIT2        :1;                                       /* Comparator C Compare Bit 2 */
    byte BIT3        :1;                                       /* Comparator C Compare Bit 3 */
    byte BIT4        :1;                                       /* Comparator C Compare Bit 4 */
    byte BIT5        :1;                                       /* Comparator C Compare Bit 5 */
    byte BIT6        :1;                                       /* Comparator C Compare Bit 6 */
    byte BIT7        :1;                                       /* Comparator C Compare Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DBGCCLoSTR;
extern volatile DBGCCLoSTR _DBGCCLo @(REG_BASE + 0x00000027);
#define DBGCCLo _DBGCCLo.Byte
#define DBGCCLo_BIT0 _DBGCCLo.Bits.BIT0
#define DBGCCLo_BIT1 _DBGCCLo.Bits.BIT1
#define DBGCCLo_BIT2 _DBGCCLo.Bits.BIT2
#define DBGCCLo_BIT3 _DBGCCLo.Bits.BIT3
#define DBGCCLo_BIT4 _DBGCCLo.Bits.BIT4
#define DBGCCLo_BIT5 _DBGCCLo.Bits.BIT5
#define DBGCCLo_BIT6 _DBGCCLo.Bits.BIT6
#define DBGCCLo_BIT7 _DBGCCLo.Bits.BIT7
#define DBGCCLo_BIT _DBGCCLo.MergedBits.grpBIT


/*** DBGC2 - Debug Control Register 2; 0x00000028 ***/
typedef union {
  byte Byte;
  struct {
    byte RWC         :1;                                       /* Read/Write Comparator C Value Bit */
    byte RWCEN       :1;                                       /* Read/Write Comparator C Enable Bit */
    byte TAGC        :1;                                       /* Comparator C Tag Select */
    byte BKCEN       :1;                                       /* Breakpoint Comparator C Enable Bit */
    byte TAGAB       :1;                                       /* Comparator A/B Tag Select */
    byte BDM         :1;                                       /* Background Debug Mode Enable */
    byte FULL        :1;                                       /* Full Breakpoint Mode Enable */
    byte BKABEN      :1;                                       /* Breakpoint Using Comparator A and B Enable */
  } Bits;
} DBGC2STR;
extern volatile DBGC2STR _DBGC2 @(REG_BASE + 0x00000028);
#define DBGC2 _DBGC2.Byte
#define DBGC2_RWC _DBGC2.Bits.RWC
#define DBGC2_RWCEN _DBGC2.Bits.RWCEN
#define DBGC2_TAGC _DBGC2.Bits.TAGC
#define DBGC2_BKCEN _DBGC2.Bits.BKCEN
#define DBGC2_TAGAB _DBGC2.Bits.TAGAB
#define DBGC2_BDM _DBGC2.Bits.BDM
#define DBGC2_FULL _DBGC2.Bits.FULL
#define DBGC2_BKABEN _DBGC2.Bits.BKABEN


/*** DBGC3 - Debug Control Register 3; 0x00000029 ***/
typedef union {
  byte Byte;
  struct {
    byte RWB         :1;                                       /* Read/Write Comparator B Value Bit */
    byte RWBEN       :1;                                       /* Read/Write Comparator B Enable Bit */
    byte RWA         :1;                                       /* Read/Write Comparator A Value Bit */
    byte RWAEN       :1;                                       /* Read/Write Comparator A Enable Bit */
    byte BKBMBL      :1;                                       /* Breakpoint Mask Low Byte for Second Address */
    byte BKBMBH      :1;                                       /* Breakpoint Mask High Byte for Second Address */
    byte BKAMBL      :1;                                       /* Breakpoint Mask Low Byte for First Address */
    byte BKAMBH      :1;                                       /* Breakpoint Mask High Byte for First Address */
  } Bits;
} DBGC3STR;
extern volatile DBGC3STR _DBGC3 @(REG_BASE + 0x00000029);
#define DBGC3 _DBGC3.Byte
#define DBGC3_RWB _DBGC3.Bits.RWB
#define DBGC3_RWBEN _DBGC3.Bits.RWBEN
#define DBGC3_RWA _DBGC3.Bits.RWA
#define DBGC3_RWAEN _DBGC3.Bits.RWAEN
#define DBGC3_BKBMBL _DBGC3.Bits.BKBMBL
#define DBGC3_BKBMBH _DBGC3.Bits.BKBMBH
#define DBGC3_BKAMBL _DBGC3.Bits.BKAMBL
#define DBGC3_BKAMBH _DBGC3.Bits.BKAMBH


/*** DBGCAX - Debug Comparator A Extended Register; 0x0000002A ***/
typedef union {
  byte Byte;
  struct {
    byte PAGSEL0     :1;                                       /* Page Selector Field, bit 0 */
    byte PAGSEL1     :1;                                       /* Page Selector Field, bit 1 */
    byte PAGSEL2     :1;                                       /* Page Selector Field, bit 2 */
    byte PAGSEL3     :1;                                       /* Page Selector Field, bit 3 */
    byte PAGSEL4     :1;                                       /* Page Selector Field, bit 4 */
    byte PAGSEL5     :1;                                       /* Page Selector Field, bit 5 */
    byte EXTCMP0     :1;                                       /* Comparator A Extended Compare Bits, bit 0 */
    byte EXTCMP1     :1;                                       /* Comparator A Extended Compare Bits, bit 1 */
  } Bits;
  struct {
    byte grpPAGSEL :6;
    byte grpEXTCMP :2;
  } MergedBits;
} DBGCAXSTR;
extern volatile DBGCAXSTR _DBGCAX @(REG_BASE + 0x0000002A);
#define DBGCAX _DBGCAX.Byte
#define DBGCAX_PAGSEL0 _DBGCAX.Bits.PAGSEL0
#define DBGCAX_PAGSEL1 _DBGCAX.Bits.PAGSEL1
#define DBGCAX_PAGSEL2 _DBGCAX.Bits.PAGSEL2
#define DBGCAX_PAGSEL3 _DBGCAX.Bits.PAGSEL3
#define DBGCAX_PAGSEL4 _DBGCAX.Bits.PAGSEL4
#define DBGCAX_PAGSEL5 _DBGCAX.Bits.PAGSEL5
#define DBGCAX_EXTCMP0 _DBGCAX.Bits.EXTCMP0
#define DBGCAX_EXTCMP1 _DBGCAX.Bits.EXTCMP1
#define DBGCAX_PAGSEL _DBGCAX.MergedBits.grpPAGSEL
#define DBGCAX_EXTCMP _DBGCAX.MergedBits.grpEXTCMP


/*** DBGCAHi - Debug Comparator A Register High; 0x0000002B ***/
typedef union {
  byte Byte;
  struct {
    byte BIT8        :1;                                       /* Comparator A Compare Bit 8 */
    byte BIT9        :1;                                       /* Comparator A Compare Bit 9 */
    byte BIT10       :1;                                       /* Comparator A Compare Bit 10 */
    byte BIT11       :1;                                       /* Comparator A Compare Bit 11 */
    byte BIT12       :1;                                       /* Comparator A Compare Bit 12 */
    byte BIT13       :1;                                       /* Comparator A Compare Bit 13 */
    byte BIT14       :1;                                       /* Comparator A Compare Bit 14 */
    byte BIT15       :1;                                       /* Comparator A Compare Bit 15 */
  } Bits;
  struct {
    byte grpBIT_8 :8;
  } MergedBits;
} DBGCAHiSTR;
extern volatile DBGCAHiSTR _DBGCAHi @(REG_BASE + 0x0000002B);
#define DBGCAHi _DBGCAHi.Byte
#define DBGCAHi_BIT8 _DBGCAHi.Bits.BIT8
#define DBGCAHi_BIT9 _DBGCAHi.Bits.BIT9
#define DBGCAHi_BIT10 _DBGCAHi.Bits.BIT10
#define DBGCAHi_BIT11 _DBGCAHi.Bits.BIT11
#define DBGCAHi_BIT12 _DBGCAHi.Bits.BIT12
#define DBGCAHi_BIT13 _DBGCAHi.Bits.BIT13
#define DBGCAHi_BIT14 _DBGCAHi.Bits.BIT14
#define DBGCAHi_BIT15 _DBGCAHi.Bits.BIT15
#define DBGCAHi_BIT_8 _DBGCAHi.MergedBits.grpBIT_8
#define DBGCAHi_BIT DBGCAHi_BIT_8


/*** DBGCALo - Debug Comparator A Register Low; 0x0000002C ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Comparator A Compare Bit 0 */
    byte BIT1        :1;                                       /* Comparator A Compare Bit 1 */
    byte BIT2        :1;                                       /* Comparator A Compare Bit 2 */
    byte BIT3        :1;                                       /* Comparator A Compare Bit 3 */
    byte BIT4        :1;                                       /* Comparator A Compare Bit 4 */
    byte BIT5        :1;                                       /* Comparator A Compare Bit 5 */
    byte BIT6        :1;                                       /* Comparator A Compare Bit 6 */
    byte BIT7        :1;                                       /* Comparator A Compare Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DBGCALoSTR;
extern volatile DBGCALoSTR _DBGCALo @(REG_BASE + 0x0000002C);
#define DBGCALo _DBGCALo.Byte
#define DBGCALo_BIT0 _DBGCALo.Bits.BIT0
#define DBGCALo_BIT1 _DBGCALo.Bits.BIT1
#define DBGCALo_BIT2 _DBGCALo.Bits.BIT2
#define DBGCALo_BIT3 _DBGCALo.Bits.BIT3
#define DBGCALo_BIT4 _DBGCALo.Bits.BIT4
#define DBGCALo_BIT5 _DBGCALo.Bits.BIT5
#define DBGCALo_BIT6 _DBGCALo.Bits.BIT6
#define DBGCALo_BIT7 _DBGCALo.Bits.BIT7
#define DBGCALo_BIT _DBGCALo.MergedBits.grpBIT


/*** DBGCBX - Debug Comparator B Extended Register; 0x0000002D ***/
typedef union {
  byte Byte;
  struct {
    byte EXTCMP0     :1;                                       /* Comparator B Extended Compare Bits, bit 0 */
    byte EXTCMP1     :1;                                       /* Comparator B Extended Compare Bits, bit 1 */
    byte EXTCMP2     :1;                                       /* Comparator B Extended Compare Bits, bit 2 */
    byte EXTCMP3     :1;                                       /* Comparator B Extended Compare Bits, bit 3 */
    byte EXTCMP4     :1;                                       /* Comparator B Extended Compare Bits, bit 4 */
    byte EXTCMP5     :1;                                       /* Comparator B Extended Compare Bits, bit 5 */
    byte PAGSEL0     :1;                                       /* Page Selector Field, bit 0 */
    byte PAGSEL1     :1;                                       /* Page Selector Field, bit 1 */
  } Bits;
  struct {
    byte grpEXTCMP :6;
    byte grpPAGSEL :2;
  } MergedBits;
} DBGCBXSTR;
extern volatile DBGCBXSTR _DBGCBX @(REG_BASE + 0x0000002D);
#define DBGCBX _DBGCBX.Byte
#define DBGCBX_EXTCMP0 _DBGCBX.Bits.EXTCMP0
#define DBGCBX_EXTCMP1 _DBGCBX.Bits.EXTCMP1
#define DBGCBX_EXTCMP2 _DBGCBX.Bits.EXTCMP2
#define DBGCBX_EXTCMP3 _DBGCBX.Bits.EXTCMP3
#define DBGCBX_EXTCMP4 _DBGCBX.Bits.EXTCMP4
#define DBGCBX_EXTCMP5 _DBGCBX.Bits.EXTCMP5
#define DBGCBX_PAGSEL0 _DBGCBX.Bits.PAGSEL0
#define DBGCBX_PAGSEL1 _DBGCBX.Bits.PAGSEL1
#define DBGCBX_EXTCMP _DBGCBX.MergedBits.grpEXTCMP
#define DBGCBX_PAGSEL _DBGCBX.MergedBits.grpPAGSEL


/*** DBGCBHi - Debug Comparator B Register High; 0x0000002E ***/
typedef union {
  byte Byte;
  struct {
    byte BIT8        :1;                                       /* Comparator B High Compare Bit 8 */
    byte BIT9        :1;                                       /* Comparator B High Compare Bit 9 */
    byte BIT10       :1;                                       /* Comparator B High Compare Bit 10 */
    byte BIT11       :1;                                       /* Comparator B High Compare Bit 11 */
    byte BIT12       :1;                                       /* Comparator B High Compare Bit 12 */
    byte BIT13       :1;                                       /* Comparator B High Compare Bit 13 */
    byte BIT14       :1;                                       /* Comparator B High Compare Bit 14 */
    byte BIT15       :1;                                       /* Comparator B High Compare Bit 15 */
  } Bits;
  struct {
    byte grpBIT_8 :8;
  } MergedBits;
} DBGCBHiSTR;
extern volatile DBGCBHiSTR _DBGCBHi @(REG_BASE + 0x0000002E);
#define DBGCBHi _DBGCBHi.Byte
#define DBGCBHi_BIT8 _DBGCBHi.Bits.BIT8
#define DBGCBHi_BIT9 _DBGCBHi.Bits.BIT9
#define DBGCBHi_BIT10 _DBGCBHi.Bits.BIT10
#define DBGCBHi_BIT11 _DBGCBHi.Bits.BIT11
#define DBGCBHi_BIT12 _DBGCBHi.Bits.BIT12
#define DBGCBHi_BIT13 _DBGCBHi.Bits.BIT13
#define DBGCBHi_BIT14 _DBGCBHi.Bits.BIT14
#define DBGCBHi_BIT15 _DBGCBHi.Bits.BIT15
#define DBGCBHi_BIT_8 _DBGCBHi.MergedBits.grpBIT_8
#define DBGCBHi_BIT DBGCBHi_BIT_8


/*** DBGCBLo - Debug Comparator B Register Low; 0x0000002F ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Comparator B High Compare Bit 0 */
    byte BIT1        :1;                                       /* Comparator B High Compare Bit 1 */
    byte BIT2        :1;                                       /* Comparator B High Compare Bit 2 */
    byte BIT3        :1;                                       /* Comparator B High Compare Bit 3 */
    byte BIT4        :1;                                       /* Comparator B High Compare Bit 4 */
    byte BIT5        :1;                                       /* Comparator B High Compare Bit 5 */
    byte BIT6        :1;                                       /* Comparator B High Compare Bit 6 */
    byte BIT7        :1;                                       /* Comparator B High Compare Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DBGCBLoSTR;
extern volatile DBGCBLoSTR _DBGCBLo @(REG_BASE + 0x0000002F);
#define DBGCBLo _DBGCBLo.Byte
#define DBGCBLo_BIT0 _DBGCBLo.Bits.BIT0
#define DBGCBLo_BIT1 _DBGCBLo.Bits.BIT1
#define DBGCBLo_BIT2 _DBGCBLo.Bits.BIT2
#define DBGCBLo_BIT3 _DBGCBLo.Bits.BIT3
#define DBGCBLo_BIT4 _DBGCBLo.Bits.BIT4
#define DBGCBLo_BIT5 _DBGCBLo.Bits.BIT5
#define DBGCBLo_BIT6 _DBGCBLo.Bits.BIT6
#define DBGCBLo_BIT7 _DBGCBLo.Bits.BIT7
#define DBGCBLo_BIT _DBGCBLo.MergedBits.grpBIT


/*** PPAGE - Page Index Register; 0x00000030 ***/
typedef union {
  byte Byte;
  struct {
    byte PIX0        :1;                                       /* Page Index Register Bit 0 */
    byte PIX1        :1;                                       /* Page Index Register Bit 1 */
    byte PIX2        :1;                                       /* Page Index Register Bit 2 */
    byte PIX3        :1;                                       /* Page Index Register Bit 3 */
    byte PIX4        :1;                                       /* Page Index Register Bit 4 */
    byte PIX5        :1;                                       /* Page Index Register Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPIX  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PPAGESTR;
extern volatile PPAGESTR _PPAGE @(REG_BASE + 0x00000030);
#define PPAGE _PPAGE.Byte
#define PPAGE_PIX0 _PPAGE.Bits.PIX0
#define PPAGE_PIX1 _PPAGE.Bits.PIX1
#define PPAGE_PIX2 _PPAGE.Bits.PIX2
#define PPAGE_PIX3 _PPAGE.Bits.PIX3
#define PPAGE_PIX4 _PPAGE.Bits.PIX4
#define PPAGE_PIX5 _PPAGE.Bits.PIX5
#define PPAGE_PIX _PPAGE.MergedBits.grpPIX


/*** PORTK - Port K Data Register; 0x00000032 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Port K Bit 0 */
    byte BIT1        :1;                                       /* Port K Bit 1 */
    byte BIT2        :1;                                       /* Port K Bit 2 */
    byte BIT3        :1;                                       /* Port K Bit 3 */
    byte BIT4        :1;                                       /* Port K Bit 4 */
    byte BIT5        :1;                                       /* Port K Bit 5 */
    byte BIT6        :1;                                       /* Port K Bit 6 */
    byte BIT7        :1;                                       /* Port K Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} PORTKSTR;
extern volatile PORTKSTR _PORTK @(REG_BASE + 0x00000032);
#define PORTK _PORTK.Byte
#define PORTK_BIT0 _PORTK.Bits.BIT0
#define PORTK_BIT1 _PORTK.Bits.BIT1
#define PORTK_BIT2 _PORTK.Bits.BIT2
#define PORTK_BIT3 _PORTK.Bits.BIT3
#define PORTK_BIT4 _PORTK.Bits.BIT4
#define PORTK_BIT5 _PORTK.Bits.BIT5
#define PORTK_BIT6 _PORTK.Bits.BIT6
#define PORTK_BIT7 _PORTK.Bits.BIT7
#define PORTK_BIT _PORTK.MergedBits.grpBIT


/*** DDRK - Port K Data Direction Register; 0x00000033 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Port K Data Direction Bit 0 */
    byte BIT1        :1;                                       /* Port K Data Direction Bit 1 */
    byte BIT2        :1;                                       /* Port K Data Direction Bit 2 */
    byte BIT3        :1;                                       /* Port K Data Direction Bit 3 */
    byte BIT4        :1;                                       /* Port K Data Direction Bit 4 */
    byte BIT5        :1;                                       /* Port K Data Direction Bit 5 */
    byte BIT6        :1;                                       /* Port K Data Direction Bit 6 */
    byte BIT7        :1;                                       /* Port K Data Direction Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DDRKSTR;
extern volatile DDRKSTR _DDRK @(REG_BASE + 0x00000033);
#define DDRK _DDRK.Byte
#define DDRK_BIT0 _DDRK.Bits.BIT0
#define DDRK_BIT1 _DDRK.Bits.BIT1
#define DDRK_BIT2 _DDRK.Bits.BIT2
#define DDRK_BIT3 _DDRK.Bits.BIT3
#define DDRK_BIT4 _DDRK.Bits.BIT4
#define DDRK_BIT5 _DDRK.Bits.BIT5
#define DDRK_BIT6 _DDRK.Bits.BIT6
#define DDRK_BIT7 _DDRK.Bits.BIT7
#define DDRK_BIT _DDRK.MergedBits.grpBIT


/*** SYNR - CRG Synthesizer Register; 0x00000034 ***/
typedef union {
  byte Byte;
  struct {
    byte SYN0        :1;                                       /* CRG Synthesizer Bit 0 */
    byte SYN1        :1;                                       /* CRG Synthesizer Bit 1 */
    byte SYN2        :1;                                       /* CRG Synthesizer Bit 2 */
    byte SYN3        :1;                                       /* CRG Synthesizer Bit 3 */
    byte SYN4        :1;                                       /* CRG Synthesizer Bit 4 */
    byte SYN5        :1;                                       /* CRG Synthesizer Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpSYN  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} SYNRSTR;
extern volatile SYNRSTR _SYNR @(REG_BASE + 0x00000034);
#define SYNR _SYNR.Byte
#define SYNR_SYN0 _SYNR.Bits.SYN0
#define SYNR_SYN1 _SYNR.Bits.SYN1
#define SYNR_SYN2 _SYNR.Bits.SYN2
#define SYNR_SYN3 _SYNR.Bits.SYN3
#define SYNR_SYN4 _SYNR.Bits.SYN4
#define SYNR_SYN5 _SYNR.Bits.SYN5
#define SYNR_SYN _SYNR.MergedBits.grpSYN


/*** REFDV - CRG Reference Divider Register; 0x00000035 ***/
typedef union {
  byte Byte;
  struct {
    byte REFDV0      :1;                                       /* CRG Reference Divider Bit 0 */
    byte REFDV1      :1;                                       /* CRG Reference Divider Bit 1 */
    byte REFDV2      :1;                                       /* CRG Reference Divider Bit 2 */
    byte REFDV3      :1;                                       /* CRG Reference Divider Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpREFDV :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} REFDVSTR;
extern volatile REFDVSTR _REFDV @(REG_BASE + 0x00000035);
#define REFDV _REFDV.Byte
#define REFDV_REFDV0 _REFDV.Bits.REFDV0
#define REFDV_REFDV1 _REFDV.Bits.REFDV1
#define REFDV_REFDV2 _REFDV.Bits.REFDV2
#define REFDV_REFDV3 _REFDV.Bits.REFDV3
#define REFDV_REFDV _REFDV.MergedBits.grpREFDV


/*** CTFLG - CRG Test Flags Register; 0x00000036 ***/
typedef union {
  byte Byte;
  struct {
    byte TOUT0       :1;                                       /* CRG Test Flags Bit 0 */
    byte TOUT1       :1;                                       /* CRG Test Flags Bit 1 */
    byte TOUT2       :1;                                       /* CRG Test Flags Bit 2 */
    byte TOUT3       :1;                                       /* CRG Test Flags Bit 3 */
    byte TOUT4       :1;                                       /* CRG Test Flags Bit 4 */
    byte TOUT5       :1;                                       /* CRG Test Flags Bit 5 */
    byte TOUT6       :1;                                       /* CRG Test Flags Bit 6 */
    byte TOUT7       :1;                                       /* CRG Test Flags Bit 7 */
  } Bits;
  struct {
    byte grpTOUT :8;
  } MergedBits;
} CTFLGSTR;
extern volatile CTFLGSTR _CTFLG @(REG_BASE + 0x00000036);
#define CTFLG _CTFLG.Byte
#define CTFLG_TOUT0 _CTFLG.Bits.TOUT0
#define CTFLG_TOUT1 _CTFLG.Bits.TOUT1
#define CTFLG_TOUT2 _CTFLG.Bits.TOUT2
#define CTFLG_TOUT3 _CTFLG.Bits.TOUT3
#define CTFLG_TOUT4 _CTFLG.Bits.TOUT4
#define CTFLG_TOUT5 _CTFLG.Bits.TOUT5
#define CTFLG_TOUT6 _CTFLG.Bits.TOUT6
#define CTFLG_TOUT7 _CTFLG.Bits.TOUT7
#define CTFLG_TOUT _CTFLG.MergedBits.grpTOUT


/*** CRGFLG - CRG Flags Register; 0x00000037 ***/
typedef union {
  byte Byte;
  struct {
    byte SCM         :1;                                       /* Self-clock mode Status */
    byte SCMIF       :1;                                       /* Self-clock mode Interrupt Flag */
    byte TRACK       :1;                                       /* Track Status */
    byte LOCK        :1;                                       /* Lock Status */
    byte LOCKIF      :1;                                       /* PLL Lock Interrupt Flag */
    byte             :1; 
    byte PORF        :1;                                       /* Power on Reset Flag */
    byte RTIF        :1;                                       /* Real Time Interrupt Flag */
  } Bits;
} CRGFLGSTR;
extern volatile CRGFLGSTR _CRGFLG @(REG_BASE + 0x00000037);
#define CRGFLG _CRGFLG.Byte
#define CRGFLG_SCM _CRGFLG.Bits.SCM
#define CRGFLG_SCMIF _CRGFLG.Bits.SCMIF
#define CRGFLG_TRACK _CRGFLG.Bits.TRACK
#define CRGFLG_LOCK _CRGFLG.Bits.LOCK
#define CRGFLG_LOCKIF _CRGFLG.Bits.LOCKIF
#define CRGFLG_PORF _CRGFLG.Bits.PORF
#define CRGFLG_RTIF _CRGFLG.Bits.RTIF


/*** CRGINT - CRG Interrupt Enable Register; 0x00000038 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte SCMIE       :1;                                       /* Self-clock mode Interrupt Enable */
    byte             :1; 
    byte             :1; 
    byte LOCKIE      :1;                                       /* Lock Interrupt Enable */
    byte             :1; 
    byte             :1; 
    byte RTIE        :1;                                       /* Real Time Interrupt Enable */
  } Bits;
} CRGINTSTR;
extern volatile CRGINTSTR _CRGINT @(REG_BASE + 0x00000038);
#define CRGINT _CRGINT.Byte
#define CRGINT_SCMIE _CRGINT.Bits.SCMIE
#define CRGINT_LOCKIE _CRGINT.Bits.LOCKIE
#define CRGINT_RTIE _CRGINT.Bits.RTIE


/*** CLKSEL - CRG Clock Select Register; 0x00000039 ***/
typedef union {
  byte Byte;
  struct {
    byte COPWAI      :1;                                       /* COP stops in WAIT mode */
    byte RTIWAI      :1;                                       /* RTI stops in WAIT mode */
    byte CWAI        :1;                                       /* CLK24 and CLK23 stop in WAIT mode */
    byte PLLWAI      :1;                                       /* PLL stops in WAIT mode */
    byte ROAWAI      :1;                                       /* Reduced Oscillator Amplitude in WAIT mode */
    byte SYSWAI      :1;                                       /* System clocks stop in WAIT mode */
    byte PSTP        :1;                                       /* Pseudo Stop */
    byte PLLSEL      :1;                                       /* PLL selected for system clock */
  } Bits;
} CLKSELSTR;
extern volatile CLKSELSTR _CLKSEL @(REG_BASE + 0x00000039);
#define CLKSEL _CLKSEL.Byte
#define CLKSEL_COPWAI _CLKSEL.Bits.COPWAI
#define CLKSEL_RTIWAI _CLKSEL.Bits.RTIWAI
#define CLKSEL_CWAI _CLKSEL.Bits.CWAI
#define CLKSEL_PLLWAI _CLKSEL.Bits.PLLWAI
#define CLKSEL_ROAWAI _CLKSEL.Bits.ROAWAI
#define CLKSEL_SYSWAI _CLKSEL.Bits.SYSWAI
#define CLKSEL_PSTP _CLKSEL.Bits.PSTP
#define CLKSEL_PLLSEL _CLKSEL.Bits.PLLSEL


/*** PLLCTL - CRG PLL Control Register; 0x0000003A ***/
typedef union {
  byte Byte;
  struct {
    byte SCME        :1;                                       /* Self-clock mode enable */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte ACQ         :1;                                       /* Acquisition */
    byte AUTO        :1;                                       /* Automatic Bandwidth Control */
    byte PLLON       :1;                                       /* Phase Lock Loop On */
    byte CME         :1;                                       /* Crystal Monitor Enable */
  } Bits;
} PLLCTLSTR;
extern volatile PLLCTLSTR _PLLCTL @(REG_BASE + 0x0000003A);
#define PLLCTL _PLLCTL.Byte
#define PLLCTL_SCME _PLLCTL.Bits.SCME
#define PLLCTL_ACQ _PLLCTL.Bits.ACQ
#define PLLCTL_AUTO _PLLCTL.Bits.AUTO
#define PLLCTL_PLLON _PLLCTL.Bits.PLLON
#define PLLCTL_CME _PLLCTL.Bits.CME


/*** RTICTL - CRG RTI Control Register; 0x0000003B ***/
typedef union {
  byte Byte;
  struct {
    byte RTR0        :1;                                       /* Real Time Interrupt Modulus Counter Select */
    byte RTR1        :1;                                       /* Real Time Interrupt Modulus Counter Select */
    byte RTR2        :1;                                       /* Real Time Interrupt Modulus Counter Select */
    byte RTR3        :1;                                       /* Real Time Interrupt Modulus Counter Select */
    byte RTR4        :1;                                       /* Real Time Interrupt Prescale Rate Select */
    byte RTR5        :1;                                       /* Real Time Interrupt Prescale Rate Select */
    byte RTR6        :1;                                       /* Real Time Interrupt Prescale Rate Select */
    byte             :1; 
  } Bits;
  struct {
    byte grpRTR  :7;
    byte         :1;
  } MergedBits;
} RTICTLSTR;
extern volatile RTICTLSTR _RTICTL @(REG_BASE + 0x0000003B);
#define RTICTL _RTICTL.Byte
#define RTICTL_RTR0 _RTICTL.Bits.RTR0
#define RTICTL_RTR1 _RTICTL.Bits.RTR1
#define RTICTL_RTR2 _RTICTL.Bits.RTR2
#define RTICTL_RTR3 _RTICTL.Bits.RTR3
#define RTICTL_RTR4 _RTICTL.Bits.RTR4
#define RTICTL_RTR5 _RTICTL.Bits.RTR5
#define RTICTL_RTR6 _RTICTL.Bits.RTR6
#define RTICTL_RTR _RTICTL.MergedBits.grpRTR


/*** COPCTL - CRG COP Control Register; 0x0000003C ***/
typedef union {
  byte Byte;
  struct {
    byte CR0         :1;                                       /* COP Watchdog Timer Rate select Bit 0 */
    byte CR1         :1;                                       /* COP Watchdog Timer Rate select Bit 1 */
    byte CR2         :1;                                       /* COP Watchdog Timer Rate select Bit 2 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte RSBCK       :1;                                       /* COP and RTI stop in Active BDM mode Bit */
    byte WCOP        :1;                                       /* Window COP mode */
  } Bits;
  struct {
    byte grpCR   :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} COPCTLSTR;
extern volatile COPCTLSTR _COPCTL @(REG_BASE + 0x0000003C);
#define COPCTL _COPCTL.Byte
#define COPCTL_CR0 _COPCTL.Bits.CR0
#define COPCTL_CR1 _COPCTL.Bits.CR1
#define COPCTL_CR2 _COPCTL.Bits.CR2
#define COPCTL_RSBCK _COPCTL.Bits.RSBCK
#define COPCTL_WCOP _COPCTL.Bits.WCOP
#define COPCTL_CR _COPCTL.MergedBits.grpCR


/*** FORBYP - Crg force and bypass test register; 0x0000003D ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Bit 0 */
    byte BIT1        :1;                                       /* Bit 1 */
    byte BIT2        :1;                                       /* Bit 2 */
    byte BIT3        :1;                                       /* Bit 3 */
    byte BIT4        :1;                                       /* Bit 4 */
    byte BIT5        :1;                                       /* Bit 5 */
    byte BIT6        :1;                                       /* Bit 6 */
    byte BIT7        :1;                                       /* Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} FORBYPSTR;
extern volatile FORBYPSTR _FORBYP @(REG_BASE + 0x0000003D);
#define FORBYP _FORBYP.Byte
#define FORBYP_BIT0 _FORBYP.Bits.BIT0
#define FORBYP_BIT1 _FORBYP.Bits.BIT1
#define FORBYP_BIT2 _FORBYP.Bits.BIT2
#define FORBYP_BIT3 _FORBYP.Bits.BIT3
#define FORBYP_BIT4 _FORBYP.Bits.BIT4
#define FORBYP_BIT5 _FORBYP.Bits.BIT5
#define FORBYP_BIT6 _FORBYP.Bits.BIT6
#define FORBYP_BIT7 _FORBYP.Bits.BIT7
#define FORBYP_BIT _FORBYP.MergedBits.grpBIT


/*** CTCTL - CRG Test Control Register; 0x0000003E ***/
typedef union {
  byte Byte;
  struct {
    byte TCTL0       :1;                                       /* CRG Test Control Bit 0 */
    byte TCTL1       :1;                                       /* CRG Test Control Bit 1 */
    byte TCTL2       :1;                                       /* CRG Test Control Bit 2 */
    byte TCTL3       :1;                                       /* CRG Test Control Bit 3 */
    byte TCTL4       :1;                                       /* CRG Test Control Bit 4 */
    byte TCTL5       :1;                                       /* CRG Test Control Bit 5 */
    byte TCTL6       :1;                                       /* CRG Test Control Bit 6 */
    byte TCTL7       :1;                                       /* CRG Test Control Bit 7 */
  } Bits;
  struct {
    byte grpTCTL :8;
  } MergedBits;
} CTCTLSTR;
extern volatile CTCTLSTR _CTCTL @(REG_BASE + 0x0000003E);
#define CTCTL _CTCTL.Byte
#define CTCTL_TCTL0 _CTCTL.Bits.TCTL0
#define CTCTL_TCTL1 _CTCTL.Bits.TCTL1
#define CTCTL_TCTL2 _CTCTL.Bits.TCTL2
#define CTCTL_TCTL3 _CTCTL.Bits.TCTL3
#define CTCTL_TCTL4 _CTCTL.Bits.TCTL4
#define CTCTL_TCTL5 _CTCTL.Bits.TCTL5
#define CTCTL_TCTL6 _CTCTL.Bits.TCTL6
#define CTCTL_TCTL7 _CTCTL.Bits.TCTL7
#define CTCTL_TCTL _CTCTL.MergedBits.grpTCTL


/*** ARMCOP - CRG COP Timer Arm/Reset Register; 0x0000003F ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* CRG COP Timer Arm/Reset Bit 0 */
    byte BIT1        :1;                                       /* CRG COP Timer Arm/Reset Bit 1 */
    byte BIT2        :1;                                       /* CRG COP Timer Arm/Reset Bit 2 */
    byte BIT3        :1;                                       /* CRG COP Timer Arm/Reset Bit 3 */
    byte BIT4        :1;                                       /* CRG COP Timer Arm/Reset Bit 4 */
    byte BIT5        :1;                                       /* CRG COP Timer Arm/Reset Bit 5 */
    byte BIT6        :1;                                       /* CRG COP Timer Arm/Reset Bit 6 */
    byte BIT7        :1;                                       /* CRG COP Timer Arm/Reset Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} ARMCOPSTR;
extern volatile ARMCOPSTR _ARMCOP @(REG_BASE + 0x0000003F);
#define ARMCOP _ARMCOP.Byte
#define ARMCOP_BIT0 _ARMCOP.Bits.BIT0
#define ARMCOP_BIT1 _ARMCOP.Bits.BIT1
#define ARMCOP_BIT2 _ARMCOP.Bits.BIT2
#define ARMCOP_BIT3 _ARMCOP.Bits.BIT3
#define ARMCOP_BIT4 _ARMCOP.Bits.BIT4
#define ARMCOP_BIT5 _ARMCOP.Bits.BIT5
#define ARMCOP_BIT6 _ARMCOP.Bits.BIT6
#define ARMCOP_BIT7 _ARMCOP.Bits.BIT7
#define ARMCOP_BIT _ARMCOP.MergedBits.grpBIT


/*** TIM0_TIOS - TIM0 Timer Input Capture/Output Compare Select; 0x00000040 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte IOS4        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 4 */
    byte IOS5        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 5 */
    byte IOS6        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 6 */
    byte IOS7        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpIOS_4 :4;
  } MergedBits;
} TIM0_TIOSSTR;
extern volatile TIM0_TIOSSTR _TIM0_TIOS @(REG_BASE + 0x00000040);
#define TIM0_TIOS _TIM0_TIOS.Byte
#define TIM0_TIOS_IOS4 _TIM0_TIOS.Bits.IOS4
#define TIM0_TIOS_IOS5 _TIM0_TIOS.Bits.IOS5
#define TIM0_TIOS_IOS6 _TIM0_TIOS.Bits.IOS6
#define TIM0_TIOS_IOS7 _TIM0_TIOS.Bits.IOS7
#define TIM0_TIOS_IOS_4 _TIM0_TIOS.MergedBits.grpIOS_4
#define TIM0_TIOS_IOS TIM0_TIOS_IOS_4


/*** TIM0_CFORC - TIM0 Timer Compare Force Register; 0x00000041 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FOC4        :1;                                       /* Force Output Compare Action for Channel 4 */
    byte FOC5        :1;                                       /* Force Output Compare Action for Channel 5 */
    byte FOC6        :1;                                       /* Force Output Compare Action for Channel 6 */
    byte FOC7        :1;                                       /* Force Output Compare Action for Channel 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFOC_4 :4;
  } MergedBits;
} TIM0_CFORCSTR;
extern volatile TIM0_CFORCSTR _TIM0_CFORC @(REG_BASE + 0x00000041);
#define TIM0_CFORC _TIM0_CFORC.Byte
#define TIM0_CFORC_FOC4 _TIM0_CFORC.Bits.FOC4
#define TIM0_CFORC_FOC5 _TIM0_CFORC.Bits.FOC5
#define TIM0_CFORC_FOC6 _TIM0_CFORC.Bits.FOC6
#define TIM0_CFORC_FOC7 _TIM0_CFORC.Bits.FOC7
#define TIM0_CFORC_FOC_4 _TIM0_CFORC.MergedBits.grpFOC_4
#define TIM0_CFORC_FOC TIM0_CFORC_FOC_4


/*** TIM0_OC7M - TIM0 Output Compare 7 Mask Register; 0x00000042 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte OC7M4       :1;                                       /* Output Compare 7 Mask Bit 4 */
    byte OC7M5       :1;                                       /* Output Compare 7 Mask Bit 5 */
    byte OC7M6       :1;                                       /* Output Compare 7 Mask Bit 6 */
    byte OC7M7       :1;                                       /* Output Compare 7 Mask Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpOC7M_4 :4;
  } MergedBits;
} TIM0_OC7MSTR;
extern volatile TIM0_OC7MSTR _TIM0_OC7M @(REG_BASE + 0x00000042);
#define TIM0_OC7M _TIM0_OC7M.Byte
#define TIM0_OC7M_OC7M4 _TIM0_OC7M.Bits.OC7M4
#define TIM0_OC7M_OC7M5 _TIM0_OC7M.Bits.OC7M5
#define TIM0_OC7M_OC7M6 _TIM0_OC7M.Bits.OC7M6
#define TIM0_OC7M_OC7M7 _TIM0_OC7M.Bits.OC7M7
#define TIM0_OC7M_OC7M_4 _TIM0_OC7M.MergedBits.grpOC7M_4
#define TIM0_OC7M_OC7M TIM0_OC7M_OC7M_4


/*** TIM0_OC7D - TIM0 Output Compare 7 Data Register; 0x00000043 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte OC7D4       :1;                                       /* Output Compare 7 Bit 4 */
    byte OC7D5       :1;                                       /* Output Compare 7 Bit 5 */
    byte OC7D6       :1;                                       /* Output Compare 7 Bit 6 */
    byte OC7D7       :1;                                       /* Output Compare 7 Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpOC7D_4 :4;
  } MergedBits;
} TIM0_OC7DSTR;
extern volatile TIM0_OC7DSTR _TIM0_OC7D @(REG_BASE + 0x00000043);
#define TIM0_OC7D _TIM0_OC7D.Byte
#define TIM0_OC7D_OC7D4 _TIM0_OC7D.Bits.OC7D4
#define TIM0_OC7D_OC7D5 _TIM0_OC7D.Bits.OC7D5
#define TIM0_OC7D_OC7D6 _TIM0_OC7D.Bits.OC7D6
#define TIM0_OC7D_OC7D7 _TIM0_OC7D.Bits.OC7D7
#define TIM0_OC7D_OC7D_4 _TIM0_OC7D.MergedBits.grpOC7D_4
#define TIM0_OC7D_OC7D TIM0_OC7D_OC7D_4


/*** TIM0_TSCR1 - TIM0 Timer System Control Register1; 0x00000046 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TFFCA       :1;                                       /* Timer Fast Flag Clear All */
    byte TSFRZ       :1;                                       /* Timer and Modulus Counter Stop While in Freeze Mode */
    byte TSWAI       :1;                                       /* Timer Module Stops While in Wait */
    byte TEN         :1;                                       /* Timer Enable */
  } Bits;
} TIM0_TSCR1STR;
extern volatile TIM0_TSCR1STR _TIM0_TSCR1 @(REG_BASE + 0x00000046);
#define TIM0_TSCR1 _TIM0_TSCR1.Byte
#define TIM0_TSCR1_TFFCA _TIM0_TSCR1.Bits.TFFCA
#define TIM0_TSCR1_TSFRZ _TIM0_TSCR1.Bits.TSFRZ
#define TIM0_TSCR1_TSWAI _TIM0_TSCR1.Bits.TSWAI
#define TIM0_TSCR1_TEN _TIM0_TSCR1.Bits.TEN


/*** TIM0_TTOV - TIM0 Timer Toggle On Overflow Register; 0x00000047 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOV4        :1;                                       /* Toggle On Overflow Bit 4 */
    byte TOV5        :1;                                       /* Toggle On Overflow Bit 5 */
    byte TOV6        :1;                                       /* Toggle On Overflow Bit 6 */
    byte TOV7        :1;                                       /* Toggle On Overflow Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpTOV_4 :4;
  } MergedBits;
} TIM0_TTOVSTR;
extern volatile TIM0_TTOVSTR _TIM0_TTOV @(REG_BASE + 0x00000047);
#define TIM0_TTOV _TIM0_TTOV.Byte
#define TIM0_TTOV_TOV4 _TIM0_TTOV.Bits.TOV4
#define TIM0_TTOV_TOV5 _TIM0_TTOV.Bits.TOV5
#define TIM0_TTOV_TOV6 _TIM0_TTOV.Bits.TOV6
#define TIM0_TTOV_TOV7 _TIM0_TTOV.Bits.TOV7
#define TIM0_TTOV_TOV_4 _TIM0_TTOV.MergedBits.grpTOV_4
#define TIM0_TTOV_TOV TIM0_TTOV_TOV_4


/*** TIM0_TCTL1 - TIM0 Timer Control Registers 1; 0x00000048 ***/
typedef union {
  byte Byte;
  struct {
    byte OL4         :1;                                       /* Output Level Bit 4 */
    byte OM4         :1;                                       /* Output Mode Bit 4 */
    byte OL5         :1;                                       /* Output Level Bit 5 */
    byte OM5         :1;                                       /* Output Mode Bit 5 */
    byte OL6         :1;                                       /* Output Level Bit 6 */
    byte OM6         :1;                                       /* Output Mode Bit 6 */
    byte OL7         :1;                                       /* Output Level Bit 7 */
    byte OM7         :1;                                       /* Output Mode Bit 7 */
  } Bits;
} TIM0_TCTL1STR;
extern volatile TIM0_TCTL1STR _TIM0_TCTL1 @(REG_BASE + 0x00000048);
#define TIM0_TCTL1 _TIM0_TCTL1.Byte
#define TIM0_TCTL1_OL4 _TIM0_TCTL1.Bits.OL4
#define TIM0_TCTL1_OM4 _TIM0_TCTL1.Bits.OM4
#define TIM0_TCTL1_OL5 _TIM0_TCTL1.Bits.OL5
#define TIM0_TCTL1_OM5 _TIM0_TCTL1.Bits.OM5
#define TIM0_TCTL1_OL6 _TIM0_TCTL1.Bits.OL6
#define TIM0_TCTL1_OM6 _TIM0_TCTL1.Bits.OM6
#define TIM0_TCTL1_OL7 _TIM0_TCTL1.Bits.OL7
#define TIM0_TCTL1_OM7 _TIM0_TCTL1.Bits.OM7


/*** TIM0_TCTL3 - TIM0 Timer Control Register 3; 0x0000004A ***/
typedef union {
  byte Byte;
  struct {
    byte EDG4A       :1;                                       /* Input Capture Edge Control 4A */
    byte EDG4B       :1;                                       /* Input Capture Edge Control 4B */
    byte EDG5A       :1;                                       /* Input Capture Edge Control 5A */
    byte EDG5B       :1;                                       /* Input Capture Edge Control 5B */
    byte EDG6A       :1;                                       /* Input Capture Edge Control 6A */
    byte EDG6B       :1;                                       /* Input Capture Edge Control 6B */
    byte EDG7A       :1;                                       /* Input Capture Edge Control 7A */
    byte EDG7B       :1;                                       /* Input Capture Edge Control 7B */
  } Bits;
} TIM0_TCTL3STR;
extern volatile TIM0_TCTL3STR _TIM0_TCTL3 @(REG_BASE + 0x0000004A);
#define TIM0_TCTL3 _TIM0_TCTL3.Byte
#define TIM0_TCTL3_EDG4A _TIM0_TCTL3.Bits.EDG4A
#define TIM0_TCTL3_EDG4B _TIM0_TCTL3.Bits.EDG4B
#define TIM0_TCTL3_EDG5A _TIM0_TCTL3.Bits.EDG5A
#define TIM0_TCTL3_EDG5B _TIM0_TCTL3.Bits.EDG5B
#define TIM0_TCTL3_EDG6A _TIM0_TCTL3.Bits.EDG6A
#define TIM0_TCTL3_EDG6B _TIM0_TCTL3.Bits.EDG6B
#define TIM0_TCTL3_EDG7A _TIM0_TCTL3.Bits.EDG7A
#define TIM0_TCTL3_EDG7B _TIM0_TCTL3.Bits.EDG7B


/*** TIM0_TIE - TIM0 Timer Interrupt Enable Register; 0x0000004C ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte C4I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 4 */
    byte C5I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 5 */
    byte C6I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 6 */
    byte C7I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 7 */
  } Bits;
} TIM0_TIESTR;
extern volatile TIM0_TIESTR _TIM0_TIE @(REG_BASE + 0x0000004C);
#define TIM0_TIE _TIM0_TIE.Byte
#define TIM0_TIE_C4I _TIM0_TIE.Bits.C4I
#define TIM0_TIE_C5I _TIM0_TIE.Bits.C5I
#define TIM0_TIE_C6I _TIM0_TIE.Bits.C6I
#define TIM0_TIE_C7I _TIM0_TIE.Bits.C7I


/*** TIM0_TSCR2 - TIM0 Timer System Control Register 2; 0x0000004D ***/
typedef union {
  byte Byte;
  struct {
    byte PR0         :1;                                       /* Timer Prescaler Select Bit 0 */
    byte PR1         :1;                                       /* Timer Prescaler Select Bit 1 */
    byte PR2         :1;                                       /* Timer Prescaler Select Bit 2 */
    byte TCRE        :1;                                       /* Timer Counter Reset Enable */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOI         :1;                                       /* Timer Overflow Interrupt Enable */
  } Bits;
  struct {
    byte grpPR   :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} TIM0_TSCR2STR;
extern volatile TIM0_TSCR2STR _TIM0_TSCR2 @(REG_BASE + 0x0000004D);
#define TIM0_TSCR2 _TIM0_TSCR2.Byte
#define TIM0_TSCR2_PR0 _TIM0_TSCR2.Bits.PR0
#define TIM0_TSCR2_PR1 _TIM0_TSCR2.Bits.PR1
#define TIM0_TSCR2_PR2 _TIM0_TSCR2.Bits.PR2
#define TIM0_TSCR2_TCRE _TIM0_TSCR2.Bits.TCRE
#define TIM0_TSCR2_TOI _TIM0_TSCR2.Bits.TOI
#define TIM0_TSCR2_PR _TIM0_TSCR2.MergedBits.grpPR


/*** TIM0_TFLG1 - TIM0 Main Timer Interrupt Flag 1; 0x0000004E ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte C4F         :1;                                       /* Input Capture/Output Compare Channel Flag 4 */
    byte C5F         :1;                                       /* Input Capture/Output Compare Channel Flag 5 */
    byte C6F         :1;                                       /* Input Capture/Output Compare Channel Flag 6 */
    byte C7F         :1;                                       /* Input Capture/Output Compare Channel Flag 7 */
  } Bits;
} TIM0_TFLG1STR;
extern volatile TIM0_TFLG1STR _TIM0_TFLG1 @(REG_BASE + 0x0000004E);
#define TIM0_TFLG1 _TIM0_TFLG1.Byte
#define TIM0_TFLG1_C4F _TIM0_TFLG1.Bits.C4F
#define TIM0_TFLG1_C5F _TIM0_TFLG1.Bits.C5F
#define TIM0_TFLG1_C6F _TIM0_TFLG1.Bits.C6F
#define TIM0_TFLG1_C7F _TIM0_TFLG1.Bits.C7F


/*** TIM0_TFLG2 - TIM0 Main Timer Interrupt Flag 2; 0x0000004F ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOF         :1;                                       /* Timer Overflow Flag */
  } Bits;
} TIM0_TFLG2STR;
extern volatile TIM0_TFLG2STR _TIM0_TFLG2 @(REG_BASE + 0x0000004F);
#define TIM0_TFLG2 _TIM0_TFLG2.Byte
#define TIM0_TFLG2_TOF _TIM0_TFLG2.Bits.TOF


/*** TIM0_PACTL - TIM0 16-Bit Pulse Accumulator A Control Register; 0x00000060 ***/
typedef union {
  byte Byte;
  struct {
    byte PAI         :1;                                       /* Pulse Accumulator Input Interrupt enable */
    byte PAOVI       :1;                                       /* Pulse Accumulator A Overflow Interrupt enable */
    byte CLK0        :1;                                       /* Clock Select Bit 0 */
    byte CLK1        :1;                                       /* Clock Select Bit 1 */
    byte PEDGE       :1;                                       /* Pulse Accumulator Edge Control */
    byte PAMOD       :1;                                       /* Pulse Accumulator Mode */
    byte PAEN        :1;                                       /* Pulse Accumulator A System Enable */
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpCLK  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} TIM0_PACTLSTR;
extern volatile TIM0_PACTLSTR _TIM0_PACTL @(REG_BASE + 0x00000060);
#define TIM0_PACTL _TIM0_PACTL.Byte
#define TIM0_PACTL_PAI _TIM0_PACTL.Bits.PAI
#define TIM0_PACTL_PAOVI _TIM0_PACTL.Bits.PAOVI
#define TIM0_PACTL_CLK0 _TIM0_PACTL.Bits.CLK0
#define TIM0_PACTL_CLK1 _TIM0_PACTL.Bits.CLK1
#define TIM0_PACTL_PEDGE _TIM0_PACTL.Bits.PEDGE
#define TIM0_PACTL_PAMOD _TIM0_PACTL.Bits.PAMOD
#define TIM0_PACTL_PAEN _TIM0_PACTL.Bits.PAEN
#define TIM0_PACTL_CLK _TIM0_PACTL.MergedBits.grpCLK


/*** TIM0_PAFLG - TIM0 Pulse Accumulator A Flag Register; 0x00000061 ***/
typedef union {
  byte Byte;
  struct {
    byte PAIF        :1;                                       /* Pulse Accumulator Input edge Flag */
    byte PAOVF       :1;                                       /* Pulse Accumulator A Overflow Flag */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} TIM0_PAFLGSTR;
extern volatile TIM0_PAFLGSTR _TIM0_PAFLG @(REG_BASE + 0x00000061);
#define TIM0_PAFLG _TIM0_PAFLG.Byte
#define TIM0_PAFLG_PAIF _TIM0_PAFLG.Bits.PAIF
#define TIM0_PAFLG_PAOVF _TIM0_PAFLG.Bits.PAOVF


/*** ATDSTAT0 - ATD Status Register 0; 0x00000086 ***/
typedef union {
  byte Byte;
  struct {
    byte CC0         :1;                                       /* Conversion Counter 0 */
    byte CC1         :1;                                       /* Conversion Counter 1 */
    byte CC2         :1;                                       /* Conversion Counter 2 */
    byte CC3         :1;                                       /* Conversion Counter 3 */
    byte FIFOR       :1;                                       /* FIFO Over Run Flag */
    byte ETORF       :1;                                       /* External Trigger Overrun Flag */
    byte             :1; 
    byte SCF         :1;                                       /* Sequence Complete Flag */
  } Bits;
  struct {
    byte grpCC   :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} ATDSTAT0STR;
extern volatile ATDSTAT0STR _ATDSTAT0 @(REG_BASE + 0x00000086);
#define ATDSTAT0 _ATDSTAT0.Byte
#define ATDSTAT0_CC0 _ATDSTAT0.Bits.CC0
#define ATDSTAT0_CC1 _ATDSTAT0.Bits.CC1
#define ATDSTAT0_CC2 _ATDSTAT0.Bits.CC2
#define ATDSTAT0_CC3 _ATDSTAT0.Bits.CC3
#define ATDSTAT0_FIFOR _ATDSTAT0.Bits.FIFOR
#define ATDSTAT0_ETORF _ATDSTAT0.Bits.ETORF
#define ATDSTAT0_SCF _ATDSTAT0.Bits.SCF
#define ATDSTAT0_CC _ATDSTAT0.MergedBits.grpCC


/*** ATDSTAT2 - ATD Status Register 2; 0x0000008A ***/
typedef union {
  byte Byte;
  struct {
    byte CCF8        :1;                                       /* Conversion Complete Flag 8 */
    byte CCF9        :1;                                       /* Conversion Complete Flag 9 */
    byte CCF10       :1;                                       /* Conversion Complete Flag 10 */
    byte CCF11       :1;                                       /* Conversion Complete Flag 11 */
    byte CCF12       :1;                                       /* Conversion Complete Flag 12 */
    byte CCF13       :1;                                       /* Conversion Complete Flag 13 */
    byte CCF14       :1;                                       /* Conversion Complete Flag 14 */
    byte CCF15       :1;                                       /* Conversion Complete Flag 15 */
  } Bits;
  struct {
    byte grpCCF_8 :8;
  } MergedBits;
} ATDSTAT2STR;
extern volatile ATDSTAT2STR _ATDSTAT2 @(REG_BASE + 0x0000008A);
#define ATDSTAT2 _ATDSTAT2.Byte
#define ATDSTAT2_CCF8 _ATDSTAT2.Bits.CCF8
#define ATDSTAT2_CCF9 _ATDSTAT2.Bits.CCF9
#define ATDSTAT2_CCF10 _ATDSTAT2.Bits.CCF10
#define ATDSTAT2_CCF11 _ATDSTAT2.Bits.CCF11
#define ATDSTAT2_CCF12 _ATDSTAT2.Bits.CCF12
#define ATDSTAT2_CCF13 _ATDSTAT2.Bits.CCF13
#define ATDSTAT2_CCF14 _ATDSTAT2.Bits.CCF14
#define ATDSTAT2_CCF15 _ATDSTAT2.Bits.CCF15
#define ATDSTAT2_CCF_8 _ATDSTAT2.MergedBits.grpCCF_8
#define ATDSTAT2_CCF ATDSTAT2_CCF_8


/*** ATDSTAT1 - ATD Status Register 1; 0x0000008B ***/
typedef union {
  byte Byte;
  struct {
    byte CCF0        :1;                                       /* Conversion Complete Flag 0 */
    byte CCF1        :1;                                       /* Conversion Complete Flag 1 */
    byte CCF2        :1;                                       /* Conversion Complete Flag 2 */
    byte CCF3        :1;                                       /* Conversion Complete Flag 3 */
    byte CCF4        :1;                                       /* Conversion Complete Flag 4 */
    byte CCF5        :1;                                       /* Conversion Complete Flag 5 */
    byte CCF6        :1;                                       /* Conversion Complete Flag 6 */
    byte CCF7        :1;                                       /* Conversion Complete Flag 7 */
  } Bits;
  struct {
    byte grpCCF  :8;
  } MergedBits;
} ATDSTAT1STR;
extern volatile ATDSTAT1STR _ATDSTAT1 @(REG_BASE + 0x0000008B);
#define ATDSTAT1 _ATDSTAT1.Byte
#define ATDSTAT1_CCF0 _ATDSTAT1.Bits.CCF0
#define ATDSTAT1_CCF1 _ATDSTAT1.Bits.CCF1
#define ATDSTAT1_CCF2 _ATDSTAT1.Bits.CCF2
#define ATDSTAT1_CCF3 _ATDSTAT1.Bits.CCF3
#define ATDSTAT1_CCF4 _ATDSTAT1.Bits.CCF4
#define ATDSTAT1_CCF5 _ATDSTAT1.Bits.CCF5
#define ATDSTAT1_CCF6 _ATDSTAT1.Bits.CCF6
#define ATDSTAT1_CCF7 _ATDSTAT1.Bits.CCF7
#define ATDSTAT1_CCF _ATDSTAT1.MergedBits.grpCCF


/*** PORTAD0 - Port AD0 Register; 0x0000008E ***/
typedef union {
  byte Byte;
  struct {
    byte PTAD8       :1;                                       /* Port AD Bit 8 */
    byte PTAD9       :1;                                       /* Port AD Bit 9 */
    byte PTAD10      :1;                                       /* Port AD Bit 10 */
    byte PTAD11      :1;                                       /* Port AD Bit 11 */
    byte PTAD12      :1;                                       /* Port AD Bit 12 */
    byte PTAD13      :1;                                       /* Port AD Bit 13 */
    byte PTAD14      :1;                                       /* Port AD Bit 14 */
    byte PTAD15      :1;                                       /* Port AD Bit 15 */
  } Bits;
  struct {
    byte grpPTAD_8 :8;
  } MergedBits;
} PORTAD0STR;
extern volatile PORTAD0STR _PORTAD0 @(REG_BASE + 0x0000008E);
#define PORTAD0 _PORTAD0.Byte
#define PORTAD0_PTAD8 _PORTAD0.Bits.PTAD8
#define PORTAD0_PTAD9 _PORTAD0.Bits.PTAD9
#define PORTAD0_PTAD10 _PORTAD0.Bits.PTAD10
#define PORTAD0_PTAD11 _PORTAD0.Bits.PTAD11
#define PORTAD0_PTAD12 _PORTAD0.Bits.PTAD12
#define PORTAD0_PTAD13 _PORTAD0.Bits.PTAD13
#define PORTAD0_PTAD14 _PORTAD0.Bits.PTAD14
#define PORTAD0_PTAD15 _PORTAD0.Bits.PTAD15
#define PORTAD0_PTAD_8 _PORTAD0.MergedBits.grpPTAD_8
#define PORTAD0_PTAD PORTAD0_PTAD_8


/*** PORTAD1 - Port AD1 Register; 0x0000008F ***/
typedef union {
  byte Byte;
  struct {
    byte PTAD0       :1;                                       /* Port AD Bit 0 */
    byte PTAD1       :1;                                       /* Port AD Bit 1 */
    byte PTAD2       :1;                                       /* Port AD Bit 2 */
    byte PTAD3       :1;                                       /* Port AD Bit 3 */
    byte PTAD4       :1;                                       /* Port AD Bit 4 */
    byte PTAD5       :1;                                       /* Port AD Bit 5 */
    byte PTAD6       :1;                                       /* Port AD Bit 6 */
    byte PTAD7       :1;                                       /* Port AD Bit 7 */
  } Bits;
  struct {
    byte grpPTAD :8;
  } MergedBits;
} PORTAD1STR;
extern volatile PORTAD1STR _PORTAD1 @(REG_BASE + 0x0000008F);
#define PORTAD1 _PORTAD1.Byte
#define PORTAD1_PTAD0 _PORTAD1.Bits.PTAD0
#define PORTAD1_PTAD1 _PORTAD1.Bits.PTAD1
#define PORTAD1_PTAD2 _PORTAD1.Bits.PTAD2
#define PORTAD1_PTAD3 _PORTAD1.Bits.PTAD3
#define PORTAD1_PTAD4 _PORTAD1.Bits.PTAD4
#define PORTAD1_PTAD5 _PORTAD1.Bits.PTAD5
#define PORTAD1_PTAD6 _PORTAD1.Bits.PTAD6
#define PORTAD1_PTAD7 _PORTAD1.Bits.PTAD7
#define PORTAD1_PTAD _PORTAD1.MergedBits.grpPTAD


/*** SCI0CR1 - SCI 0 Control Register 1; 0x000000CA ***/
typedef union {
  byte Byte;
  struct {
    byte PT          :1;                                       /* Parity Type Bit */
    byte PE          :1;                                       /* Parity Enable Bit */
    byte ILT         :1;                                       /* Idle Line Type Bit */
    byte WAKE        :1;                                       /* Wakeup Condition Bit */
    byte M           :1;                                       /* Data Format Mode Bit */
    byte RSRC        :1;                                       /* Receiver Source Bit */
    byte SCISWAI     :1;                                       /* SCI Stop in Wait Mode Bit */
    byte LOOPS       :1;                                       /* Loop Select Bit */
  } Bits;
} SCI0CR1STR;
extern volatile SCI0CR1STR _SCI0CR1 @(REG_BASE + 0x000000CA);
#define SCI0CR1 _SCI0CR1.Byte
#define SCI0CR1_PT _SCI0CR1.Bits.PT
#define SCI0CR1_PE _SCI0CR1.Bits.PE
#define SCI0CR1_ILT _SCI0CR1.Bits.ILT
#define SCI0CR1_WAKE _SCI0CR1.Bits.WAKE
#define SCI0CR1_M _SCI0CR1.Bits.M
#define SCI0CR1_RSRC _SCI0CR1.Bits.RSRC
#define SCI0CR1_SCISWAI _SCI0CR1.Bits.SCISWAI
#define SCI0CR1_LOOPS _SCI0CR1.Bits.LOOPS


/*** SCI0CR2 - SCI 0 Control Register 2; 0x000000CB ***/
typedef union {
  byte Byte;
  struct {
    byte SBK         :1;                                       /* Send Break Bit */
    byte RWU         :1;                                       /* Receiver Wakeup Bit */
    byte RE          :1;                                       /* Receiver Enable Bit */
    byte TE          :1;                                       /* Transmitter Enable Bit */
    byte ILIE        :1;                                       /* Idle Line Interrupt Enable Bit */
    byte RIE         :1;                                       /* Receiver Full Interrupt Enable Bit */
    byte TCIE        :1;                                       /* Transmission Complete Interrupt Enable Bit */
    byte SCTIE       :1;                                       /* Transmitter Interrupt Enable Bit */
  } Bits;
} SCI0CR2STR;
extern volatile SCI0CR2STR _SCI0CR2 @(REG_BASE + 0x000000CB);
#define SCI0CR2 _SCI0CR2.Byte
#define SCI0CR2_SBK _SCI0CR2.Bits.SBK
#define SCI0CR2_RWU _SCI0CR2.Bits.RWU
#define SCI0CR2_RE _SCI0CR2.Bits.RE
#define SCI0CR2_TE _SCI0CR2.Bits.TE
#define SCI0CR2_ILIE _SCI0CR2.Bits.ILIE
#define SCI0CR2_RIE _SCI0CR2.Bits.RIE
#define SCI0CR2_TCIE _SCI0CR2.Bits.TCIE
#define SCI0CR2_SCTIE _SCI0CR2.Bits.SCTIE


/*** SCI0SR1 - SCI 0 Status Register 1; 0x000000CC ***/
typedef union {
  byte Byte;
  struct {
    byte PF          :1;                                       /* Parity Error Flag */
    byte FE          :1;                                       /* Framing Error Flag */
    byte NF          :1;                                       /* Noise Flag */
    byte OR          :1;                                       /* Overrun Flag */
    byte IDLE        :1;                                       /* Idle Line Flag */
    byte RDRF        :1;                                       /* Receive Data Register Full Flag */
    byte TC          :1;                                       /* Transmit Complete Flag */
    byte TDRE        :1;                                       /* Transmit Data Register Empty Flag */
  } Bits;
} SCI0SR1STR;
extern volatile SCI0SR1STR _SCI0SR1 @(REG_BASE + 0x000000CC);
#define SCI0SR1 _SCI0SR1.Byte
#define SCI0SR1_PF _SCI0SR1.Bits.PF
#define SCI0SR1_FE _SCI0SR1.Bits.FE
#define SCI0SR1_NF _SCI0SR1.Bits.NF
#define SCI0SR1_OR _SCI0SR1.Bits.OR
#define SCI0SR1_IDLE _SCI0SR1.Bits.IDLE
#define SCI0SR1_RDRF _SCI0SR1.Bits.RDRF
#define SCI0SR1_TC _SCI0SR1.Bits.TC
#define SCI0SR1_TDRE _SCI0SR1.Bits.TDRE


/*** SCI0SR2 - SCI 0 Status Register 2; 0x000000CD ***/
typedef union {
  byte Byte;
  struct {
    byte RAF         :1;                                       /* Receiver Active Flag */
    byte TXDIR       :1;                                       /* Transmitter pin data direction in Single-Wire mode */
    byte BRK13       :1;                                       /* Break Transmit character length */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} SCI0SR2STR;
extern volatile SCI0SR2STR _SCI0SR2 @(REG_BASE + 0x000000CD);
#define SCI0SR2 _SCI0SR2.Byte
#define SCI0SR2_RAF _SCI0SR2.Bits.RAF
#define SCI0SR2_TXDIR _SCI0SR2.Bits.TXDIR
#define SCI0SR2_BRK13 _SCI0SR2.Bits.BRK13


/*** SCI0DRH - SCI 0 Data Register High; 0x000000CE ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte T8          :1;                                       /* Transmit Bit 8 */
    byte R8          :1;                                       /* Received Bit 8 */
  } Bits;
} SCI0DRHSTR;
extern volatile SCI0DRHSTR _SCI0DRH @(REG_BASE + 0x000000CE);
#define SCI0DRH _SCI0DRH.Byte
#define SCI0DRH_T8 _SCI0DRH.Bits.T8
#define SCI0DRH_R8 _SCI0DRH.Bits.R8


/*** SCI0DRL - SCI 0 Data Register Low; 0x000000CF ***/
typedef union {
  byte Byte;
  struct {
    byte R0_T0       :1;                                       /* Received bit 0 or Transmit bit 0 */
    byte R1_T1       :1;                                       /* Received bit 1 or Transmit bit 1 */
    byte R2_T2       :1;                                       /* Received bit 2 or Transmit bit 2 */
    byte R3_T3       :1;                                       /* Received bit 3 or Transmit bit 3 */
    byte R4_T4       :1;                                       /* Received bit 4 or Transmit bit 4 */
    byte R5_T5       :1;                                       /* Received bit 5 or Transmit bit 5 */
    byte R6_T6       :1;                                       /* Received bit 6 or Transmit bit 6 */
    byte R7_T7       :1;                                       /* Received bit 7 or Transmit bit 7 */
  } Bits;
} SCI0DRLSTR;
extern volatile SCI0DRLSTR _SCI0DRL @(REG_BASE + 0x000000CF);
#define SCI0DRL _SCI0DRL.Byte
#define SCI0DRL_R0_T0 _SCI0DRL.Bits.R0_T0
#define SCI0DRL_R1_T1 _SCI0DRL.Bits.R1_T1
#define SCI0DRL_R2_T2 _SCI0DRL.Bits.R2_T2
#define SCI0DRL_R3_T3 _SCI0DRL.Bits.R3_T3
#define SCI0DRL_R4_T4 _SCI0DRL.Bits.R4_T4
#define SCI0DRL_R5_T5 _SCI0DRL.Bits.R5_T5
#define SCI0DRL_R6_T6 _SCI0DRL.Bits.R6_T6
#define SCI0DRL_R7_T7 _SCI0DRL.Bits.R7_T7


/*** SCI1CR1 - SCI 1 Control Register 1; 0x000000D2 ***/
typedef union {
  byte Byte;
  struct {
    byte PT          :1;                                       /* Parity Type Bit */
    byte PE          :1;                                       /* Parity Enable Bit */
    byte ILT         :1;                                       /* Idle Line Type Bit */
    byte WAKE        :1;                                       /* Wakeup Condition Bit */
    byte M           :1;                                       /* Data Format Mode Bit */
    byte RSRC        :1;                                       /* Receiver Source Bit */
    byte SCISWAI     :1;                                       /* SCI Stop in Wait Mode Bit */
    byte LOOPS       :1;                                       /* Loop Select Bit */
  } Bits;
} SCI1CR1STR;
extern volatile SCI1CR1STR _SCI1CR1 @(REG_BASE + 0x000000D2);
#define SCI1CR1 _SCI1CR1.Byte
#define SCI1CR1_PT _SCI1CR1.Bits.PT
#define SCI1CR1_PE _SCI1CR1.Bits.PE
#define SCI1CR1_ILT _SCI1CR1.Bits.ILT
#define SCI1CR1_WAKE _SCI1CR1.Bits.WAKE
#define SCI1CR1_M _SCI1CR1.Bits.M
#define SCI1CR1_RSRC _SCI1CR1.Bits.RSRC
#define SCI1CR1_SCISWAI _SCI1CR1.Bits.SCISWAI
#define SCI1CR1_LOOPS _SCI1CR1.Bits.LOOPS


/*** SCI1CR2 - SCI 1 Control Register 2; 0x000000D3 ***/
typedef union {
  byte Byte;
  struct {
    byte SBK         :1;                                       /* Send Break Bit */
    byte RWU         :1;                                       /* Receiver Wakeup Bit */
    byte RE          :1;                                       /* Receiver Enable Bit */
    byte TE          :1;                                       /* Transmitter Enable Bit */
    byte ILIE        :1;                                       /* Idle Line Interrupt Enable Bit */
    byte RIE         :1;                                       /* Receiver Full Interrupt Enable Bit */
    byte TCIE        :1;                                       /* Transmission Complete Interrupt Enable Bit */
    byte SCTIE       :1;                                       /* Transmitter Interrupt Enable Bit */
  } Bits;
} SCI1CR2STR;
extern volatile SCI1CR2STR _SCI1CR2 @(REG_BASE + 0x000000D3);
#define SCI1CR2 _SCI1CR2.Byte
#define SCI1CR2_SBK _SCI1CR2.Bits.SBK
#define SCI1CR2_RWU _SCI1CR2.Bits.RWU
#define SCI1CR2_RE _SCI1CR2.Bits.RE
#define SCI1CR2_TE _SCI1CR2.Bits.TE
#define SCI1CR2_ILIE _SCI1CR2.Bits.ILIE
#define SCI1CR2_RIE _SCI1CR2.Bits.RIE
#define SCI1CR2_TCIE _SCI1CR2.Bits.TCIE
#define SCI1CR2_SCTIE _SCI1CR2.Bits.SCTIE


/*** SCI1SR1 - SCI 1 Status Register 1; 0x000000D4 ***/
typedef union {
  byte Byte;
  struct {
    byte PF          :1;                                       /* Parity Error Flag */
    byte FE          :1;                                       /* Framing Error Flag */
    byte NF          :1;                                       /* Noise Flag */
    byte OR          :1;                                       /* Overrun Flag */
    byte IDLE        :1;                                       /* Idle Line Flag */
    byte RDRF        :1;                                       /* Receive Data Register Full Flag */
    byte TC          :1;                                       /* Transmit Complete Flag */
    byte TDRE        :1;                                       /* Transmit Data Register Empty Flag */
  } Bits;
} SCI1SR1STR;
extern volatile SCI1SR1STR _SCI1SR1 @(REG_BASE + 0x000000D4);
#define SCI1SR1 _SCI1SR1.Byte
#define SCI1SR1_PF _SCI1SR1.Bits.PF
#define SCI1SR1_FE _SCI1SR1.Bits.FE
#define SCI1SR1_NF _SCI1SR1.Bits.NF
#define SCI1SR1_OR _SCI1SR1.Bits.OR
#define SCI1SR1_IDLE _SCI1SR1.Bits.IDLE
#define SCI1SR1_RDRF _SCI1SR1.Bits.RDRF
#define SCI1SR1_TC _SCI1SR1.Bits.TC
#define SCI1SR1_TDRE _SCI1SR1.Bits.TDRE


/*** SCI1SR2 - SCI 1 Status Register 2; 0x000000D5 ***/
typedef union {
  byte Byte;
  struct {
    byte RAF         :1;                                       /* Receiver Active Flag */
    byte TXDIR       :1;                                       /* Transmitter pin data direction in Single-Wire mode */
    byte BRK13       :1;                                       /* Break Transmit character length */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} SCI1SR2STR;
extern volatile SCI1SR2STR _SCI1SR2 @(REG_BASE + 0x000000D5);
#define SCI1SR2 _SCI1SR2.Byte
#define SCI1SR2_RAF _SCI1SR2.Bits.RAF
#define SCI1SR2_TXDIR _SCI1SR2.Bits.TXDIR
#define SCI1SR2_BRK13 _SCI1SR2.Bits.BRK13


/*** SCI1DRH - SCI 1 Data Register High; 0x000000D6 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte T8          :1;                                       /* Transmit Bit 8 */
    byte R8          :1;                                       /* Received Bit 8 */
  } Bits;
} SCI1DRHSTR;
extern volatile SCI1DRHSTR _SCI1DRH @(REG_BASE + 0x000000D6);
#define SCI1DRH _SCI1DRH.Byte
#define SCI1DRH_T8 _SCI1DRH.Bits.T8
#define SCI1DRH_R8 _SCI1DRH.Bits.R8


/*** SCI1DRL - SCI 1 Data Register Low; 0x000000D7 ***/
typedef union {
  byte Byte;
  struct {
    byte R0_T0       :1;                                       /* Received bit 0 or Transmit bit 0 */
    byte R1_T1       :1;                                       /* Received bit 1 or Transmit bit 1 */
    byte R2_T2       :1;                                       /* Received bit 2 or Transmit bit 2 */
    byte R3_T3       :1;                                       /* Received bit 3 or Transmit bit 3 */
    byte R4_T4       :1;                                       /* Received bit 4 or Transmit bit 4 */
    byte R5_T5       :1;                                       /* Received bit 5 or Transmit bit 5 */
    byte R6_T6       :1;                                       /* Received bit 6 or Transmit bit 6 */
    byte R7_T7       :1;                                       /* Received bit 7 or Transmit bit 7 */
  } Bits;
} SCI1DRLSTR;
extern volatile SCI1DRLSTR _SCI1DRL @(REG_BASE + 0x000000D7);
#define SCI1DRL _SCI1DRL.Byte
#define SCI1DRL_R0_T0 _SCI1DRL.Bits.R0_T0
#define SCI1DRL_R1_T1 _SCI1DRL.Bits.R1_T1
#define SCI1DRL_R2_T2 _SCI1DRL.Bits.R2_T2
#define SCI1DRL_R3_T3 _SCI1DRL.Bits.R3_T3
#define SCI1DRL_R4_T4 _SCI1DRL.Bits.R4_T4
#define SCI1DRL_R5_T5 _SCI1DRL.Bits.R5_T5
#define SCI1DRL_R6_T6 _SCI1DRL.Bits.R6_T6
#define SCI1DRL_R7_T7 _SCI1DRL.Bits.R7_T7


/*** SPICR1 - SPI Control Register; 0x000000D8 ***/
typedef union {
  byte Byte;
  struct {
    byte LSBFE       :1;                                       /* SPI LSB-First Enable */
    byte SSOE        :1;                                       /* Slave Select Output Enable */
    byte CPHA        :1;                                       /* SPI Clock Phase Bit */
    byte CPOL        :1;                                       /* SPI Clock Polarity Bit */
    byte MSTR        :1;                                       /* SPI Master/Slave Mode Select Bit */
    byte SPTIE       :1;                                       /* SPI Transmit Interrupt Enable */
    byte SPE         :1;                                       /* SPI System Enable Bit */
    byte SPIE        :1;                                       /* SPI Interrupt Enable Bit */
  } Bits;
} SPICR1STR;
extern volatile SPICR1STR _SPICR1 @(REG_BASE + 0x000000D8);
#define SPICR1 _SPICR1.Byte
#define SPICR1_LSBFE _SPICR1.Bits.LSBFE
#define SPICR1_SSOE _SPICR1.Bits.SSOE
#define SPICR1_CPHA _SPICR1.Bits.CPHA
#define SPICR1_CPOL _SPICR1.Bits.CPOL
#define SPICR1_MSTR _SPICR1.Bits.MSTR
#define SPICR1_SPTIE _SPICR1.Bits.SPTIE
#define SPICR1_SPE _SPICR1.Bits.SPE
#define SPICR1_SPIE _SPICR1.Bits.SPIE


/*** SPICR2 - SPI Control Register 2; 0x000000D9 ***/
typedef union {
  byte Byte;
  struct {
    byte SPC0        :1;                                       /* Serial Pin Control Bit 0 */
    byte SPISWAI     :1;                                       /* SPI Stop in Wait Mode Bit */
    byte             :1; 
    byte BIDIROE     :1;                                       /* Output enable in the Bidirectional mode of operation */
    byte MODFEN      :1;                                       /* Mode Fault Enable Bit */
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} SPICR2STR;
extern volatile SPICR2STR _SPICR2 @(REG_BASE + 0x000000D9);
#define SPICR2 _SPICR2.Byte
#define SPICR2_SPC0 _SPICR2.Bits.SPC0
#define SPICR2_SPISWAI _SPICR2.Bits.SPISWAI
#define SPICR2_BIDIROE _SPICR2.Bits.BIDIROE
#define SPICR2_MODFEN _SPICR2.Bits.MODFEN


/*** SPIBR - SPI Baud Rate Register; 0x000000DA ***/
typedef union {
  byte Byte;
  struct {
    byte SPR0        :1;                                       /* SPI Baud Rate Selection Bit 0 */
    byte SPR1        :1;                                       /* SPI Baud Rate Selection Bit 1 */
    byte SPR2        :1;                                       /* SPI Baud Rate Selection Bit 2 */
    byte             :1; 
    byte SPPR0       :1;                                       /* SPI Baud Rate Preselection Bits 0 */
    byte SPPR1       :1;                                       /* SPI Baud Rate Preselection Bits 1 */
    byte SPPR2       :1;                                       /* SPI Baud Rate Preselection Bits 2 */
    byte             :1; 
  } Bits;
  struct {
    byte grpSPR  :3;
    byte         :1;
    byte grpSPPR :3;
    byte         :1;
  } MergedBits;
} SPIBRSTR;
extern volatile SPIBRSTR _SPIBR @(REG_BASE + 0x000000DA);
#define SPIBR _SPIBR.Byte
#define SPIBR_SPR0 _SPIBR.Bits.SPR0
#define SPIBR_SPR1 _SPIBR.Bits.SPR1
#define SPIBR_SPR2 _SPIBR.Bits.SPR2
#define SPIBR_SPPR0 _SPIBR.Bits.SPPR0
#define SPIBR_SPPR1 _SPIBR.Bits.SPPR1
#define SPIBR_SPPR2 _SPIBR.Bits.SPPR2
#define SPIBR_SPR _SPIBR.MergedBits.grpSPR
#define SPIBR_SPPR _SPIBR.MergedBits.grpSPPR


/*** SPISR - SPI Status Register; 0x000000DB ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte MODF        :1;                                       /* Mode Fault Flag */
    byte SPTEF       :1;                                       /* SPI Transmit Empty Interrupt Flag */
    byte             :1; 
    byte SPIF        :1;                                       /* SPIF Receive Interrupt Flag */
  } Bits;
} SPISRSTR;
extern volatile SPISRSTR _SPISR @(REG_BASE + 0x000000DB);
#define SPISR _SPISR.Byte
#define SPISR_MODF _SPISR.Bits.MODF
#define SPISR_SPTEF _SPISR.Bits.SPTEF
#define SPISR_SPIF _SPISR.Bits.SPIF


/*** SPIDR - SPI Data Register; 0x000000DD ***/
typedef union {
  byte Byte;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} SPIDRSTR;
extern volatile SPIDRSTR _SPIDR @(REG_BASE + 0x000000DD);
#define SPIDR _SPIDR.Byte
#define SPIDR_BIT _SPIDR.MergedBits.grpBIT


/*** IBAD - IIC Address Register; 0x000000E0 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte ADR1        :1;                                       /* Slave Address Bit 1 */
    byte ADR2        :1;                                       /* Slave Address Bit 2 */
    byte ADR3        :1;                                       /* Slave Address Bit 3 */
    byte ADR4        :1;                                       /* Slave Address Bit 4 */
    byte ADR5        :1;                                       /* Slave Address Bit 5 */
    byte ADR6        :1;                                       /* Slave Address Bit 6 */
    byte ADR7        :1;                                       /* Slave Address Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte grpADR_1 :7;
  } MergedBits;
} IBADSTR;
extern volatile IBADSTR _IBAD @(REG_BASE + 0x000000E0);
#define IBAD _IBAD.Byte
#define IBAD_ADR1 _IBAD.Bits.ADR1
#define IBAD_ADR2 _IBAD.Bits.ADR2
#define IBAD_ADR3 _IBAD.Bits.ADR3
#define IBAD_ADR4 _IBAD.Bits.ADR4
#define IBAD_ADR5 _IBAD.Bits.ADR5
#define IBAD_ADR6 _IBAD.Bits.ADR6
#define IBAD_ADR7 _IBAD.Bits.ADR7
#define IBAD_ADR_1 _IBAD.MergedBits.grpADR_1
#define IBAD_ADR IBAD_ADR_1


/*** IBFD - IIC Frequency Divider Register; 0x000000E1 ***/
typedef union {
  byte Byte;
  struct {
    byte IBC0        :1;                                       /* I-Bus Clock Rate 0 */
    byte IBC1        :1;                                       /* I-Bus Clock Rate 1 */
    byte IBC2        :1;                                       /* I-Bus Clock Rate 2 */
    byte IBC3        :1;                                       /* I-Bus Clock Rate 3 */
    byte IBC4        :1;                                       /* I-Bus Clock Rate 4 */
    byte IBC5        :1;                                       /* I-Bus Clock Rate 5 */
    byte IBC6        :1;                                       /* I-Bus Clock Rate 6 */
    byte IBC7        :1;                                       /* I-Bus Clock Rate 7 */
  } Bits;
  struct {
    byte grpIBC  :8;
  } MergedBits;
} IBFDSTR;
extern volatile IBFDSTR _IBFD @(REG_BASE + 0x000000E1);
#define IBFD _IBFD.Byte
#define IBFD_IBC0 _IBFD.Bits.IBC0
#define IBFD_IBC1 _IBFD.Bits.IBC1
#define IBFD_IBC2 _IBFD.Bits.IBC2
#define IBFD_IBC3 _IBFD.Bits.IBC3
#define IBFD_IBC4 _IBFD.Bits.IBC4
#define IBFD_IBC5 _IBFD.Bits.IBC5
#define IBFD_IBC6 _IBFD.Bits.IBC6
#define IBFD_IBC7 _IBFD.Bits.IBC7
#define IBFD_IBC _IBFD.MergedBits.grpIBC


/*** IBCR - IIC Control Register; 0x000000E2 ***/
typedef union {
  byte Byte;
  struct {
    byte IBSWAI      :1;                                       /* I-Bus Interface Stop in WAIT mode */
    byte             :1; 
    byte RSTA        :1;                                       /* Repeat Start */
    byte TXAK        :1;                                       /* Transmit Acknowledge enable */
    byte TX_RX       :1;                                       /* Transmit/Receive mode select bit */
    byte MS_SL       :1;                                       /* Master/Slave mode select bit */
    byte IBIE        :1;                                       /* I-Bus Interrupt Enable */
    byte IBEN        :1;                                       /* I-Bus Enable */
  } Bits;
} IBCRSTR;
extern volatile IBCRSTR _IBCR @(REG_BASE + 0x000000E2);
#define IBCR _IBCR.Byte
#define IBCR_IBSWAI _IBCR.Bits.IBSWAI
#define IBCR_RSTA _IBCR.Bits.RSTA
#define IBCR_TXAK _IBCR.Bits.TXAK
#define IBCR_TX_RX _IBCR.Bits.TX_RX
#define IBCR_MS_SL _IBCR.Bits.MS_SL
#define IBCR_IBIE _IBCR.Bits.IBIE
#define IBCR_IBEN _IBCR.Bits.IBEN


/*** IBSR - IIC Status Register; 0x000000E3 ***/
typedef union {
  byte Byte;
  struct {
    byte RXAK        :1;                                       /* Received Acknowledge */
    byte IBIF        :1;                                       /* I-Bus Interrupt */
    byte SRW         :1;                                       /* Slave Read/Write */
    byte             :1; 
    byte IBAL        :1;                                       /* Arbitration Lost */
    byte IBB         :1;                                       /* Bus busy bit */
    byte IAAS        :1;                                       /* Addressed as a slave bit */
    byte TCF         :1;                                       /* Data transferring bit */
  } Bits;
} IBSRSTR;
extern volatile IBSRSTR _IBSR @(REG_BASE + 0x000000E3);
#define IBSR _IBSR.Byte
#define IBSR_RXAK _IBSR.Bits.RXAK
#define IBSR_IBIF _IBSR.Bits.IBIF
#define IBSR_SRW _IBSR.Bits.SRW
#define IBSR_IBAL _IBSR.Bits.IBAL
#define IBSR_IBB _IBSR.Bits.IBB
#define IBSR_IAAS _IBSR.Bits.IAAS
#define IBSR_TCF _IBSR.Bits.TCF


/*** IBDR - IIC Data I/O Register; 0x000000E4 ***/
typedef union {
  byte Byte;
  struct {
    byte D0          :1;                                       /* IIC Data Bit 0 */
    byte D1          :1;                                       /* IIC Data Bit 1 */
    byte D2          :1;                                       /* IIC Data Bit 2 */
    byte D3          :1;                                       /* IIC Data Bit 3 */
    byte D4          :1;                                       /* IIC Data Bit 4 */
    byte D5          :1;                                       /* IIC Data Bit 5 */
    byte D6          :1;                                       /* IIC Data Bit 6 */
    byte D7          :1;                                       /* IIC Data Bit 7 */
  } Bits;
  struct {
    byte grpD    :8;
  } MergedBits;
} IBDRSTR;
extern volatile IBDRSTR _IBDR @(REG_BASE + 0x000000E4);
#define IBDR _IBDR.Byte
#define IBDR_D0 _IBDR.Bits.D0
#define IBDR_D1 _IBDR.Bits.D1
#define IBDR_D2 _IBDR.Bits.D2
#define IBDR_D3 _IBDR.Bits.D3
#define IBDR_D4 _IBDR.Bits.D4
#define IBDR_D5 _IBDR.Bits.D5
#define IBDR_D6 _IBDR.Bits.D6
#define IBDR_D7 _IBDR.Bits.D7
#define IBDR_D _IBDR.MergedBits.grpD


/*** SCI2CR1 - SCI 2 Control Register 1; 0x000000EA ***/
typedef union {
  byte Byte;
  struct {
    byte PT          :1;                                       /* Parity Type Bit */
    byte PE          :1;                                       /* Parity Enable Bit */
    byte ILT         :1;                                       /* Idle Line Type Bit */
    byte WAKE        :1;                                       /* Wakeup Condition Bit */
    byte M           :1;                                       /* Data Format Mode Bit */
    byte RSRC        :1;                                       /* Receiver Source Bit */
    byte SCISWAI     :1;                                       /* SCI Stop in Wait Mode Bit */
    byte LOOPS       :1;                                       /* Loop Select Bit */
  } Bits;
} SCI2CR1STR;
extern volatile SCI2CR1STR _SCI2CR1 @(REG_BASE + 0x000000EA);
#define SCI2CR1 _SCI2CR1.Byte
#define SCI2CR1_PT _SCI2CR1.Bits.PT
#define SCI2CR1_PE _SCI2CR1.Bits.PE
#define SCI2CR1_ILT _SCI2CR1.Bits.ILT
#define SCI2CR1_WAKE _SCI2CR1.Bits.WAKE
#define SCI2CR1_M _SCI2CR1.Bits.M
#define SCI2CR1_RSRC _SCI2CR1.Bits.RSRC
#define SCI2CR1_SCISWAI _SCI2CR1.Bits.SCISWAI
#define SCI2CR1_LOOPS _SCI2CR1.Bits.LOOPS


/*** SCI2CR2 - SCI 2 Control Register 2; 0x000000EB ***/
typedef union {
  byte Byte;
  struct {
    byte SBK         :1;                                       /* Send Break Bit */
    byte RWU         :1;                                       /* Receiver Wakeup Bit */
    byte RE          :1;                                       /* Receiver Enable Bit */
    byte TE          :1;                                       /* Transmitter Enable Bit */
    byte ILIE        :1;                                       /* Idle Line Interrupt Enable Bit */
    byte RIE         :1;                                       /* Receiver Full Interrupt Enable Bit */
    byte TCIE        :1;                                       /* Transmission Complete Interrupt Enable Bit */
    byte SCTIE       :1;                                       /* Transmitter Interrupt Enable Bit */
  } Bits;
} SCI2CR2STR;
extern volatile SCI2CR2STR _SCI2CR2 @(REG_BASE + 0x000000EB);
#define SCI2CR2 _SCI2CR2.Byte
#define SCI2CR2_SBK _SCI2CR2.Bits.SBK
#define SCI2CR2_RWU _SCI2CR2.Bits.RWU
#define SCI2CR2_RE _SCI2CR2.Bits.RE
#define SCI2CR2_TE _SCI2CR2.Bits.TE
#define SCI2CR2_ILIE _SCI2CR2.Bits.ILIE
#define SCI2CR2_RIE _SCI2CR2.Bits.RIE
#define SCI2CR2_TCIE _SCI2CR2.Bits.TCIE
#define SCI2CR2_SCTIE _SCI2CR2.Bits.SCTIE


/*** SCI2SR1 - SCI 2 Status Register 1; 0x000000EC ***/
typedef union {
  byte Byte;
  struct {
    byte PF          :1;                                       /* Parity Error Flag */
    byte FE          :1;                                       /* Framing Error Flag */
    byte NF          :1;                                       /* Noise Flag */
    byte OR          :1;                                       /* Overrun Flag */
    byte IDLE        :1;                                       /* Idle Line Flag */
    byte RDRF        :1;                                       /* Receive Data Register Full Flag */
    byte TC          :1;                                       /* Transmit Complete Flag */
    byte TDRE        :1;                                       /* Transmit Data Register Empty Flag */
  } Bits;
} SCI2SR1STR;
extern volatile SCI2SR1STR _SCI2SR1 @(REG_BASE + 0x000000EC);
#define SCI2SR1 _SCI2SR1.Byte
#define SCI2SR1_PF _SCI2SR1.Bits.PF
#define SCI2SR1_FE _SCI2SR1.Bits.FE
#define SCI2SR1_NF _SCI2SR1.Bits.NF
#define SCI2SR1_OR _SCI2SR1.Bits.OR
#define SCI2SR1_IDLE _SCI2SR1.Bits.IDLE
#define SCI2SR1_RDRF _SCI2SR1.Bits.RDRF
#define SCI2SR1_TC _SCI2SR1.Bits.TC
#define SCI2SR1_TDRE _SCI2SR1.Bits.TDRE


/*** SCI2SR2 - SCI 2 Status Register 2; 0x000000ED ***/
typedef union {
  byte Byte;
  struct {
    byte RAF         :1;                                       /* Receiver Active Flag */
    byte TXDIR       :1;                                       /* Transmitter pin data direction in Single-Wire mode */
    byte BRK13       :1;                                       /* Break Transmit character length */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} SCI2SR2STR;
extern volatile SCI2SR2STR _SCI2SR2 @(REG_BASE + 0x000000ED);
#define SCI2SR2 _SCI2SR2.Byte
#define SCI2SR2_RAF _SCI2SR2.Bits.RAF
#define SCI2SR2_TXDIR _SCI2SR2.Bits.TXDIR
#define SCI2SR2_BRK13 _SCI2SR2.Bits.BRK13


/*** SCI2DRH - SCI 2 Data Register High; 0x000000EE ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte T8          :1;                                       /* Transmit Bit 8 */
    byte R8          :1;                                       /* Received Bit 8 */
  } Bits;
} SCI2DRHSTR;
extern volatile SCI2DRHSTR _SCI2DRH @(REG_BASE + 0x000000EE);
#define SCI2DRH _SCI2DRH.Byte
#define SCI2DRH_T8 _SCI2DRH.Bits.T8
#define SCI2DRH_R8 _SCI2DRH.Bits.R8


/*** SCI2DRL - SCI 2 Data Register Low; 0x000000EF ***/
typedef union {
  byte Byte;
  struct {
    byte R0_T0       :1;                                       /* Received bit 0 or Transmit bit 0 */
    byte R1_T1       :1;                                       /* Received bit 1 or Transmit bit 1 */
    byte R2_T2       :1;                                       /* Received bit 2 or Transmit bit 2 */
    byte R3_T3       :1;                                       /* Received bit 3 or Transmit bit 3 */
    byte R4_T4       :1;                                       /* Received bit 4 or Transmit bit 4 */
    byte R5_T5       :1;                                       /* Received bit 5 or Transmit bit 5 */
    byte R6_T6       :1;                                       /* Received bit 6 or Transmit bit 6 */
    byte R7_T7       :1;                                       /* Received bit 7 or Transmit bit 7 */
  } Bits;
} SCI2DRLSTR;
extern volatile SCI2DRLSTR _SCI2DRL @(REG_BASE + 0x000000EF);
#define SCI2DRL _SCI2DRL.Byte
#define SCI2DRL_R0_T0 _SCI2DRL.Bits.R0_T0
#define SCI2DRL_R1_T1 _SCI2DRL.Bits.R1_T1
#define SCI2DRL_R2_T2 _SCI2DRL.Bits.R2_T2
#define SCI2DRL_R3_T3 _SCI2DRL.Bits.R3_T3
#define SCI2DRL_R4_T4 _SCI2DRL.Bits.R4_T4
#define SCI2DRL_R5_T5 _SCI2DRL.Bits.R5_T5
#define SCI2DRL_R6_T6 _SCI2DRL.Bits.R6_T6
#define SCI2DRL_R7_T7 _SCI2DRL.Bits.R7_T7


/*** DAC0_DACC0 - DAC0 Control Register 0; 0x000000F0 ***/
typedef union {
  byte Byte;
  struct {
    byte DACOE       :1;                                       /* DAC Output Enable */
    byte DACWAI      :1;                                       /* DAC Stop in WAIT mode */
    byte DSGN        :1;                                       /* Result Register Data Signed or Unsigned Representation */
    byte DJM         :1;                                       /* Data Register Data Justification */
    byte             :1; 
    byte             :1; 
    byte DACTE       :1;                                       /* DAC Test Enable */
    byte DACE        :1;                                       /* DAC Enable */
  } Bits;
} DAC0_DACC0STR;
extern volatile DAC0_DACC0STR _DAC0_DACC0 @(REG_BASE + 0x000000F0);
#define DAC0_DACC0 _DAC0_DACC0.Byte
#define DAC0_DACC0_DACOE _DAC0_DACC0.Bits.DACOE
#define DAC0_DACC0_DACWAI _DAC0_DACC0.Bits.DACWAI
#define DAC0_DACC0_DSGN _DAC0_DACC0.Bits.DSGN
#define DAC0_DACC0_DJM _DAC0_DACC0.Bits.DJM
#define DAC0_DACC0_DACTE _DAC0_DACC0.Bits.DACTE
#define DAC0_DACC0_DACE _DAC0_DACC0.Bits.DACE


/*** DAC0_DACDLeft - DAC0 Data Register - Left Justified; 0x000000F2 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Data Bit 0 */
    byte BIT1        :1;                                       /* Data Bit 1 */
    byte BIT2        :1;                                       /* Data Bit 2 */
    byte BIT3        :1;                                       /* Data Bit 3 */
    byte BIT4        :1;                                       /* Data Bit 4 */
    byte BIT5        :1;                                       /* Data Bit 5 */
    byte BIT6        :1;                                       /* Data Bit 6 */
    byte BIT7        :1;                                       /* Data Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DAC0_DACDLeftSTR;
extern volatile DAC0_DACDLeftSTR _DAC0_DACDLeft @(REG_BASE + 0x000000F2);
#define DAC0_DACDLeft _DAC0_DACDLeft.Byte
#define DAC0_DACDLeft_BIT0 _DAC0_DACDLeft.Bits.BIT0
#define DAC0_DACDLeft_BIT1 _DAC0_DACDLeft.Bits.BIT1
#define DAC0_DACDLeft_BIT2 _DAC0_DACDLeft.Bits.BIT2
#define DAC0_DACDLeft_BIT3 _DAC0_DACDLeft.Bits.BIT3
#define DAC0_DACDLeft_BIT4 _DAC0_DACDLeft.Bits.BIT4
#define DAC0_DACDLeft_BIT5 _DAC0_DACDLeft.Bits.BIT5
#define DAC0_DACDLeft_BIT6 _DAC0_DACDLeft.Bits.BIT6
#define DAC0_DACDLeft_BIT7 _DAC0_DACDLeft.Bits.BIT7
#define DAC0_DACDLeft_BIT _DAC0_DACDLeft.MergedBits.grpBIT


/*** DAC0_DACDRight - DAC0 Data Register - Right Justified; 0x000000F3 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Data Bit 0 */
    byte BIT1        :1;                                       /* Data Bit 1 */
    byte BIT2        :1;                                       /* Data Bit 2 */
    byte BIT3        :1;                                       /* Data Bit 3 */
    byte BIT4        :1;                                       /* Data Bit 4 */
    byte BIT5        :1;                                       /* Data Bit 5 */
    byte BIT6        :1;                                       /* Data Bit 6 */
    byte BIT7        :1;                                       /* Data Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DAC0_DACDRightSTR;
extern volatile DAC0_DACDRightSTR _DAC0_DACDRight @(REG_BASE + 0x000000F3);
#define DAC0_DACDRight _DAC0_DACDRight.Byte
#define DAC0_DACDRight_BIT0 _DAC0_DACDRight.Bits.BIT0
#define DAC0_DACDRight_BIT1 _DAC0_DACDRight.Bits.BIT1
#define DAC0_DACDRight_BIT2 _DAC0_DACDRight.Bits.BIT2
#define DAC0_DACDRight_BIT3 _DAC0_DACDRight.Bits.BIT3
#define DAC0_DACDRight_BIT4 _DAC0_DACDRight.Bits.BIT4
#define DAC0_DACDRight_BIT5 _DAC0_DACDRight.Bits.BIT5
#define DAC0_DACDRight_BIT6 _DAC0_DACDRight.Bits.BIT6
#define DAC0_DACDRight_BIT7 _DAC0_DACDRight.Bits.BIT7
#define DAC0_DACDRight_BIT _DAC0_DACDRight.MergedBits.grpBIT


/*** DAC1_DACC0 - DAC1Control Register 0; 0x000000F4 ***/
typedef union {
  byte Byte;
  struct {
    byte DACOE       :1;                                       /* DAC Output Enable */
    byte DACWAI      :1;                                       /* DAC Stop in WAIT mode */
    byte DSGN        :1;                                       /* Result Register Data Signed or Unsigned Representation */
    byte DJM         :1;                                       /* Data Register Data Justification */
    byte             :1; 
    byte             :1; 
    byte DACTE       :1;                                       /* DAC Test Enable */
    byte DACE        :1;                                       /* DAC Enable */
  } Bits;
} DAC1_DACC0STR;
extern volatile DAC1_DACC0STR _DAC1_DACC0 @(REG_BASE + 0x000000F4);
#define DAC1_DACC0 _DAC1_DACC0.Byte
#define DAC1_DACC0_DACOE _DAC1_DACC0.Bits.DACOE
#define DAC1_DACC0_DACWAI _DAC1_DACC0.Bits.DACWAI
#define DAC1_DACC0_DSGN _DAC1_DACC0.Bits.DSGN
#define DAC1_DACC0_DJM _DAC1_DACC0.Bits.DJM
#define DAC1_DACC0_DACTE _DAC1_DACC0.Bits.DACTE
#define DAC1_DACC0_DACE _DAC1_DACC0.Bits.DACE


/*** DAC1_DACDLeft - DAC1 Data Register - Left Justified; 0x000000F6 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Data Bit 0 */
    byte BIT1        :1;                                       /* Data Bit 1 */
    byte BIT2        :1;                                       /* Data Bit 2 */
    byte BIT3        :1;                                       /* Data Bit 3 */
    byte BIT4        :1;                                       /* Data Bit 4 */
    byte BIT5        :1;                                       /* Data Bit 5 */
    byte BIT6        :1;                                       /* Data Bit 6 */
    byte BIT7        :1;                                       /* Data Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DAC1_DACDLeftSTR;
extern volatile DAC1_DACDLeftSTR _DAC1_DACDLeft @(REG_BASE + 0x000000F6);
#define DAC1_DACDLeft _DAC1_DACDLeft.Byte
#define DAC1_DACDLeft_BIT0 _DAC1_DACDLeft.Bits.BIT0
#define DAC1_DACDLeft_BIT1 _DAC1_DACDLeft.Bits.BIT1
#define DAC1_DACDLeft_BIT2 _DAC1_DACDLeft.Bits.BIT2
#define DAC1_DACDLeft_BIT3 _DAC1_DACDLeft.Bits.BIT3
#define DAC1_DACDLeft_BIT4 _DAC1_DACDLeft.Bits.BIT4
#define DAC1_DACDLeft_BIT5 _DAC1_DACDLeft.Bits.BIT5
#define DAC1_DACDLeft_BIT6 _DAC1_DACDLeft.Bits.BIT6
#define DAC1_DACDLeft_BIT7 _DAC1_DACDLeft.Bits.BIT7
#define DAC1_DACDLeft_BIT _DAC1_DACDLeft.MergedBits.grpBIT


/*** DAC1_DACDRight - DAC1 Data Register - Right Justified; 0x000000F7 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* Data Bit 0 */
    byte BIT1        :1;                                       /* Data Bit 1 */
    byte BIT2        :1;                                       /* Data Bit 2 */
    byte BIT3        :1;                                       /* Data Bit 3 */
    byte BIT4        :1;                                       /* Data Bit 4 */
    byte BIT5        :1;                                       /* Data Bit 5 */
    byte BIT6        :1;                                       /* Data Bit 6 */
    byte BIT7        :1;                                       /* Data Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} DAC1_DACDRightSTR;
extern volatile DAC1_DACDRightSTR _DAC1_DACDRight @(REG_BASE + 0x000000F7);
#define DAC1_DACDRight _DAC1_DACDRight.Byte
#define DAC1_DACDRight_BIT0 _DAC1_DACDRight.Bits.BIT0
#define DAC1_DACDRight_BIT1 _DAC1_DACDRight.Bits.BIT1
#define DAC1_DACDRight_BIT2 _DAC1_DACDRight.Bits.BIT2
#define DAC1_DACDRight_BIT3 _DAC1_DACDRight.Bits.BIT3
#define DAC1_DACDRight_BIT4 _DAC1_DACDRight.Bits.BIT4
#define DAC1_DACDRight_BIT5 _DAC1_DACDRight.Bits.BIT5
#define DAC1_DACDRight_BIT6 _DAC1_DACDRight.Bits.BIT6
#define DAC1_DACDRight_BIT7 _DAC1_DACDRight.Bits.BIT7
#define DAC1_DACDRight_BIT _DAC1_DACDRight.MergedBits.grpBIT


/*** FCLKDIV - Flash Clock Divider Register; 0x00000100 ***/
typedef union {
  byte Byte;
  struct {
    byte FDIV0       :1;                                       /* Flash Clock Divider Bit 0 */
    byte FDIV1       :1;                                       /* Flash Clock Divider Bit 1 */
    byte FDIV2       :1;                                       /* Flash Clock Divider Bit 2 */
    byte FDIV3       :1;                                       /* Flash Clock Divider Bit 3 */
    byte FDIV4       :1;                                       /* Flash Clock Divider Bit 4 */
    byte FDIV5       :1;                                       /* Flash Clock Divider Bit 5 */
    byte PRDIV8      :1;                                       /* Enable Prescaler by 8 */
    byte FDIVLD      :1;                                       /* Flash Clock Divider Loaded */
  } Bits;
  struct {
    byte grpFDIV :6;
    byte grpPRDIV_8 :1;
    byte         :1;
  } MergedBits;
} FCLKDIVSTR;
extern volatile FCLKDIVSTR _FCLKDIV @(REG_BASE + 0x00000100);
#define FCLKDIV _FCLKDIV.Byte
#define FCLKDIV_FDIV0 _FCLKDIV.Bits.FDIV0
#define FCLKDIV_FDIV1 _FCLKDIV.Bits.FDIV1
#define FCLKDIV_FDIV2 _FCLKDIV.Bits.FDIV2
#define FCLKDIV_FDIV3 _FCLKDIV.Bits.FDIV3
#define FCLKDIV_FDIV4 _FCLKDIV.Bits.FDIV4
#define FCLKDIV_FDIV5 _FCLKDIV.Bits.FDIV5
#define FCLKDIV_PRDIV8 _FCLKDIV.Bits.PRDIV8
#define FCLKDIV_FDIVLD _FCLKDIV.Bits.FDIVLD
#define FCLKDIV_FDIV _FCLKDIV.MergedBits.grpFDIV


/*** FSEC - Flash Security Register; 0x00000101 ***/
typedef union {
  byte Byte;
  struct {
    byte SEC0        :1;                                       /* Memory security bit 0 */
    byte SEC1        :1;                                       /* Memory security bit 1 */
    byte NV2         :1;                                       /* Non Volatile flag bit 2 */
    byte NV3         :1;                                       /* Non Volatile flag bit 3 */
    byte NV4         :1;                                       /* Non Volatile flag bit 4 */
    byte NV5         :1;                                       /* Non Volatile flag bit 5 */
    byte NV6         :1;                                       /* Non Volatile flag bit 6 */
    byte KEYEN       :1;                                       /* Enable backdoor key to security */
  } Bits;
  struct {
    byte grpSEC  :2;
    byte grpNV_2 :5;
    byte         :1;
  } MergedBits;
} FSECSTR;
extern volatile FSECSTR _FSEC @(REG_BASE + 0x00000101);
#define FSEC _FSEC.Byte
#define FSEC_SEC0 _FSEC.Bits.SEC0
#define FSEC_SEC1 _FSEC.Bits.SEC1
#define FSEC_NV2 _FSEC.Bits.NV2
#define FSEC_NV3 _FSEC.Bits.NV3
#define FSEC_NV4 _FSEC.Bits.NV4
#define FSEC_NV5 _FSEC.Bits.NV5
#define FSEC_NV6 _FSEC.Bits.NV6
#define FSEC_KEYEN _FSEC.Bits.KEYEN
#define FSEC_SEC _FSEC.MergedBits.grpSEC
#define FSEC_NV_2 _FSEC.MergedBits.grpNV_2
#define FSEC_NV FSEC_NV_2


/*** FCNFG - Flash Configuration Register; 0x00000103 ***/
typedef union {
  byte Byte;
  struct {
    byte BKSEL0      :1;                                       /* Register bank select 0 */
    byte BKSEL1      :1;                                       /* Register bank select 1 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte KEYACC      :1;                                       /* Enable Security Key Writing */
    byte CCIE        :1;                                       /* Command Complete Interrupt Enable */
    byte CBEIE       :1;                                       /* Command Buffers Empty Interrupt Enable */
  } Bits;
  struct {
    byte grpBKSEL :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} FCNFGSTR;
extern volatile FCNFGSTR _FCNFG @(REG_BASE + 0x00000103);
#define FCNFG _FCNFG.Byte
#define FCNFG_BKSEL0 _FCNFG.Bits.BKSEL0
#define FCNFG_BKSEL1 _FCNFG.Bits.BKSEL1
#define FCNFG_KEYACC _FCNFG.Bits.KEYACC
#define FCNFG_CCIE _FCNFG.Bits.CCIE
#define FCNFG_CBEIE _FCNFG.Bits.CBEIE
#define FCNFG_BKSEL _FCNFG.MergedBits.grpBKSEL


/*** FPROT - Flash Protection Register; 0x00000104 ***/
typedef union {
  byte Byte;
  struct {
    byte FPLS0       :1;                                       /* Flash Protection Lower Address size 0 */
    byte FPLS1       :1;                                       /* Flash Protection Lower Address size 1 */
    byte FPLDIS      :1;                                       /* Flash Protection Lower address range disable */
    byte FPHS0       :1;                                       /* Flash Protection Higher address size 0 */
    byte FPHS1       :1;                                       /* Flash Protection Higher address size 1 */
    byte FPHDIS      :1;                                       /* Flash Protection Higher address range disable */
    byte NV6         :1;                                       /* Non Volatile Flag Bit */
    byte FPOPEN      :1;                                       /* Opens the flash block or subsections of it for program or erase */
  } Bits;
  struct {
    byte grpFPLS :2;
    byte         :1;
    byte grpFPHS :2;
    byte         :1;
    byte grpNV_6 :1;
    byte         :1;
  } MergedBits;
} FPROTSTR;
extern volatile FPROTSTR _FPROT @(REG_BASE + 0x00000104);
#define FPROT _FPROT.Byte
#define FPROT_FPLS0 _FPROT.Bits.FPLS0
#define FPROT_FPLS1 _FPROT.Bits.FPLS1
#define FPROT_FPLDIS _FPROT.Bits.FPLDIS
#define FPROT_FPHS0 _FPROT.Bits.FPHS0
#define FPROT_FPHS1 _FPROT.Bits.FPHS1
#define FPROT_FPHDIS _FPROT.Bits.FPHDIS
#define FPROT_NV6 _FPROT.Bits.NV6
#define FPROT_FPOPEN _FPROT.Bits.FPOPEN
#define FPROT_FPLS _FPROT.MergedBits.grpFPLS
#define FPROT_FPHS _FPROT.MergedBits.grpFPHS


/*** FSTAT - Flash Status Register; 0x00000105 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte BLANK       :1;                                       /* Blank Verify Flag */
    byte             :1; 
    byte ACCERR      :1;                                       /* Access error */
    byte PVIOL       :1;                                       /* Protection violation */
    byte CCIF        :1;                                       /* Command Complete Interrupt Flag */
    byte CBEIF       :1;                                       /* Command Buffers Empty Interrupt Flag */
  } Bits;
} FSTATSTR;
extern volatile FSTATSTR _FSTAT @(REG_BASE + 0x00000105);
#define FSTAT _FSTAT.Byte
#define FSTAT_BLANK _FSTAT.Bits.BLANK
#define FSTAT_ACCERR _FSTAT.Bits.ACCERR
#define FSTAT_PVIOL _FSTAT.Bits.PVIOL
#define FSTAT_CCIF _FSTAT.Bits.CCIF
#define FSTAT_CBEIF _FSTAT.Bits.CBEIF


/*** FCMD - Flash Command Buffer and Register; 0x00000106 ***/
typedef union {
  byte Byte;
  struct {
    byte CMDB0       :1;                                       /* NVM User Mode Command Bit 0 */
    byte             :1; 
    byte CMDB2       :1;                                       /* NVM User Mode Command Bit 2 */
    byte             :1; 
    byte             :1; 
    byte CMDB5       :1;                                       /* NVM User Mode Command Bit 5 */
    byte CMDB6       :1;                                       /* NVM User Mode Command Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpCMDB :1;
    byte         :1;
    byte grpCMDB_2 :1;
    byte         :1;
    byte         :1;
    byte grpCMDB_5 :2;
    byte         :1;
  } MergedBits;
} FCMDSTR;
extern volatile FCMDSTR _FCMD @(REG_BASE + 0x00000106);
#define FCMD _FCMD.Byte
#define FCMD_CMDB0 _FCMD.Bits.CMDB0
#define FCMD_CMDB2 _FCMD.Bits.CMDB2
#define FCMD_CMDB5 _FCMD.Bits.CMDB5
#define FCMD_CMDB6 _FCMD.Bits.CMDB6
#define FCMD_CMDB_5 _FCMD.MergedBits.grpCMDB_5
#define FCMD_CMDB FCMD_CMDB_5


/*** TIM1_TIOS - TIM1 Timer Input Capture/Output Compare Select; 0x00000140 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte IOS4        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 4 */
    byte IOS5        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 5 */
    byte IOS6        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 6 */
    byte IOS7        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpIOS_4 :4;
  } MergedBits;
} TIM1_TIOSSTR;
extern volatile TIM1_TIOSSTR _TIM1_TIOS @(REG_BASE + 0x00000140);
#define TIM1_TIOS _TIM1_TIOS.Byte
#define TIM1_TIOS_IOS4 _TIM1_TIOS.Bits.IOS4
#define TIM1_TIOS_IOS5 _TIM1_TIOS.Bits.IOS5
#define TIM1_TIOS_IOS6 _TIM1_TIOS.Bits.IOS6
#define TIM1_TIOS_IOS7 _TIM1_TIOS.Bits.IOS7
#define TIM1_TIOS_IOS_4 _TIM1_TIOS.MergedBits.grpIOS_4
#define TIM1_TIOS_IOS TIM1_TIOS_IOS_4


/*** TIM1_CFORC - TIM1 Timer Compare Force Register; 0x00000141 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FOC4        :1;                                       /* Force Output Compare Action for Channel 4 */
    byte FOC5        :1;                                       /* Force Output Compare Action for Channel 5 */
    byte FOC6        :1;                                       /* Force Output Compare Action for Channel 6 */
    byte FOC7        :1;                                       /* Force Output Compare Action for Channel 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFOC_4 :4;
  } MergedBits;
} TIM1_CFORCSTR;
extern volatile TIM1_CFORCSTR _TIM1_CFORC @(REG_BASE + 0x00000141);
#define TIM1_CFORC _TIM1_CFORC.Byte
#define TIM1_CFORC_FOC4 _TIM1_CFORC.Bits.FOC4
#define TIM1_CFORC_FOC5 _TIM1_CFORC.Bits.FOC5
#define TIM1_CFORC_FOC6 _TIM1_CFORC.Bits.FOC6
#define TIM1_CFORC_FOC7 _TIM1_CFORC.Bits.FOC7
#define TIM1_CFORC_FOC_4 _TIM1_CFORC.MergedBits.grpFOC_4
#define TIM1_CFORC_FOC TIM1_CFORC_FOC_4


/*** TIM1_OC7M - TIM1 Output Compare 7 Mask Register; 0x00000142 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte OC7M4       :1;                                       /* Output Compare 7 Mask Bit 4 */
    byte OC7M5       :1;                                       /* Output Compare 7 Mask Bit 5 */
    byte OC7M6       :1;                                       /* Output Compare 7 Mask Bit 6 */
    byte OC7M7       :1;                                       /* Output Compare 7 Mask Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpOC7M_4 :4;
  } MergedBits;
} TIM1_OC7MSTR;
extern volatile TIM1_OC7MSTR _TIM1_OC7M @(REG_BASE + 0x00000142);
#define TIM1_OC7M _TIM1_OC7M.Byte
#define TIM1_OC7M_OC7M4 _TIM1_OC7M.Bits.OC7M4
#define TIM1_OC7M_OC7M5 _TIM1_OC7M.Bits.OC7M5
#define TIM1_OC7M_OC7M6 _TIM1_OC7M.Bits.OC7M6
#define TIM1_OC7M_OC7M7 _TIM1_OC7M.Bits.OC7M7
#define TIM1_OC7M_OC7M_4 _TIM1_OC7M.MergedBits.grpOC7M_4
#define TIM1_OC7M_OC7M TIM1_OC7M_OC7M_4


/*** TIM1_OC7D - TIM1 Output Compare 7 Data Register; 0x00000143 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte OC7D4       :1;                                       /* Output Compare 7 Bit 4 */
    byte OC7D5       :1;                                       /* Output Compare 7 Bit 5 */
    byte OC7D6       :1;                                       /* Output Compare 7 Bit 6 */
    byte OC7D7       :1;                                       /* Output Compare 7 Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpOC7D_4 :4;
  } MergedBits;
} TIM1_OC7DSTR;
extern volatile TIM1_OC7DSTR _TIM1_OC7D @(REG_BASE + 0x00000143);
#define TIM1_OC7D _TIM1_OC7D.Byte
#define TIM1_OC7D_OC7D4 _TIM1_OC7D.Bits.OC7D4
#define TIM1_OC7D_OC7D5 _TIM1_OC7D.Bits.OC7D5
#define TIM1_OC7D_OC7D6 _TIM1_OC7D.Bits.OC7D6
#define TIM1_OC7D_OC7D7 _TIM1_OC7D.Bits.OC7D7
#define TIM1_OC7D_OC7D_4 _TIM1_OC7D.MergedBits.grpOC7D_4
#define TIM1_OC7D_OC7D TIM1_OC7D_OC7D_4


/*** TIM1_TSCR1 - TIM1 Timer System Control Register1; 0x00000146 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TFFCA       :1;                                       /* Timer Fast Flag Clear All */
    byte TSFRZ       :1;                                       /* Timer and Modulus Counter Stop While in Freeze Mode */
    byte TSWAI       :1;                                       /* Timer Module Stops While in Wait */
    byte TEN         :1;                                       /* Timer Enable */
  } Bits;
} TIM1_TSCR1STR;
extern volatile TIM1_TSCR1STR _TIM1_TSCR1 @(REG_BASE + 0x00000146);
#define TIM1_TSCR1 _TIM1_TSCR1.Byte
#define TIM1_TSCR1_TFFCA _TIM1_TSCR1.Bits.TFFCA
#define TIM1_TSCR1_TSFRZ _TIM1_TSCR1.Bits.TSFRZ
#define TIM1_TSCR1_TSWAI _TIM1_TSCR1.Bits.TSWAI
#define TIM1_TSCR1_TEN _TIM1_TSCR1.Bits.TEN


/*** TIM1_TTOV - TIM1 Timer Toggle On Overflow Register; 0x00000147 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOV4        :1;                                       /* Toggle On Overflow Bit 4 */
    byte TOV5        :1;                                       /* Toggle On Overflow Bit 5 */
    byte TOV6        :1;                                       /* Toggle On Overflow Bit 6 */
    byte TOV7        :1;                                       /* Toggle On Overflow Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpTOV_4 :4;
  } MergedBits;
} TIM1_TTOVSTR;
extern volatile TIM1_TTOVSTR _TIM1_TTOV @(REG_BASE + 0x00000147);
#define TIM1_TTOV _TIM1_TTOV.Byte
#define TIM1_TTOV_TOV4 _TIM1_TTOV.Bits.TOV4
#define TIM1_TTOV_TOV5 _TIM1_TTOV.Bits.TOV5
#define TIM1_TTOV_TOV6 _TIM1_TTOV.Bits.TOV6
#define TIM1_TTOV_TOV7 _TIM1_TTOV.Bits.TOV7
#define TIM1_TTOV_TOV_4 _TIM1_TTOV.MergedBits.grpTOV_4
#define TIM1_TTOV_TOV TIM1_TTOV_TOV_4


/*** TIM1_TCTL1 - TIM1 Timer Control Registers 1; 0x00000148 ***/
typedef union {
  byte Byte;
  struct {
    byte OL4         :1;                                       /* Output Level Bit 4 */
    byte OM4         :1;                                       /* Output Mode Bit 4 */
    byte OL5         :1;                                       /* Output Level Bit 5 */
    byte OM5         :1;                                       /* Output Mode Bit 5 */
    byte OL6         :1;                                       /* Output Level Bit 6 */
    byte OM6         :1;                                       /* Output Mode Bit 6 */
    byte OL7         :1;                                       /* Output Level Bit 7 */
    byte OM7         :1;                                       /* Output Mode Bit 7 */
  } Bits;
} TIM1_TCTL1STR;
extern volatile TIM1_TCTL1STR _TIM1_TCTL1 @(REG_BASE + 0x00000148);
#define TIM1_TCTL1 _TIM1_TCTL1.Byte
#define TIM1_TCTL1_OL4 _TIM1_TCTL1.Bits.OL4
#define TIM1_TCTL1_OM4 _TIM1_TCTL1.Bits.OM4
#define TIM1_TCTL1_OL5 _TIM1_TCTL1.Bits.OL5
#define TIM1_TCTL1_OM5 _TIM1_TCTL1.Bits.OM5
#define TIM1_TCTL1_OL6 _TIM1_TCTL1.Bits.OL6
#define TIM1_TCTL1_OM6 _TIM1_TCTL1.Bits.OM6
#define TIM1_TCTL1_OL7 _TIM1_TCTL1.Bits.OL7
#define TIM1_TCTL1_OM7 _TIM1_TCTL1.Bits.OM7


/*** TIM1_TCTL3 - TIM1 Timer Control Register 3; 0x0000014A ***/
typedef union {
  byte Byte;
  struct {
    byte EDG4A       :1;                                       /* Input Capture Edge Control 4A */
    byte EDG4B       :1;                                       /* Input Capture Edge Control 4B */
    byte EDG5A       :1;                                       /* Input Capture Edge Control 5A */
    byte EDG5B       :1;                                       /* Input Capture Edge Control 5B */
    byte EDG6A       :1;                                       /* Input Capture Edge Control 6A */
    byte EDG6B       :1;                                       /* Input Capture Edge Control 6B */
    byte EDG7A       :1;                                       /* Input Capture Edge Control 7A */
    byte EDG7B       :1;                                       /* Input Capture Edge Control 7B */
  } Bits;
} TIM1_TCTL3STR;
extern volatile TIM1_TCTL3STR _TIM1_TCTL3 @(REG_BASE + 0x0000014A);
#define TIM1_TCTL3 _TIM1_TCTL3.Byte
#define TIM1_TCTL3_EDG4A _TIM1_TCTL3.Bits.EDG4A
#define TIM1_TCTL3_EDG4B _TIM1_TCTL3.Bits.EDG4B
#define TIM1_TCTL3_EDG5A _TIM1_TCTL3.Bits.EDG5A
#define TIM1_TCTL3_EDG5B _TIM1_TCTL3.Bits.EDG5B
#define TIM1_TCTL3_EDG6A _TIM1_TCTL3.Bits.EDG6A
#define TIM1_TCTL3_EDG6B _TIM1_TCTL3.Bits.EDG6B
#define TIM1_TCTL3_EDG7A _TIM1_TCTL3.Bits.EDG7A
#define TIM1_TCTL3_EDG7B _TIM1_TCTL3.Bits.EDG7B


/*** TIM1_TIE - TIM1 Timer Interrupt Enable Register; 0x0000014C ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte C4I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 4 */
    byte C5I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 5 */
    byte C6I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 6 */
    byte C7I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 7 */
  } Bits;
} TIM1_TIESTR;
extern volatile TIM1_TIESTR _TIM1_TIE @(REG_BASE + 0x0000014C);
#define TIM1_TIE _TIM1_TIE.Byte
#define TIM1_TIE_C4I _TIM1_TIE.Bits.C4I
#define TIM1_TIE_C5I _TIM1_TIE.Bits.C5I
#define TIM1_TIE_C6I _TIM1_TIE.Bits.C6I
#define TIM1_TIE_C7I _TIM1_TIE.Bits.C7I


/*** TIM1_TSCR2 - TIM1 Timer System Control Register 2; 0x0000014D ***/
typedef union {
  byte Byte;
  struct {
    byte PR0         :1;                                       /* Timer Prescaler Select Bit 0 */
    byte PR1         :1;                                       /* Timer Prescaler Select Bit 1 */
    byte PR2         :1;                                       /* Timer Prescaler Select Bit 2 */
    byte TCRE        :1;                                       /* Timer Counter Reset Enable */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOI         :1;                                       /* Timer Overflow Interrupt Enable */
  } Bits;
  struct {
    byte grpPR   :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} TIM1_TSCR2STR;
extern volatile TIM1_TSCR2STR _TIM1_TSCR2 @(REG_BASE + 0x0000014D);
#define TIM1_TSCR2 _TIM1_TSCR2.Byte
#define TIM1_TSCR2_PR0 _TIM1_TSCR2.Bits.PR0
#define TIM1_TSCR2_PR1 _TIM1_TSCR2.Bits.PR1
#define TIM1_TSCR2_PR2 _TIM1_TSCR2.Bits.PR2
#define TIM1_TSCR2_TCRE _TIM1_TSCR2.Bits.TCRE
#define TIM1_TSCR2_TOI _TIM1_TSCR2.Bits.TOI
#define TIM1_TSCR2_PR _TIM1_TSCR2.MergedBits.grpPR


/*** TIM1_TFLG1 - TIM1 Main Timer Interrupt Flag 1; 0x0000014E ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte C4F         :1;                                       /* Input Capture/Output Compare Channel Flag 4 */
    byte C5F         :1;                                       /* Input Capture/Output Compare Channel Flag 5 */
    byte C6F         :1;                                       /* Input Capture/Output Compare Channel Flag 6 */
    byte C7F         :1;                                       /* Input Capture/Output Compare Channel Flag 7 */
  } Bits;
} TIM1_TFLG1STR;
extern volatile TIM1_TFLG1STR _TIM1_TFLG1 @(REG_BASE + 0x0000014E);
#define TIM1_TFLG1 _TIM1_TFLG1.Byte
#define TIM1_TFLG1_C4F _TIM1_TFLG1.Bits.C4F
#define TIM1_TFLG1_C5F _TIM1_TFLG1.Bits.C5F
#define TIM1_TFLG1_C6F _TIM1_TFLG1.Bits.C6F
#define TIM1_TFLG1_C7F _TIM1_TFLG1.Bits.C7F


/*** TIM1_TFLG2 - TIM1 Main Timer Interrupt Flag 2; 0x0000014F ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOF         :1;                                       /* Timer Overflow Flag */
  } Bits;
} TIM1_TFLG2STR;
extern volatile TIM1_TFLG2STR _TIM1_TFLG2 @(REG_BASE + 0x0000014F);
#define TIM1_TFLG2 _TIM1_TFLG2.Byte
#define TIM1_TFLG2_TOF _TIM1_TFLG2.Bits.TOF


/*** TIM1_PACTL - TIM1 16-Bit Pulse Accumulator A Control Register; 0x00000160 ***/
typedef union {
  byte Byte;
  struct {
    byte PAI         :1;                                       /* Pulse Accumulator Input Interrupt enable */
    byte PAOVI       :1;                                       /* Pulse Accumulator A Overflow Interrupt enable */
    byte CLK0        :1;                                       /* Clock Select Bit 0 */
    byte CLK1        :1;                                       /* Clock Select Bit 1 */
    byte PEDGE       :1;                                       /* Pulse Accumulator Edge Control */
    byte PAMOD       :1;                                       /* Pulse Accumulator Mode */
    byte PAEN        :1;                                       /* Pulse Accumulator A System Enable */
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpCLK  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} TIM1_PACTLSTR;
extern volatile TIM1_PACTLSTR _TIM1_PACTL @(REG_BASE + 0x00000160);
#define TIM1_PACTL _TIM1_PACTL.Byte
#define TIM1_PACTL_PAI _TIM1_PACTL.Bits.PAI
#define TIM1_PACTL_PAOVI _TIM1_PACTL.Bits.PAOVI
#define TIM1_PACTL_CLK0 _TIM1_PACTL.Bits.CLK0
#define TIM1_PACTL_CLK1 _TIM1_PACTL.Bits.CLK1
#define TIM1_PACTL_PEDGE _TIM1_PACTL.Bits.PEDGE
#define TIM1_PACTL_PAMOD _TIM1_PACTL.Bits.PAMOD
#define TIM1_PACTL_PAEN _TIM1_PACTL.Bits.PAEN
#define TIM1_PACTL_CLK _TIM1_PACTL.MergedBits.grpCLK


/*** TIM1_PAFLG - TIM1 Pulse Accumulator A Flag Register; 0x00000161 ***/
typedef union {
  byte Byte;
  struct {
    byte PAIF        :1;                                       /* Pulse Accumulator Input edge Flag */
    byte PAOVF       :1;                                       /* Pulse Accumulator A Overflow Flag */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} TIM1_PAFLGSTR;
extern volatile TIM1_PAFLGSTR _TIM1_PAFLG @(REG_BASE + 0x00000161);
#define TIM1_PAFLG _TIM1_PAFLG.Byte
#define TIM1_PAFLG_PAIF _TIM1_PAFLG.Bits.PAIF
#define TIM1_PAFLG_PAOVF _TIM1_PAFLG.Bits.PAOVF


/*** TIM2_TIOS - TIM2 Timer Input Capture/Output Compare Select; 0x00000180 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte IOS4        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 4 */
    byte IOS5        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 5 */
    byte IOS6        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 6 */
    byte IOS7        :1;                                       /* Input Capture or Output Compare Channel Configuration Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpIOS_4 :4;
  } MergedBits;
} TIM2_TIOSSTR;
extern volatile TIM2_TIOSSTR _TIM2_TIOS @(REG_BASE + 0x00000180);
#define TIM2_TIOS _TIM2_TIOS.Byte
#define TIM2_TIOS_IOS4 _TIM2_TIOS.Bits.IOS4
#define TIM2_TIOS_IOS5 _TIM2_TIOS.Bits.IOS5
#define TIM2_TIOS_IOS6 _TIM2_TIOS.Bits.IOS6
#define TIM2_TIOS_IOS7 _TIM2_TIOS.Bits.IOS7
#define TIM2_TIOS_IOS_4 _TIM2_TIOS.MergedBits.grpIOS_4
#define TIM2_TIOS_IOS TIM2_TIOS_IOS_4


/*** TIM2_CFORC - TIM2 Timer Compare Force Register; 0x00000181 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte FOC4        :1;                                       /* Force Output Compare Action for Channel 4 */
    byte FOC5        :1;                                       /* Force Output Compare Action for Channel 5 */
    byte FOC6        :1;                                       /* Force Output Compare Action for Channel 6 */
    byte FOC7        :1;                                       /* Force Output Compare Action for Channel 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpFOC_4 :4;
  } MergedBits;
} TIM2_CFORCSTR;
extern volatile TIM2_CFORCSTR _TIM2_CFORC @(REG_BASE + 0x00000181);
#define TIM2_CFORC _TIM2_CFORC.Byte
#define TIM2_CFORC_FOC4 _TIM2_CFORC.Bits.FOC4
#define TIM2_CFORC_FOC5 _TIM2_CFORC.Bits.FOC5
#define TIM2_CFORC_FOC6 _TIM2_CFORC.Bits.FOC6
#define TIM2_CFORC_FOC7 _TIM2_CFORC.Bits.FOC7
#define TIM2_CFORC_FOC_4 _TIM2_CFORC.MergedBits.grpFOC_4
#define TIM2_CFORC_FOC TIM2_CFORC_FOC_4


/*** TIM2_OC7M - TIM2 Output Compare 7 Mask Register; 0x00000182 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte OC7M4       :1;                                       /* Output Compare 7 Mask Bit 4 */
    byte OC7M5       :1;                                       /* Output Compare 7 Mask Bit 5 */
    byte OC7M6       :1;                                       /* Output Compare 7 Mask Bit 6 */
    byte OC7M7       :1;                                       /* Output Compare 7 Mask Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpOC7M_4 :4;
  } MergedBits;
} TIM2_OC7MSTR;
extern volatile TIM2_OC7MSTR _TIM2_OC7M @(REG_BASE + 0x00000182);
#define TIM2_OC7M _TIM2_OC7M.Byte
#define TIM2_OC7M_OC7M4 _TIM2_OC7M.Bits.OC7M4
#define TIM2_OC7M_OC7M5 _TIM2_OC7M.Bits.OC7M5
#define TIM2_OC7M_OC7M6 _TIM2_OC7M.Bits.OC7M6
#define TIM2_OC7M_OC7M7 _TIM2_OC7M.Bits.OC7M7
#define TIM2_OC7M_OC7M_4 _TIM2_OC7M.MergedBits.grpOC7M_4
#define TIM2_OC7M_OC7M TIM2_OC7M_OC7M_4


/*** TIM2_OC7D - TIM2 Output Compare 7 Data Register; 0x00000183 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte OC7D4       :1;                                       /* Output Compare 7 Bit 4 */
    byte OC7D5       :1;                                       /* Output Compare 7 Bit 5 */
    byte OC7D6       :1;                                       /* Output Compare 7 Bit 6 */
    byte OC7D7       :1;                                       /* Output Compare 7 Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpOC7D_4 :4;
  } MergedBits;
} TIM2_OC7DSTR;
extern volatile TIM2_OC7DSTR _TIM2_OC7D @(REG_BASE + 0x00000183);
#define TIM2_OC7D _TIM2_OC7D.Byte
#define TIM2_OC7D_OC7D4 _TIM2_OC7D.Bits.OC7D4
#define TIM2_OC7D_OC7D5 _TIM2_OC7D.Bits.OC7D5
#define TIM2_OC7D_OC7D6 _TIM2_OC7D.Bits.OC7D6
#define TIM2_OC7D_OC7D7 _TIM2_OC7D.Bits.OC7D7
#define TIM2_OC7D_OC7D_4 _TIM2_OC7D.MergedBits.grpOC7D_4
#define TIM2_OC7D_OC7D TIM2_OC7D_OC7D_4


/*** TIM2_TSCR1 - TIM2 Timer System Control Register1; 0x00000186 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TFFCA       :1;                                       /* Timer Fast Flag Clear All */
    byte TSFRZ       :1;                                       /* Timer and Modulus Counter Stop While in Freeze Mode */
    byte TSWAI       :1;                                       /* Timer Module Stops While in Wait */
    byte TEN         :1;                                       /* Timer Enable */
  } Bits;
} TIM2_TSCR1STR;
extern volatile TIM2_TSCR1STR _TIM2_TSCR1 @(REG_BASE + 0x00000186);
#define TIM2_TSCR1 _TIM2_TSCR1.Byte
#define TIM2_TSCR1_TFFCA _TIM2_TSCR1.Bits.TFFCA
#define TIM2_TSCR1_TSFRZ _TIM2_TSCR1.Bits.TSFRZ
#define TIM2_TSCR1_TSWAI _TIM2_TSCR1.Bits.TSWAI
#define TIM2_TSCR1_TEN _TIM2_TSCR1.Bits.TEN


/*** TIM2_TTOV - TIM2 Timer Toggle On Overflow Register; 0x00000187 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOV4        :1;                                       /* Toggle On Overflow Bit 4 */
    byte TOV5        :1;                                       /* Toggle On Overflow Bit 5 */
    byte TOV6        :1;                                       /* Toggle On Overflow Bit 6 */
    byte TOV7        :1;                                       /* Toggle On Overflow Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpTOV_4 :4;
  } MergedBits;
} TIM2_TTOVSTR;
extern volatile TIM2_TTOVSTR _TIM2_TTOV @(REG_BASE + 0x00000187);
#define TIM2_TTOV _TIM2_TTOV.Byte
#define TIM2_TTOV_TOV4 _TIM2_TTOV.Bits.TOV4
#define TIM2_TTOV_TOV5 _TIM2_TTOV.Bits.TOV5
#define TIM2_TTOV_TOV6 _TIM2_TTOV.Bits.TOV6
#define TIM2_TTOV_TOV7 _TIM2_TTOV.Bits.TOV7
#define TIM2_TTOV_TOV_4 _TIM2_TTOV.MergedBits.grpTOV_4
#define TIM2_TTOV_TOV TIM2_TTOV_TOV_4


/*** TIM2_TCTL1 - TIM2 Timer Control Registers 1; 0x00000188 ***/
typedef union {
  byte Byte;
  struct {
    byte OL4         :1;                                       /* Output Level Bit 4 */
    byte OM4         :1;                                       /* Output Mode Bit 4 */
    byte OL5         :1;                                       /* Output Level Bit 5 */
    byte OM5         :1;                                       /* Output Mode Bit 5 */
    byte OL6         :1;                                       /* Output Level Bit 6 */
    byte OM6         :1;                                       /* Output Mode Bit 6 */
    byte OL7         :1;                                       /* Output Level Bit 7 */
    byte OM7         :1;                                       /* Output Mode Bit 7 */
  } Bits;
} TIM2_TCTL1STR;
extern volatile TIM2_TCTL1STR _TIM2_TCTL1 @(REG_BASE + 0x00000188);
#define TIM2_TCTL1 _TIM2_TCTL1.Byte
#define TIM2_TCTL1_OL4 _TIM2_TCTL1.Bits.OL4
#define TIM2_TCTL1_OM4 _TIM2_TCTL1.Bits.OM4
#define TIM2_TCTL1_OL5 _TIM2_TCTL1.Bits.OL5
#define TIM2_TCTL1_OM5 _TIM2_TCTL1.Bits.OM5
#define TIM2_TCTL1_OL6 _TIM2_TCTL1.Bits.OL6
#define TIM2_TCTL1_OM6 _TIM2_TCTL1.Bits.OM6
#define TIM2_TCTL1_OL7 _TIM2_TCTL1.Bits.OL7
#define TIM2_TCTL1_OM7 _TIM2_TCTL1.Bits.OM7


/*** TIM2_TCTL3 - TIM2 Timer Control Register 3; 0x0000018A ***/
typedef union {
  byte Byte;
  struct {
    byte EDG4A       :1;                                       /* Input Capture Edge Control 4A */
    byte EDG4B       :1;                                       /* Input Capture Edge Control 4B */
    byte EDG5A       :1;                                       /* Input Capture Edge Control 5A */
    byte EDG5B       :1;                                       /* Input Capture Edge Control 5B */
    byte EDG6A       :1;                                       /* Input Capture Edge Control 6A */
    byte EDG6B       :1;                                       /* Input Capture Edge Control 6B */
    byte EDG7A       :1;                                       /* Input Capture Edge Control 7A */
    byte EDG7B       :1;                                       /* Input Capture Edge Control 7B */
  } Bits;
} TIM2_TCTL3STR;
extern volatile TIM2_TCTL3STR _TIM2_TCTL3 @(REG_BASE + 0x0000018A);
#define TIM2_TCTL3 _TIM2_TCTL3.Byte
#define TIM2_TCTL3_EDG4A _TIM2_TCTL3.Bits.EDG4A
#define TIM2_TCTL3_EDG4B _TIM2_TCTL3.Bits.EDG4B
#define TIM2_TCTL3_EDG5A _TIM2_TCTL3.Bits.EDG5A
#define TIM2_TCTL3_EDG5B _TIM2_TCTL3.Bits.EDG5B
#define TIM2_TCTL3_EDG6A _TIM2_TCTL3.Bits.EDG6A
#define TIM2_TCTL3_EDG6B _TIM2_TCTL3.Bits.EDG6B
#define TIM2_TCTL3_EDG7A _TIM2_TCTL3.Bits.EDG7A
#define TIM2_TCTL3_EDG7B _TIM2_TCTL3.Bits.EDG7B


/*** TIM2_TIE - TIM2 Timer Interrupt Enable Register; 0x0000018C ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte C4I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 4 */
    byte C5I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 5 */
    byte C6I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 6 */
    byte C7I         :1;                                       /* Input Capture/Output Compare Interrupt Enable Bit 7 */
  } Bits;
} TIM2_TIESTR;
extern volatile TIM2_TIESTR _TIM2_TIE @(REG_BASE + 0x0000018C);
#define TIM2_TIE _TIM2_TIE.Byte
#define TIM2_TIE_C4I _TIM2_TIE.Bits.C4I
#define TIM2_TIE_C5I _TIM2_TIE.Bits.C5I
#define TIM2_TIE_C6I _TIM2_TIE.Bits.C6I
#define TIM2_TIE_C7I _TIM2_TIE.Bits.C7I


/*** TIM2_TSCR2 - TIM2 Timer System Control Register 2; 0x0000018D ***/
typedef union {
  byte Byte;
  struct {
    byte PR0         :1;                                       /* Timer Prescaler Select Bit 0 */
    byte PR1         :1;                                       /* Timer Prescaler Select Bit 1 */
    byte PR2         :1;                                       /* Timer Prescaler Select Bit 2 */
    byte TCRE        :1;                                       /* Timer Counter Reset Enable */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOI         :1;                                       /* Timer Overflow Interrupt Enable */
  } Bits;
  struct {
    byte grpPR   :3;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} TIM2_TSCR2STR;
extern volatile TIM2_TSCR2STR _TIM2_TSCR2 @(REG_BASE + 0x0000018D);
#define TIM2_TSCR2 _TIM2_TSCR2.Byte
#define TIM2_TSCR2_PR0 _TIM2_TSCR2.Bits.PR0
#define TIM2_TSCR2_PR1 _TIM2_TSCR2.Bits.PR1
#define TIM2_TSCR2_PR2 _TIM2_TSCR2.Bits.PR2
#define TIM2_TSCR2_TCRE _TIM2_TSCR2.Bits.TCRE
#define TIM2_TSCR2_TOI _TIM2_TSCR2.Bits.TOI
#define TIM2_TSCR2_PR _TIM2_TSCR2.MergedBits.grpPR


/*** TIM2_TFLG1 - TIM2 Main Timer Interrupt Flag 1; 0x0000018E ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte C4F         :1;                                       /* Input Capture/Output Compare Channel Flag 4 */
    byte C5F         :1;                                       /* Input Capture/Output Compare Channel Flag 5 */
    byte C6F         :1;                                       /* Input Capture/Output Compare Channel Flag 6 */
    byte C7F         :1;                                       /* Input Capture/Output Compare Channel Flag 7 */
  } Bits;
} TIM2_TFLG1STR;
extern volatile TIM2_TFLG1STR _TIM2_TFLG1 @(REG_BASE + 0x0000018E);
#define TIM2_TFLG1 _TIM2_TFLG1.Byte
#define TIM2_TFLG1_C4F _TIM2_TFLG1.Bits.C4F
#define TIM2_TFLG1_C5F _TIM2_TFLG1.Bits.C5F
#define TIM2_TFLG1_C6F _TIM2_TFLG1.Bits.C6F
#define TIM2_TFLG1_C7F _TIM2_TFLG1.Bits.C7F


/*** TIM2_TFLG2 - TIM2 Main Timer Interrupt Flag 2; 0x0000018F ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte TOF         :1;                                       /* Timer Overflow Flag */
  } Bits;
} TIM2_TFLG2STR;
extern volatile TIM2_TFLG2STR _TIM2_TFLG2 @(REG_BASE + 0x0000018F);
#define TIM2_TFLG2 _TIM2_TFLG2.Byte
#define TIM2_TFLG2_TOF _TIM2_TFLG2.Bits.TOF


/*** TIM2_PACTL - TIM2 16-Bit Pulse Accumulator A Control Register; 0x000001A0 ***/
typedef union {
  byte Byte;
  struct {
    byte PAI         :1;                                       /* Pulse Accumulator Input Interrupt enable */
    byte PAOVI       :1;                                       /* Pulse Accumulator A Overflow Interrupt enable */
    byte CLK0        :1;                                       /* Clock Select Bit 0 */
    byte CLK1        :1;                                       /* Clock Select Bit 1 */
    byte PEDGE       :1;                                       /* Pulse Accumulator Edge Control */
    byte PAMOD       :1;                                       /* Pulse Accumulator Mode */
    byte PAEN        :1;                                       /* Pulse Accumulator A System Enable */
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte grpCLK  :2;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} TIM2_PACTLSTR;
extern volatile TIM2_PACTLSTR _TIM2_PACTL @(REG_BASE + 0x000001A0);
#define TIM2_PACTL _TIM2_PACTL.Byte
#define TIM2_PACTL_PAI _TIM2_PACTL.Bits.PAI
#define TIM2_PACTL_PAOVI _TIM2_PACTL.Bits.PAOVI
#define TIM2_PACTL_CLK0 _TIM2_PACTL.Bits.CLK0
#define TIM2_PACTL_CLK1 _TIM2_PACTL.Bits.CLK1
#define TIM2_PACTL_PEDGE _TIM2_PACTL.Bits.PEDGE
#define TIM2_PACTL_PAMOD _TIM2_PACTL.Bits.PAMOD
#define TIM2_PACTL_PAEN _TIM2_PACTL.Bits.PAEN
#define TIM2_PACTL_CLK _TIM2_PACTL.MergedBits.grpCLK


/*** TIM2_PAFLG - TIM2 Pulse Accumulator A Flag Register; 0x000001A1 ***/
typedef union {
  byte Byte;
  struct {
    byte PAIF        :1;                                       /* Pulse Accumulator Input edge Flag */
    byte PAOVF       :1;                                       /* Pulse Accumulator A Overflow Flag */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
} TIM2_PAFLGSTR;
extern volatile TIM2_PAFLGSTR _TIM2_PAFLG @(REG_BASE + 0x000001A1);
#define TIM2_PAFLG _TIM2_PAFLG.Byte
#define TIM2_PAFLG_PAIF _TIM2_PAFLG.Bits.PAIF
#define TIM2_PAFLG_PAOVF _TIM2_PAFLG.Bits.PAOVF


/*** PWME - PWM Enable Register; 0x000001E0 ***/
typedef union {
  byte Byte;
  struct {
    byte PWME0       :1;                                       /* Pulse Width Channel 0 Enable */
    byte PWME1       :1;                                       /* Pulse Width Channel 1 Enable */
    byte PWME2       :1;                                       /* Pulse Width Channel 2 Enable */
    byte PWME3       :1;                                       /* Pulse Width Channel 3 Enable */
    byte PWME4       :1;                                       /* Pulse Width Channel 4 Enable */
    byte PWME5       :1;                                       /* Pulse Width Channel 5 Enable */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPWME :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PWMESTR;
extern volatile PWMESTR _PWME @(REG_BASE + 0x000001E0);
#define PWME _PWME.Byte
#define PWME_PWME0 _PWME.Bits.PWME0
#define PWME_PWME1 _PWME.Bits.PWME1
#define PWME_PWME2 _PWME.Bits.PWME2
#define PWME_PWME3 _PWME.Bits.PWME3
#define PWME_PWME4 _PWME.Bits.PWME4
#define PWME_PWME5 _PWME.Bits.PWME5
#define PWME_PWME _PWME.MergedBits.grpPWME


/*** PWMPOL - PWM Polarity Register; 0x000001E1 ***/
typedef union {
  byte Byte;
  struct {
    byte PPOL0       :1;                                       /* Pulse Width Channel 0 Polarity */
    byte PPOL1       :1;                                       /* Pulse Width Channel 1 Polarity */
    byte PPOL2       :1;                                       /* Pulse Width Channel 2 Polarity */
    byte PPOL3       :1;                                       /* Pulse Width Channel 3 Polarity */
    byte PPOL4       :1;                                       /* Pulse Width Channel 4 Polarity */
    byte PPOL5       :1;                                       /* Pulse Width Channel 5 Polarity */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPPOL :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PWMPOLSTR;
extern volatile PWMPOLSTR _PWMPOL @(REG_BASE + 0x000001E1);
#define PWMPOL _PWMPOL.Byte
#define PWMPOL_PPOL0 _PWMPOL.Bits.PPOL0
#define PWMPOL_PPOL1 _PWMPOL.Bits.PPOL1
#define PWMPOL_PPOL2 _PWMPOL.Bits.PPOL2
#define PWMPOL_PPOL3 _PWMPOL.Bits.PPOL3
#define PWMPOL_PPOL4 _PWMPOL.Bits.PPOL4
#define PWMPOL_PPOL5 _PWMPOL.Bits.PPOL5
#define PWMPOL_PPOL _PWMPOL.MergedBits.grpPPOL


/*** PWMCLK - PWM Clock Select Register; 0x000001E2 ***/
typedef union {
  byte Byte;
  struct {
    byte PCLK0       :1;                                       /* Pulse Width Channel 0 Clock Select */
    byte PCLK1       :1;                                       /* Pulse Width Channel 1 Clock Select */
    byte PCLK2       :1;                                       /* Pulse Width Channel 2 Clock Select */
    byte PCLK3       :1;                                       /* Pulse Width Channel 3 Clock Select */
    byte PCLK4       :1;                                       /* Pulse Width Channel 4 Clock Select */
    byte PCLK5       :1;                                       /* Pulse Width Channel 5 Clock Select */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPCLK :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PWMCLKSTR;
extern volatile PWMCLKSTR _PWMCLK @(REG_BASE + 0x000001E2);
#define PWMCLK _PWMCLK.Byte
#define PWMCLK_PCLK0 _PWMCLK.Bits.PCLK0
#define PWMCLK_PCLK1 _PWMCLK.Bits.PCLK1
#define PWMCLK_PCLK2 _PWMCLK.Bits.PCLK2
#define PWMCLK_PCLK3 _PWMCLK.Bits.PCLK3
#define PWMCLK_PCLK4 _PWMCLK.Bits.PCLK4
#define PWMCLK_PCLK5 _PWMCLK.Bits.PCLK5
#define PWMCLK_PCLK _PWMCLK.MergedBits.grpPCLK


/*** PWMPRCLK - PWM Prescale Clock Select Register; 0x000001E3 ***/
typedef union {
  byte Byte;
  struct {
    byte PCKA0       :1;                                       /* Prescaler Select for Clock A 0 */
    byte PCKA1       :1;                                       /* Prescaler Select for Clock A 1 */
    byte PCKA2       :1;                                       /* Prescaler Select for Clock A 2 */
    byte             :1; 
    byte PCKB0       :1;                                       /* Prescaler Select for Clock B 0 */
    byte PCKB1       :1;                                       /* Prescaler Select for Clock B 1 */
    byte PCKB2       :1;                                       /* Prescaler Select for Clock B 2 */
    byte             :1; 
  } Bits;
  struct {
    byte grpPCKA :3;
    byte         :1;
    byte grpPCKB :3;
    byte         :1;
  } MergedBits;
} PWMPRCLKSTR;
extern volatile PWMPRCLKSTR _PWMPRCLK @(REG_BASE + 0x000001E3);
#define PWMPRCLK _PWMPRCLK.Byte
#define PWMPRCLK_PCKA0 _PWMPRCLK.Bits.PCKA0
#define PWMPRCLK_PCKA1 _PWMPRCLK.Bits.PCKA1
#define PWMPRCLK_PCKA2 _PWMPRCLK.Bits.PCKA2
#define PWMPRCLK_PCKB0 _PWMPRCLK.Bits.PCKB0
#define PWMPRCLK_PCKB1 _PWMPRCLK.Bits.PCKB1
#define PWMPRCLK_PCKB2 _PWMPRCLK.Bits.PCKB2
#define PWMPRCLK_PCKA _PWMPRCLK.MergedBits.grpPCKA
#define PWMPRCLK_PCKB _PWMPRCLK.MergedBits.grpPCKB


/*** PWMCAE - PWM Center Align Enable Register; 0x000001E4 ***/
typedef union {
  byte Byte;
  struct {
    byte CAE0        :1;                                       /* Center Aligned Output Mode on channel 0 */
    byte CAE1        :1;                                       /* Center Aligned Output Mode on channel 1 */
    byte CAE2        :1;                                       /* Center Aligned Output Mode on channel 2 */
    byte CAE3        :1;                                       /* Center Aligned Output Mode on channel 3 */
    byte CAE4        :1;                                       /* Center Aligned Output Mode on channel 4 */
    byte CAE5        :1;                                       /* Center Aligned Output Mode on channel 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpCAE  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PWMCAESTR;
extern volatile PWMCAESTR _PWMCAE @(REG_BASE + 0x000001E4);
#define PWMCAE _PWMCAE.Byte
#define PWMCAE_CAE0 _PWMCAE.Bits.CAE0
#define PWMCAE_CAE1 _PWMCAE.Bits.CAE1
#define PWMCAE_CAE2 _PWMCAE.Bits.CAE2
#define PWMCAE_CAE3 _PWMCAE.Bits.CAE3
#define PWMCAE_CAE4 _PWMCAE.Bits.CAE4
#define PWMCAE_CAE5 _PWMCAE.Bits.CAE5
#define PWMCAE_CAE _PWMCAE.MergedBits.grpCAE


/*** PWMCTL - PWM Control Register; 0x000001E5 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte PFRZ        :1;                                       /* PWM Counters Stop in Freeze Mode */
    byte PSWAI       :1;                                       /* PWM Stops in Wait Mode */
    byte CON01       :1;                                       /* Concatenate channels 0 and 1 */
    byte CON23       :1;                                       /* Concatenate channels 2 and 3 */
    byte CON45       :1;                                       /* Concatenate channels 4 and 5 */
    byte             :1; 
  } Bits;
} PWMCTLSTR;
extern volatile PWMCTLSTR _PWMCTL @(REG_BASE + 0x000001E5);
#define PWMCTL _PWMCTL.Byte
#define PWMCTL_PFRZ _PWMCTL.Bits.PFRZ
#define PWMCTL_PSWAI _PWMCTL.Bits.PSWAI
#define PWMCTL_CON01 _PWMCTL.Bits.CON01
#define PWMCTL_CON23 _PWMCTL.Bits.CON23
#define PWMCTL_CON45 _PWMCTL.Bits.CON45


/*** PWMSCLA - PWM Scale A Register; 0x000001E8 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* PWM Scale A Bit 0 */
    byte BIT1        :1;                                       /* PWM Scale A Bit 1 */
    byte BIT2        :1;                                       /* PWM Scale A Bit 2 */
    byte BIT3        :1;                                       /* PWM Scale A Bit 3 */
    byte BIT4        :1;                                       /* PWM Scale A Bit 4 */
    byte BIT5        :1;                                       /* PWM Scale A Bit 5 */
    byte BIT6        :1;                                       /* PWM Scale A Bit 6 */
    byte BIT7        :1;                                       /* PWM Scale A Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} PWMSCLASTR;
extern volatile PWMSCLASTR _PWMSCLA @(REG_BASE + 0x000001E8);
#define PWMSCLA _PWMSCLA.Byte
#define PWMSCLA_BIT0 _PWMSCLA.Bits.BIT0
#define PWMSCLA_BIT1 _PWMSCLA.Bits.BIT1
#define PWMSCLA_BIT2 _PWMSCLA.Bits.BIT2
#define PWMSCLA_BIT3 _PWMSCLA.Bits.BIT3
#define PWMSCLA_BIT4 _PWMSCLA.Bits.BIT4
#define PWMSCLA_BIT5 _PWMSCLA.Bits.BIT5
#define PWMSCLA_BIT6 _PWMSCLA.Bits.BIT6
#define PWMSCLA_BIT7 _PWMSCLA.Bits.BIT7
#define PWMSCLA_BIT _PWMSCLA.MergedBits.grpBIT


/*** PWMSCLB - PWM Scale B Register; 0x000001E9 ***/
typedef union {
  byte Byte;
  struct {
    byte BIT0        :1;                                       /* PWM Scale B Bit 0 */
    byte BIT1        :1;                                       /* PWM Scale B Bit 1 */
    byte BIT2        :1;                                       /* PWM Scale B Bit 2 */
    byte BIT3        :1;                                       /* PWM Scale B Bit 3 */
    byte BIT4        :1;                                       /* PWM Scale B Bit 4 */
    byte BIT5        :1;                                       /* PWM Scale B Bit 5 */
    byte BIT6        :1;                                       /* PWM Scale B Bit 6 */
    byte BIT7        :1;                                       /* PWM Scale B Bit 7 */
  } Bits;
  struct {
    byte grpBIT  :8;
  } MergedBits;
} PWMSCLBSTR;
extern volatile PWMSCLBSTR _PWMSCLB @(REG_BASE + 0x000001E9);
#define PWMSCLB _PWMSCLB.Byte
#define PWMSCLB_BIT0 _PWMSCLB.Bits.BIT0
#define PWMSCLB_BIT1 _PWMSCLB.Bits.BIT1
#define PWMSCLB_BIT2 _PWMSCLB.Bits.BIT2
#define PWMSCLB_BIT3 _PWMSCLB.Bits.BIT3
#define PWMSCLB_BIT4 _PWMSCLB.Bits.BIT4
#define PWMSCLB_BIT5 _PWMSCLB.Bits.BIT5
#define PWMSCLB_BIT6 _PWMSCLB.Bits.BIT6
#define PWMSCLB_BIT7 _PWMSCLB.Bits.BIT7
#define PWMSCLB_BIT _PWMSCLB.MergedBits.grpBIT


/*** PWMSDN - PWM Shutdown Register; 0x000001FE ***/
typedef union {
  byte Byte;
  struct {
    byte PWM7ENA     :1;                                       /* PWM emergency shutdown Enable */
    byte PWM7INL     :1;                                       /* PWM shutdown active input level for ch. 7 */
    byte PWM7IN      :1;                                       /* PWM channel 7 input status */
    byte             :1; 
    byte PWMLVL      :1;                                       /* PWM shutdown output Level */
    byte PWMRSTRT    :1;                                       /* PWM Restart */
    byte PWMIE       :1;                                       /* PWM Interrupt Enable */
    byte PWMIF       :1;                                       /* PWM Interrupt Flag */
  } Bits;
} PWMSDNSTR;
extern volatile PWMSDNSTR _PWMSDN @(REG_BASE + 0x000001FE);
#define PWMSDN _PWMSDN.Byte
#define PWMSDN_PWM7ENA _PWMSDN.Bits.PWM7ENA
#define PWMSDN_PWM7INL _PWMSDN.Bits.PWM7INL
#define PWMSDN_PWM7IN _PWMSDN.Bits.PWM7IN
#define PWMSDN_PWMLVL _PWMSDN.Bits.PWMLVL
#define PWMSDN_PWMRSTRT _PWMSDN.Bits.PWMRSTRT
#define PWMSDN_PWMIE _PWMSDN.Bits.PWMIE
#define PWMSDN_PWMIF _PWMSDN.Bits.PWMIF


/*** PMFCFG0 - PMF Configure 0 Register; 0x00000200 ***/
typedef union {
  byte Byte;
  struct {
    byte INDEPA      :1;                                       /* Independent or Complimentary Operation for Pair A */
    byte INDEPB      :1;                                       /* Independent or Complimentary Operation for Pair B */
    byte INDEPC      :1;                                       /* Independent or Complimentary Operation for Pair C */
    byte EDGEA       :1;                                       /* Edge-Aligned or Center-Aligned PWM for Pair A */
    byte EDGEB       :1;                                       /* Edge-Aligned or Center-Aligned PWM for Pair B */
    byte EDGEC       :1;                                       /* Edge-Aligned or Center-Aligned PWM for Pair C */
    byte MTG         :1;                                       /* Multiple Timebase Generators */
    byte WP          :1;                                       /* Write Protect */
  } Bits;
} PMFCFG0STR;
extern volatile PMFCFG0STR _PMFCFG0 @(REG_BASE + 0x00000200);
#define PMFCFG0 _PMFCFG0.Byte
#define PMFCFG0_INDEPA _PMFCFG0.Bits.INDEPA
#define PMFCFG0_INDEPB _PMFCFG0.Bits.INDEPB
#define PMFCFG0_INDEPC _PMFCFG0.Bits.INDEPC
#define PMFCFG0_EDGEA _PMFCFG0.Bits.EDGEA
#define PMFCFG0_EDGEB _PMFCFG0.Bits.EDGEB
#define PMFCFG0_EDGEC _PMFCFG0.Bits.EDGEC
#define PMFCFG0_MTG _PMFCFG0.Bits.MTG
#define PMFCFG0_WP _PMFCFG0.Bits.WP


/*** PMFCFG1 - PMF Configure 1 Register; 0x00000201 ***/
typedef union {
  byte Byte;
  struct {
    byte TOPNEGA     :1;                                       /* Pair A Top-side PWM Polarity */
    byte BOTNEGA     :1;                                       /* Pair A Bottom-side PWM Polarity */
    byte TOPNEGB     :1;                                       /* Pair B Top-side PWM Polarity */
    byte BOTNEGB     :1;                                       /* Pair B Bottom-side PWM Polarity */
    byte TOPNEGC     :1;                                       /* Pair C Top-side PWM Polarity */
    byte BOTNEGC     :1;                                       /* Pair C Bottom-side PWM Polarity */
    byte             :1; 
    byte ENHA        :1;                                       /* Enable Hardware Acceleration */
  } Bits;
} PMFCFG1STR;
extern volatile PMFCFG1STR _PMFCFG1 @(REG_BASE + 0x00000201);
#define PMFCFG1 _PMFCFG1.Byte
#define PMFCFG1_TOPNEGA _PMFCFG1.Bits.TOPNEGA
#define PMFCFG1_BOTNEGA _PMFCFG1.Bits.BOTNEGA
#define PMFCFG1_TOPNEGB _PMFCFG1.Bits.TOPNEGB
#define PMFCFG1_BOTNEGB _PMFCFG1.Bits.BOTNEGB
#define PMFCFG1_TOPNEGC _PMFCFG1.Bits.TOPNEGC
#define PMFCFG1_BOTNEGC _PMFCFG1.Bits.BOTNEGC
#define PMFCFG1_ENHA _PMFCFG1.Bits.ENHA


/*** PMFCFG2 - PMF Configure 2 Register; 0x00000202 ***/
typedef union {
  byte Byte;
  struct {
    byte MSK0        :1;                                       /* Mask PWM 0 */
    byte MSK1        :1;                                       /* Mask PWM 1 */
    byte MSK2        :1;                                       /* Mask PWM 2 */
    byte MSK3        :1;                                       /* Mask PWM 3 */
    byte MSK4        :1;                                       /* Mask PWM 4 */
    byte MSK5        :1;                                       /* Mask PWM 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpMSK  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMFCFG2STR;
extern volatile PMFCFG2STR _PMFCFG2 @(REG_BASE + 0x00000202);
#define PMFCFG2 _PMFCFG2.Byte
#define PMFCFG2_MSK0 _PMFCFG2.Bits.MSK0
#define PMFCFG2_MSK1 _PMFCFG2.Bits.MSK1
#define PMFCFG2_MSK2 _PMFCFG2.Bits.MSK2
#define PMFCFG2_MSK3 _PMFCFG2.Bits.MSK3
#define PMFCFG2_MSK4 _PMFCFG2.Bits.MSK4
#define PMFCFG2_MSK5 _PMFCFG2.Bits.MSK5
#define PMFCFG2_MSK _PMFCFG2.MergedBits.grpMSK


/*** PMFCFG3 - PMF Configure 3 Register; 0x00000203 ***/
typedef union {
  byte Byte;
  struct {
    byte SWAPA       :1;                                       /* Swap Pair A */
    byte SWAPB       :1;                                       /* Swap Pair B */
    byte SWAPC       :1;                                       /* Swap Pair C */
    byte VLMODE0     :1;                                       /* Value Register Load Mode Bit 0 */
    byte VLMODE1     :1;                                       /* Value Register Load Mode Bit 1 */
    byte             :1; 
    byte PMFFRZ      :1;                                       /* PMF stops in FREEZE mode */
    byte PMFWAI      :1;                                       /* PMF stops in WAIT mode */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpVLMODE :2;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMFCFG3STR;
extern volatile PMFCFG3STR _PMFCFG3 @(REG_BASE + 0x00000203);
#define PMFCFG3 _PMFCFG3.Byte
#define PMFCFG3_SWAPA _PMFCFG3.Bits.SWAPA
#define PMFCFG3_SWAPB _PMFCFG3.Bits.SWAPB
#define PMFCFG3_SWAPC _PMFCFG3.Bits.SWAPC
#define PMFCFG3_VLMODE0 _PMFCFG3.Bits.VLMODE0
#define PMFCFG3_VLMODE1 _PMFCFG3.Bits.VLMODE1
#define PMFCFG3_PMFFRZ _PMFCFG3.Bits.PMFFRZ
#define PMFCFG3_PMFWAI _PMFCFG3.Bits.PMFWAI
#define PMFCFG3_VLMODE _PMFCFG3.MergedBits.grpVLMODE


/*** PMFFCTL - PMF fault control register; 0x00000204 ***/
typedef union {
  byte Byte;
  struct {
    byte FIE0        :1;                                       /* Fault 0 Pin Interrupt Enable */
    byte FMODE0      :1;                                       /* Fault 0 Pin Clearing Mode */
    byte FIE1        :1;                                       /* Fault 1 Pin Interrupt Enable */
    byte FMODE1      :1;                                       /* Fault 1 Pin Clearing Mode */
    byte FIE2        :1;                                       /* Fault 2 Pin Interrupt Enable */
    byte FMODE2      :1;                                       /* Fault 2 Pin Clearing Mode */
    byte FIE3        :1;                                       /* Fault 3 Pin Interrupt Enable */
    byte FMODE3      :1;                                       /* Fault 3 Pin Clearing Mode */
  } Bits;
} PMFFCTLSTR;
extern volatile PMFFCTLSTR _PMFFCTL @(REG_BASE + 0x00000204);
#define PMFFCTL _PMFFCTL.Byte
#define PMFFCTL_FIE0 _PMFFCTL.Bits.FIE0
#define PMFFCTL_FMODE0 _PMFFCTL.Bits.FMODE0
#define PMFFCTL_FIE1 _PMFFCTL.Bits.FIE1
#define PMFFCTL_FMODE1 _PMFFCTL.Bits.FMODE1
#define PMFFCTL_FIE2 _PMFFCTL.Bits.FIE2
#define PMFFCTL_FMODE2 _PMFFCTL.Bits.FMODE2
#define PMFFCTL_FIE3 _PMFFCTL.Bits.FIE3
#define PMFFCTL_FMODE3 _PMFFCTL.Bits.FMODE3


/*** PMFFPIN - PMF fault acknowledge register; 0x00000205 ***/
typedef union {
  byte Byte;
  struct {
    byte FPINE0      :1;                                       /* Fault 0 Pin Enable */
    byte             :1; 
    byte FPINE1      :1;                                       /* Fault 1 Pin Enable */
    byte             :1; 
    byte FPINE2      :1;                                       /* Fault 2 Pin Enable */
    byte             :1; 
    byte FPINE3      :1;                                       /* Fault 3 Pin Enable */
    byte             :1; 
  } Bits;
} PMFFPINSTR;
extern volatile PMFFPINSTR _PMFFPIN @(REG_BASE + 0x00000205);
#define PMFFPIN _PMFFPIN.Byte
#define PMFFPIN_FPINE0 _PMFFPIN.Bits.FPINE0
#define PMFFPIN_FPINE1 _PMFFPIN.Bits.FPINE1
#define PMFFPIN_FPINE2 _PMFFPIN.Bits.FPINE2
#define PMFFPIN_FPINE3 _PMFFPIN.Bits.FPINE3


/*** PMFFSTA - PMF fault status register; 0x00000206 ***/
typedef union {
  byte Byte;
  struct {
    byte FFLAG0      :1;                                       /* Fault 0 pin Flag */
    byte             :1; 
    byte FFLAG1      :1;                                       /* Fault 1 pin Flag */
    byte             :1; 
    byte FFLAG2      :1;                                       /* Fault 2 pin Flag */
    byte             :1; 
    byte FFLAG3      :1;                                       /* Fault 3 pin Flag */
    byte             :1; 
  } Bits;
} PMFFSTASTR;
extern volatile PMFFSTASTR _PMFFSTA @(REG_BASE + 0x00000206);
#define PMFFSTA _PMFFSTA.Byte
#define PMFFSTA_FFLAG0 _PMFFSTA.Bits.FFLAG0
#define PMFFSTA_FFLAG1 _PMFFSTA.Bits.FFLAG1
#define PMFFSTA_FFLAG2 _PMFFSTA.Bits.FFLAG2
#define PMFFSTA_FFLAG3 _PMFFSTA.Bits.FFLAG3


/*** PMFQSMP - PMF fault qualifying samples register; 0x00000207 ***/
typedef union {
  byte Byte;
  struct {
    byte QSMP00      :1;                                       /* Fault 0 Qualifying samples, bit 0 */
    byte QSMP01      :1;                                       /* Fault 0 Qualifying samples, bit 1 */
    byte QSMP10      :1;                                       /* Fault 1 Qualifying samples, bit 0 */
    byte QSMP11      :1;                                       /* Fault 1 Qualifying samples, bit 1 */
    byte QSMP20      :1;                                       /* Fault 2 Qualifying samples, bit 0 */
    byte QSMP21      :1;                                       /* Fault 2 Qualifying samples, bit 1 */
    byte QSMP30      :1;                                       /* Fault 3 Qualifying samples, bit 0 */
    byte QSMP31      :1;                                       /* Fault 3 Qualifying samples, bit 1 */
  } Bits;
  struct {
    byte grpQSMP0 :2;
    byte grpQSMP_10 :2;
    byte grpQSMP_20 :2;
    byte grpQSMP_30 :2;
  } MergedBits;
} PMFQSMPSTR;
extern volatile PMFQSMPSTR _PMFQSMP @(REG_BASE + 0x00000207);
#define PMFQSMP _PMFQSMP.Byte
#define PMFQSMP_QSMP00 _PMFQSMP.Bits.QSMP00
#define PMFQSMP_QSMP01 _PMFQSMP.Bits.QSMP01
#define PMFQSMP_QSMP10 _PMFQSMP.Bits.QSMP10
#define PMFQSMP_QSMP11 _PMFQSMP.Bits.QSMP11
#define PMFQSMP_QSMP20 _PMFQSMP.Bits.QSMP20
#define PMFQSMP_QSMP21 _PMFQSMP.Bits.QSMP21
#define PMFQSMP_QSMP30 _PMFQSMP.Bits.QSMP30
#define PMFQSMP_QSMP31 _PMFQSMP.Bits.QSMP31
#define PMFQSMP_QSMP0 _PMFQSMP.MergedBits.grpQSMP0
#define PMFQSMP_QSMP_10 _PMFQSMP.MergedBits.grpQSMP_10
#define PMFQSMP_QSMP_20 _PMFQSMP.MergedBits.grpQSMP_20
#define PMFQSMP_QSMP_30 _PMFQSMP.MergedBits.grpQSMP_30
#define PMFQSMP_QSMP PMFQSMP_QSMP_10


/*** PMFDMPA - PMF disable mapping A register; 0x00000208 ***/
typedef union {
  byte Byte;
  struct {
    byte DMP00       :1;                                       /* PMF Disable Mapping A Bit 00 */
    byte DMP01       :1;                                       /* PMF Disable Mapping A Bit 01 */
    byte DMP02       :1;                                       /* PMF Disable Mapping A Bit 02 */
    byte DMP03       :1;                                       /* PMF Disable Mapping A Bit 03 */
    byte DMP10       :1;                                       /* PMF Disable Mapping A Bit 10 */
    byte DMP11       :1;                                       /* PMF Disable Mapping A Bit 11 */
    byte DMP12       :1;                                       /* PMF Disable Mapping A Bit 12 */
    byte DMP13       :1;                                       /* PMF Disable Mapping A Bit 13 */
  } Bits;
  struct {
    byte grpDMP0 :4;
    byte grpDMP_10 :4;
  } MergedBits;
} PMFDMPASTR;
extern volatile PMFDMPASTR _PMFDMPA @(REG_BASE + 0x00000208);
#define PMFDMPA _PMFDMPA.Byte
#define PMFDMPA_DMP00 _PMFDMPA.Bits.DMP00
#define PMFDMPA_DMP01 _PMFDMPA.Bits.DMP01
#define PMFDMPA_DMP02 _PMFDMPA.Bits.DMP02
#define PMFDMPA_DMP03 _PMFDMPA.Bits.DMP03
#define PMFDMPA_DMP10 _PMFDMPA.Bits.DMP10
#define PMFDMPA_DMP11 _PMFDMPA.Bits.DMP11
#define PMFDMPA_DMP12 _PMFDMPA.Bits.DMP12
#define PMFDMPA_DMP13 _PMFDMPA.Bits.DMP13
#define PMFDMPA_DMP0 _PMFDMPA.MergedBits.grpDMP0
#define PMFDMPA_DMP_10 _PMFDMPA.MergedBits.grpDMP_10
#define PMFDMPA_DMP PMFDMPA_DMP_10


/*** PMFDMPB - PMF disable mapping B register; 0x00000209 ***/
typedef union {
  byte Byte;
  struct {
    byte DMP20       :1;                                       /* PMF Disable Mapping A Bit 20 */
    byte DMP21       :1;                                       /* PMF Disable Mapping A Bit 21 */
    byte DMP22       :1;                                       /* PMF Disable Mapping A Bit 22 */
    byte DMP23       :1;                                       /* PMF Disable Mapping A Bit 23 */
    byte DMP30       :1;                                       /* PMF Disable Mapping A Bit 30 */
    byte DMP31       :1;                                       /* PMF Disable Mapping A Bit 31 */
    byte DMP32       :1;                                       /* PMF Disable Mapping A Bit 32 */
    byte DMP33       :1;                                       /* PMF Disable Mapping A Bit 33 */
  } Bits;
  struct {
    byte grpDMP_20 :4;
    byte grpDMP_30 :4;
  } MergedBits;
} PMFDMPBSTR;
extern volatile PMFDMPBSTR _PMFDMPB @(REG_BASE + 0x00000209);
#define PMFDMPB _PMFDMPB.Byte
#define PMFDMPB_DMP20 _PMFDMPB.Bits.DMP20
#define PMFDMPB_DMP21 _PMFDMPB.Bits.DMP21
#define PMFDMPB_DMP22 _PMFDMPB.Bits.DMP22
#define PMFDMPB_DMP23 _PMFDMPB.Bits.DMP23
#define PMFDMPB_DMP30 _PMFDMPB.Bits.DMP30
#define PMFDMPB_DMP31 _PMFDMPB.Bits.DMP31
#define PMFDMPB_DMP32 _PMFDMPB.Bits.DMP32
#define PMFDMPB_DMP33 _PMFDMPB.Bits.DMP33
#define PMFDMPB_DMP_20 _PMFDMPB.MergedBits.grpDMP_20
#define PMFDMPB_DMP_30 _PMFDMPB.MergedBits.grpDMP_30
#define PMFDMPB_DMP PMFDMPB_DMP_20


/*** PMFDMPC - PMF disable mapping C register; 0x0000020A ***/
typedef union {
  byte Byte;
  struct {
    byte DMP40       :1;                                       /* PMF Disable Mapping A Bit 40 */
    byte DMP41       :1;                                       /* PMF Disable Mapping A Bit 41 */
    byte DMP42       :1;                                       /* PMF Disable Mapping A Bit 42 */
    byte DMP43       :1;                                       /* PMF Disable Mapping A Bit 43 */
    byte DMP50       :1;                                       /* PMF Disable Mapping A Bit 50 */
    byte DMP51       :1;                                       /* PMF Disable Mapping A Bit 51 */
    byte DMP52       :1;                                       /* PMF Disable Mapping A Bit 52 */
    byte DMP53       :1;                                       /* PMF Disable Mapping A Bit 53 */
  } Bits;
  struct {
    byte grpDMP_40 :4;
    byte grpDMP_50 :4;
  } MergedBits;
} PMFDMPCSTR;
extern volatile PMFDMPCSTR _PMFDMPC @(REG_BASE + 0x0000020A);
#define PMFDMPC _PMFDMPC.Byte
#define PMFDMPC_DMP40 _PMFDMPC.Bits.DMP40
#define PMFDMPC_DMP41 _PMFDMPC.Bits.DMP41
#define PMFDMPC_DMP42 _PMFDMPC.Bits.DMP42
#define PMFDMPC_DMP43 _PMFDMPC.Bits.DMP43
#define PMFDMPC_DMP50 _PMFDMPC.Bits.DMP50
#define PMFDMPC_DMP51 _PMFDMPC.Bits.DMP51
#define PMFDMPC_DMP52 _PMFDMPC.Bits.DMP52
#define PMFDMPC_DMP53 _PMFDMPC.Bits.DMP53
#define PMFDMPC_DMP_40 _PMFDMPC.MergedBits.grpDMP_40
#define PMFDMPC_DMP_50 _PMFDMPC.MergedBits.grpDMP_50
#define PMFDMPC_DMP PMFDMPC_DMP_40


/*** PMFOUTC - PMF output control register; 0x0000020C ***/
typedef union {
  byte Byte;
  struct {
    byte OUTCTL0     :1;                                       /* PMF Output Control Bit 0 */
    byte OUTCTL1     :1;                                       /* PMF Output Control Bit 1 */
    byte OUTCTL2     :1;                                       /* PMF Output Control Bit 2 */
    byte OUTCTL3     :1;                                       /* PMF Output Control Bit 3 */
    byte OUTCTL4     :1;                                       /* PMF Output Control Bit 4 */
    byte OUTCTL5     :1;                                       /* PMF Output Control Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpOUTCTL :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMFOUTCSTR;
extern volatile PMFOUTCSTR _PMFOUTC @(REG_BASE + 0x0000020C);
#define PMFOUTC _PMFOUTC.Byte
#define PMFOUTC_OUTCTL0 _PMFOUTC.Bits.OUTCTL0
#define PMFOUTC_OUTCTL1 _PMFOUTC.Bits.OUTCTL1
#define PMFOUTC_OUTCTL2 _PMFOUTC.Bits.OUTCTL2
#define PMFOUTC_OUTCTL3 _PMFOUTC.Bits.OUTCTL3
#define PMFOUTC_OUTCTL4 _PMFOUTC.Bits.OUTCTL4
#define PMFOUTC_OUTCTL5 _PMFOUTC.Bits.OUTCTL5
#define PMFOUTC_OUTCTL _PMFOUTC.MergedBits.grpOUTCTL


/*** PMFOUTB - PMF output control bit register; 0x0000020D ***/
typedef union {
  byte Byte;
  struct {
    byte OUT0        :1;                                       /* PMF Output Control Bit Bit 0 */
    byte OUT1        :1;                                       /* PMF Output Control Bit Bit 1 */
    byte OUT2        :1;                                       /* PMF Output Control Bit Bit 2 */
    byte OUT3        :1;                                       /* PMF Output Control Bit Bit 3 */
    byte OUT4        :1;                                       /* PMF Output Control Bit Bit 4 */
    byte OUT5        :1;                                       /* PMF Output Control Bit Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpOUT  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMFOUTBSTR;
extern volatile PMFOUTBSTR _PMFOUTB @(REG_BASE + 0x0000020D);
#define PMFOUTB _PMFOUTB.Byte
#define PMFOUTB_OUT0 _PMFOUTB.Bits.OUT0
#define PMFOUTB_OUT1 _PMFOUTB.Bits.OUT1
#define PMFOUTB_OUT2 _PMFOUTB.Bits.OUT2
#define PMFOUTB_OUT3 _PMFOUTB.Bits.OUT3
#define PMFOUTB_OUT4 _PMFOUTB.Bits.OUT4
#define PMFOUTB_OUT5 _PMFOUTB.Bits.OUT5
#define PMFOUTB_OUT _PMFOUTB.MergedBits.grpOUT


/*** PMFDTMS - PMF deadtime sample register; 0x0000020E ***/
typedef union {
  byte Byte;
  struct {
    byte DT0         :1;                                       /* PMF Deadtime Sample Bit 0 */
    byte DT1         :1;                                       /* PMF Deadtime Sample Bit 1 */
    byte DT2         :1;                                       /* PMF Deadtime Sample Bit 2 */
    byte DT3         :1;                                       /* PMF Deadtime Sample Bit 3 */
    byte DT4         :1;                                       /* PMF Deadtime Sample Bit 4 */
    byte DT5         :1;                                       /* PMF Deadtime Sample Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpDT   :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMFDTMSSTR;
extern volatile PMFDTMSSTR _PMFDTMS @(REG_BASE + 0x0000020E);
#define PMFDTMS _PMFDTMS.Byte
#define PMFDTMS_DT0 _PMFDTMS.Bits.DT0
#define PMFDTMS_DT1 _PMFDTMS.Bits.DT1
#define PMFDTMS_DT2 _PMFDTMS.Bits.DT2
#define PMFDTMS_DT3 _PMFDTMS.Bits.DT3
#define PMFDTMS_DT4 _PMFDTMS.Bits.DT4
#define PMFDTMS_DT5 _PMFDTMS.Bits.DT5
#define PMFDTMS_DT _PMFDTMS.MergedBits.grpDT


/*** PMFCCTL - PMF correction control register; 0x0000020F ***/
typedef union {
  byte Byte;
  struct {
    byte IPOLA       :1;                                       /* Current Polarity A */
    byte IPOLB       :1;                                       /* Current Polarity B */
    byte IPOLC       :1;                                       /* Current Polarity C */
    byte             :1; 
    byte ISENS0      :1;                                       /* Current status sensing method Bit 0 */
    byte ISENS1      :1;                                       /* Current status sensing method Bit 1 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpISENS :2;
    byte         :1;
    byte         :1;
  } MergedBits;
} PMFCCTLSTR;
extern volatile PMFCCTLSTR _PMFCCTL @(REG_BASE + 0x0000020F);
#define PMFCCTL _PMFCCTL.Byte
#define PMFCCTL_IPOLA _PMFCCTL.Bits.IPOLA
#define PMFCCTL_IPOLB _PMFCCTL.Bits.IPOLB
#define PMFCCTL_IPOLC _PMFCCTL.Bits.IPOLC
#define PMFCCTL_ISENS0 _PMFCCTL.Bits.ISENS0
#define PMFCCTL_ISENS1 _PMFCCTL.Bits.ISENS1
#define PMFCCTL_ISENS _PMFCCTL.MergedBits.grpISENS


/*** PMFENCA - PMF Enable Control A Register; 0x00000220 ***/
typedef union {
  byte Byte;
  struct {
    byte PWMRIEA     :1;                                       /* PWM Reload Interrupt Enable A */
    byte LDOKA       :1;                                       /* Load Okay A */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte PWMENA      :1;                                       /* PWM Generator A Enable */
  } Bits;
} PMFENCASTR;
extern volatile PMFENCASTR _PMFENCA @(REG_BASE + 0x00000220);
#define PMFENCA _PMFENCA.Byte
#define PMFENCA_PWMRIEA _PMFENCA.Bits.PWMRIEA
#define PMFENCA_LDOKA _PMFENCA.Bits.LDOKA
#define PMFENCA_PWMENA _PMFENCA.Bits.PWMENA


/*** PMFFQCA - PMF Frequency Control A Register; 0x00000221 ***/
typedef union {
  byte Byte;
  struct {
    byte PWMRFA      :1;                                       /* PWM Reload Flag A */
    byte PRSCA0      :1;                                       /* Prescaler A, bit 0 */
    byte PRSCA1      :1;                                       /* Prescaler A, bit 1 */
    byte HALFA       :1;                                       /* Half Cycle Reload A */
    byte LDFQA0      :1;                                       /* Load Frequency A, bit 0 */
    byte LDFQA1      :1;                                       /* Load Frequency A, bit 1 */
    byte LDFQA2      :1;                                       /* Load Frequency A, bit 2 */
    byte LDFQA3      :1;                                       /* Load Frequency A, bit 3 */
  } Bits;
  struct {
    byte         :1;
    byte grpPRSCA :2;
    byte         :1;
    byte grpLDFQA :4;
  } MergedBits;
} PMFFQCASTR;
extern volatile PMFFQCASTR _PMFFQCA @(REG_BASE + 0x00000221);
#define PMFFQCA _PMFFQCA.Byte
#define PMFFQCA_PWMRFA _PMFFQCA.Bits.PWMRFA
#define PMFFQCA_PRSCA0 _PMFFQCA.Bits.PRSCA0
#define PMFFQCA_PRSCA1 _PMFFQCA.Bits.PRSCA1
#define PMFFQCA_HALFA _PMFFQCA.Bits.HALFA
#define PMFFQCA_LDFQA0 _PMFFQCA.Bits.LDFQA0
#define PMFFQCA_LDFQA1 _PMFFQCA.Bits.LDFQA1
#define PMFFQCA_LDFQA2 _PMFFQCA.Bits.LDFQA2
#define PMFFQCA_LDFQA3 _PMFFQCA.Bits.LDFQA3
#define PMFFQCA_PRSCA _PMFFQCA.MergedBits.grpPRSCA
#define PMFFQCA_LDFQA _PMFFQCA.MergedBits.grpLDFQA


/*** PMFENCB - PMF enable control B register; 0x00000228 ***/
typedef union {
  byte Byte;
  struct {
    byte PWMRIEB     :1;                                       /* PWM Reload Interrupt Enable B */
    byte LDOKB       :1;                                       /* Load Okay B */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte PWMENB      :1;                                       /* PWM Generator B Enable */
  } Bits;
} PMFENCBSTR;
extern volatile PMFENCBSTR _PMFENCB @(REG_BASE + 0x00000228);
#define PMFENCB _PMFENCB.Byte
#define PMFENCB_PWMRIEB _PMFENCB.Bits.PWMRIEB
#define PMFENCB_LDOKB _PMFENCB.Bits.LDOKB
#define PMFENCB_PWMENB _PMFENCB.Bits.PWMENB


/*** PMFFQCB - PMF Frequency Control B Register; 0x00000229 ***/
typedef union {
  byte Byte;
  struct {
    byte PWMRFB      :1;                                       /* PWM Reload Flag B */
    byte PRSCB0      :1;                                       /* Prescaler B, bit 0 */
    byte PRSCB1      :1;                                       /* Prescaler B, bit 1 */
    byte HALFB       :1;                                       /* Half Cycle Reload B */
    byte LDFQB0      :1;                                       /* Load Frequency B, bit 0 */
    byte LDFQB1      :1;                                       /* Load Frequency B, bit 1 */
    byte LDFQB2      :1;                                       /* Load Frequency B, bit 2 */
    byte LDFQB3      :1;                                       /* Load Frequency B, bit 3 */
  } Bits;
  struct {
    byte         :1;
    byte grpPRSCB :2;
    byte         :1;
    byte grpLDFQB :4;
  } MergedBits;
} PMFFQCBSTR;
extern volatile PMFFQCBSTR _PMFFQCB @(REG_BASE + 0x00000229);
#define PMFFQCB _PMFFQCB.Byte
#define PMFFQCB_PWMRFB _PMFFQCB.Bits.PWMRFB
#define PMFFQCB_PRSCB0 _PMFFQCB.Bits.PRSCB0
#define PMFFQCB_PRSCB1 _PMFFQCB.Bits.PRSCB1
#define PMFFQCB_HALFB _PMFFQCB.Bits.HALFB
#define PMFFQCB_LDFQB0 _PMFFQCB.Bits.LDFQB0
#define PMFFQCB_LDFQB1 _PMFFQCB.Bits.LDFQB1
#define PMFFQCB_LDFQB2 _PMFFQCB.Bits.LDFQB2
#define PMFFQCB_LDFQB3 _PMFFQCB.Bits.LDFQB3
#define PMFFQCB_PRSCB _PMFFQCB.MergedBits.grpPRSCB
#define PMFFQCB_LDFQB _PMFFQCB.MergedBits.grpLDFQB


/*** PMFENCC - PMF Enable Control C Register; 0x00000230 ***/
typedef union {
  byte Byte;
  struct {
    byte PWMRIEC     :1;                                       /* PWM Reload Interrupt Enable C */
    byte LDOKC       :1;                                       /* Load Okay C */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte PWMENC      :1;                                       /* PWM Generator C Enable */
  } Bits;
} PMFENCCSTR;
extern volatile PMFENCCSTR _PMFENCC @(REG_BASE + 0x00000230);
#define PMFENCC _PMFENCC.Byte
#define PMFENCC_PWMRIEC _PMFENCC.Bits.PWMRIEC
#define PMFENCC_LDOKC _PMFENCC.Bits.LDOKC
#define PMFENCC_PWMENC _PMFENCC.Bits.PWMENC


/*** PMFFQCC - PMF Frequency Control C Register; 0x00000231 ***/
typedef union {
  byte Byte;
  struct {
    byte PWMRFC      :1;                                       /* PWM Reload Flag C */
    byte PRSCC0      :1;                                       /* Prescaler C, bit 0 */
    byte PRSCC1      :1;                                       /* Prescaler C, bit 1 */
    byte HALFC       :1;                                       /* Half Cycle Reload C */
    byte LDFQC0      :1;                                       /* Load Frequency C, bit 0 */
    byte LDFQC1      :1;                                       /* Load Frequency C, bit 1 */
    byte LDFQC2      :1;                                       /* Load Frequency C, bit 2 */
    byte LDFQC3      :1;                                       /* Load Frequency C, bit 3 */
  } Bits;
  struct {
    byte         :1;
    byte grpPRSCC :2;
    byte         :1;
    byte grpLDFQC :4;
  } MergedBits;
} PMFFQCCSTR;
extern volatile PMFFQCCSTR _PMFFQCC @(REG_BASE + 0x00000231);
#define PMFFQCC _PMFFQCC.Byte
#define PMFFQCC_PWMRFC _PMFFQCC.Bits.PWMRFC
#define PMFFQCC_PRSCC0 _PMFFQCC.Bits.PRSCC0
#define PMFFQCC_PRSCC1 _PMFFQCC.Bits.PRSCC1
#define PMFFQCC_HALFC _PMFFQCC.Bits.HALFC
#define PMFFQCC_LDFQC0 _PMFFQCC.Bits.LDFQC0
#define PMFFQCC_LDFQC1 _PMFFQCC.Bits.LDFQC1
#define PMFFQCC_LDFQC2 _PMFFQCC.Bits.LDFQC2
#define PMFFQCC_LDFQC3 _PMFFQCC.Bits.LDFQC3
#define PMFFQCC_PRSCC _PMFFQCC.MergedBits.grpPRSCC
#define PMFFQCC_LDFQC _PMFFQCC.MergedBits.grpLDFQC


/*** PTT - Port T I/O Register; 0x00000240 ***/
typedef union {
  byte Byte;
  struct {
    byte PTT0        :1;                                       /* Port T Bit 0 */
    byte PTT1        :1;                                       /* Port T Bit 1 */
    byte PTT2        :1;                                       /* Port T Bit 2 */
    byte PTT3        :1;                                       /* Port T Bit 3 */
    byte PTT4        :1;                                       /* Port T Bit 4 */
    byte PTT5        :1;                                       /* Port T Bit 5 */
    byte PTT6        :1;                                       /* Port T Bit 6 */
    byte PTT7        :1;                                       /* Port T Bit 7 */
  } Bits;
  struct {
    byte grpPTT  :8;
  } MergedBits;
} PTTSTR;
extern volatile PTTSTR _PTT @(REG_BASE + 0x00000240);
#define PTT _PTT.Byte
#define PTT_PTT0 _PTT.Bits.PTT0
#define PTT_PTT1 _PTT.Bits.PTT1
#define PTT_PTT2 _PTT.Bits.PTT2
#define PTT_PTT3 _PTT.Bits.PTT3
#define PTT_PTT4 _PTT.Bits.PTT4
#define PTT_PTT5 _PTT.Bits.PTT5
#define PTT_PTT6 _PTT.Bits.PTT6
#define PTT_PTT7 _PTT.Bits.PTT7
#define PTT_PTT _PTT.MergedBits.grpPTT


/*** PTIT - Port T Input; 0x00000241 ***/
typedef union {
  byte Byte;
  struct {
    byte PTIT0       :1;                                       /* Port T Bit 0 */
    byte PTIT1       :1;                                       /* Port T Bit 1 */
    byte PTIT2       :1;                                       /* Port T Bit 2 */
    byte PTIT3       :1;                                       /* Port T Bit 3 */
    byte PTIT4       :1;                                       /* Port T Bit 4 */
    byte PTIT5       :1;                                       /* Port T Bit 5 */
    byte PTIT6       :1;                                       /* Port T Bit 6 */
    byte PTIT7       :1;                                       /* Port T Bit 7 */
  } Bits;
  struct {
    byte grpPTIT :8;
  } MergedBits;
} PTITSTR;
extern volatile PTITSTR _PTIT @(REG_BASE + 0x00000241);
#define PTIT _PTIT.Byte
#define PTIT_PTIT0 _PTIT.Bits.PTIT0
#define PTIT_PTIT1 _PTIT.Bits.PTIT1
#define PTIT_PTIT2 _PTIT.Bits.PTIT2
#define PTIT_PTIT3 _PTIT.Bits.PTIT3
#define PTIT_PTIT4 _PTIT.Bits.PTIT4
#define PTIT_PTIT5 _PTIT.Bits.PTIT5
#define PTIT_PTIT6 _PTIT.Bits.PTIT6
#define PTIT_PTIT7 _PTIT.Bits.PTIT7
#define PTIT_PTIT _PTIT.MergedBits.grpPTIT


/*** DDRT - Port T Data Direction Register; 0x00000242 ***/
typedef union {
  byte Byte;
  struct {
    byte DDRT0       :1;                                       /* Data Direction Port T Bit 0 */
    byte DDRT1       :1;                                       /* Data Direction Port T Bit 1 */
    byte DDRT2       :1;                                       /* Data Direction Port T Bit 2 */
    byte DDRT3       :1;                                       /* Data Direction Port T Bit 3 */
    byte DDRT4       :1;                                       /* Data Direction Port T Bit 4 */
    byte DDRT5       :1;                                       /* Data Direction Port T Bit 5 */
    byte DDRT6       :1;                                       /* Data Direction Port T Bit 6 */
    byte DDRT7       :1;                                       /* Data Direction Port T Bit 7 */
  } Bits;
  struct {
    byte grpDDRT :8;
  } MergedBits;
} DDRTSTR;
extern volatile DDRTSTR _DDRT @(REG_BASE + 0x00000242);
#define DDRT _DDRT.Byte
#define DDRT_DDRT0 _DDRT.Bits.DDRT0
#define DDRT_DDRT1 _DDRT.Bits.DDRT1
#define DDRT_DDRT2 _DDRT.Bits.DDRT2
#define DDRT_DDRT3 _DDRT.Bits.DDRT3
#define DDRT_DDRT4 _DDRT.Bits.DDRT4
#define DDRT_DDRT5 _DDRT.Bits.DDRT5
#define DDRT_DDRT6 _DDRT.Bits.DDRT6
#define DDRT_DDRT7 _DDRT.Bits.DDRT7
#define DDRT_DDRT _DDRT.MergedBits.grpDDRT


/*** RDRT - Port T Reduced Drive Register; 0x00000243 ***/
typedef union {
  byte Byte;
  struct {
    byte RDRT0       :1;                                       /* Reduced Drive Port T Bit 0 */
    byte RDRT1       :1;                                       /* Reduced Drive Port T Bit 1 */
    byte RDRT2       :1;                                       /* Reduced Drive Port T Bit 2 */
    byte RDRT3       :1;                                       /* Reduced Drive Port T Bit 3 */
    byte RDRT4       :1;                                       /* Reduced Drive Port T Bit 4 */
    byte RDRT5       :1;                                       /* Reduced Drive Port T Bit 5 */
    byte RDRT6       :1;                                       /* Reduced Drive Port T Bit 6 */
    byte RDRT7       :1;                                       /* Reduced Drive Port T Bit 7 */
  } Bits;
  struct {
    byte grpRDRT :8;
  } MergedBits;
} RDRTSTR;
extern volatile RDRTSTR _RDRT @(REG_BASE + 0x00000243);
#define RDRT _RDRT.Byte
#define RDRT_RDRT0 _RDRT.Bits.RDRT0
#define RDRT_RDRT1 _RDRT.Bits.RDRT1
#define RDRT_RDRT2 _RDRT.Bits.RDRT2
#define RDRT_RDRT3 _RDRT.Bits.RDRT3
#define RDRT_RDRT4 _RDRT.Bits.RDRT4
#define RDRT_RDRT5 _RDRT.Bits.RDRT5
#define RDRT_RDRT6 _RDRT.Bits.RDRT6
#define RDRT_RDRT7 _RDRT.Bits.RDRT7
#define RDRT_RDRT _RDRT.MergedBits.grpRDRT


/*** PERT - Port T Pull Device Enable Register; 0x00000244 ***/
typedef union {
  byte Byte;
  struct {
    byte PERT0       :1;                                       /* Pull Device Enable Port T Bit 0 */
    byte PERT1       :1;                                       /* Pull Device Enable Port T Bit 1 */
    byte PERT2       :1;                                       /* Pull Device Enable Port T Bit 2 */
    byte PERT3       :1;                                       /* Pull Device Enable Port T Bit 3 */
    byte PERT4       :1;                                       /* Pull Device Enable Port T Bit 4 */
    byte PERT5       :1;                                       /* Pull Device Enable Port T Bit 5 */
    byte PERT6       :1;                                       /* Pull Device Enable Port T Bit 6 */
    byte PERT7       :1;                                       /* Pull Device Enable Port T Bit 7 */
  } Bits;
  struct {
    byte grpPERT :8;
  } MergedBits;
} PERTSTR;
extern volatile PERTSTR _PERT @(REG_BASE + 0x00000244);
#define PERT _PERT.Byte
#define PERT_PERT0 _PERT.Bits.PERT0
#define PERT_PERT1 _PERT.Bits.PERT1
#define PERT_PERT2 _PERT.Bits.PERT2
#define PERT_PERT3 _PERT.Bits.PERT3
#define PERT_PERT4 _PERT.Bits.PERT4
#define PERT_PERT5 _PERT.Bits.PERT5
#define PERT_PERT6 _PERT.Bits.PERT6
#define PERT_PERT7 _PERT.Bits.PERT7
#define PERT_PERT _PERT.MergedBits.grpPERT


/*** PPST - Port T Polarity Select Register; 0x00000245 ***/
typedef union {
  byte Byte;
  struct {
    byte PPST0       :1;                                       /* Pull Select Port T Bit 0 */
    byte PPST1       :1;                                       /* Pull Select Port T Bit 1 */
    byte PPST2       :1;                                       /* Pull Select Port T Bit 2 */
    byte PPST3       :1;                                       /* Pull Select Port T Bit 3 */
    byte PPST4       :1;                                       /* Pull Select Port T Bit 4 */
    byte PPST5       :1;                                       /* Pull Select Port T Bit 5 */
    byte PPST6       :1;                                       /* Pull Select Port T Bit 6 */
    byte PPST7       :1;                                       /* Pull Select Port T Bit 7 */
  } Bits;
  struct {
    byte grpPPST :8;
  } MergedBits;
} PPSTSTR;
extern volatile PPSTSTR _PPST @(REG_BASE + 0x00000245);
#define PPST _PPST.Byte
#define PPST_PPST0 _PPST.Bits.PPST0
#define PPST_PPST1 _PPST.Bits.PPST1
#define PPST_PPST2 _PPST.Bits.PPST2
#define PPST_PPST3 _PPST.Bits.PPST3
#define PPST_PPST4 _PPST.Bits.PPST4
#define PPST_PPST5 _PPST.Bits.PPST5
#define PPST_PPST6 _PPST.Bits.PPST6
#define PPST_PPST7 _PPST.Bits.PPST7
#define PPST_PPST _PPST.MergedBits.grpPPST


/*** PTS - Port S I/O Register; 0x00000248 ***/
typedef union {
  byte Byte;
  struct {
    byte PTS0        :1;                                       /* Port S Bit 0 */
    byte PTS1        :1;                                       /* Port S Bit 1 */
    byte PTS2        :1;                                       /* Port S Bit 2 */
    byte PTS3        :1;                                       /* Port S Bit 3 */
    byte PTS4        :1;                                       /* Port S Bit 4 */
    byte PTS5        :1;                                       /* Port S Bit 5 */
    byte PTS6        :1;                                       /* Port S Bit 6 */
    byte PTS7        :1;                                       /* Port S Bit 7 */
  } Bits;
  struct {
    byte grpPTS  :8;
  } MergedBits;
} PTSSTR;
extern volatile PTSSTR _PTS @(REG_BASE + 0x00000248);
#define PTS _PTS.Byte
#define PTS_PTS0 _PTS.Bits.PTS0
#define PTS_PTS1 _PTS.Bits.PTS1
#define PTS_PTS2 _PTS.Bits.PTS2
#define PTS_PTS3 _PTS.Bits.PTS3
#define PTS_PTS4 _PTS.Bits.PTS4
#define PTS_PTS5 _PTS.Bits.PTS5
#define PTS_PTS6 _PTS.Bits.PTS6
#define PTS_PTS7 _PTS.Bits.PTS7
#define PTS_PTS _PTS.MergedBits.grpPTS


/*** PTIS - Port S Input; 0x00000249 ***/
typedef union {
  byte Byte;
  struct {
    byte PTIS0       :1;                                       /* Port S Bit 0 */
    byte PTIS1       :1;                                       /* Port S Bit 1 */
    byte PTIS2       :1;                                       /* Port S Bit 2 */
    byte PTIS3       :1;                                       /* Port S Bit 3 */
    byte PTIS4       :1;                                       /* Port S Bit 4 */
    byte PTIS5       :1;                                       /* Port S Bit 5 */
    byte PTIS6       :1;                                       /* Port S Bit 6 */
    byte PTIS7       :1;                                       /* Port S Bit 7 */
  } Bits;
  struct {
    byte grpPTIS :8;
  } MergedBits;
} PTISSTR;
extern volatile PTISSTR _PTIS @(REG_BASE + 0x00000249);
#define PTIS _PTIS.Byte
#define PTIS_PTIS0 _PTIS.Bits.PTIS0
#define PTIS_PTIS1 _PTIS.Bits.PTIS1
#define PTIS_PTIS2 _PTIS.Bits.PTIS2
#define PTIS_PTIS3 _PTIS.Bits.PTIS3
#define PTIS_PTIS4 _PTIS.Bits.PTIS4
#define PTIS_PTIS5 _PTIS.Bits.PTIS5
#define PTIS_PTIS6 _PTIS.Bits.PTIS6
#define PTIS_PTIS7 _PTIS.Bits.PTIS7
#define PTIS_PTIS _PTIS.MergedBits.grpPTIS


/*** DDRS - Port S Data Direction Register; 0x0000024A ***/
typedef union {
  byte Byte;
  struct {
    byte DDRS0       :1;                                       /* Data Direction Port S Bit 0 */
    byte DDRS1       :1;                                       /* Data Direction Port S Bit 1 */
    byte DDRS2       :1;                                       /* Data Direction Port S Bit  2 */
    byte DDRS3       :1;                                       /* Data Direction Port S Bit 3 */
    byte DDRS4       :1;                                       /* Data Direction Port S Bit 4 */
    byte DDRS5       :1;                                       /* Data Direction Port S Bit 5 */
    byte DDRS6       :1;                                       /* Data Direction Port S Bit 6 */
    byte DDRS7       :1;                                       /* Data Direction Port S Bit 7 */
  } Bits;
  struct {
    byte grpDDRS :8;
  } MergedBits;
} DDRSSTR;
extern volatile DDRSSTR _DDRS @(REG_BASE + 0x0000024A);
#define DDRS _DDRS.Byte
#define DDRS_DDRS0 _DDRS.Bits.DDRS0
#define DDRS_DDRS1 _DDRS.Bits.DDRS1
#define DDRS_DDRS2 _DDRS.Bits.DDRS2
#define DDRS_DDRS3 _DDRS.Bits.DDRS3
#define DDRS_DDRS4 _DDRS.Bits.DDRS4
#define DDRS_DDRS5 _DDRS.Bits.DDRS5
#define DDRS_DDRS6 _DDRS.Bits.DDRS6
#define DDRS_DDRS7 _DDRS.Bits.DDRS7
#define DDRS_DDRS _DDRS.MergedBits.grpDDRS


/*** RDRS - Port S Reduced Drive Register; 0x0000024B ***/
typedef union {
  byte Byte;
  struct {
    byte RDRS0       :1;                                       /* Reduced Drive Port S Bit 0 */
    byte RDRS1       :1;                                       /* Reduced Drive Port S Bit 1 */
    byte RDRS2       :1;                                       /* Reduced Drive Port S Bit 2 */
    byte RDRS3       :1;                                       /* Reduced Drive Port S Bit 3 */
    byte RDRS4       :1;                                       /* Reduced Drive Port S Bit 4 */
    byte RDRS5       :1;                                       /* Reduced Drive Port S Bit 5 */
    byte RDRS6       :1;                                       /* Reduced Drive Port S Bit 6 */
    byte RDRS7       :1;                                       /* Reduced Drive Port S Bit 7 */
  } Bits;
  struct {
    byte grpRDRS :8;
  } MergedBits;
} RDRSSTR;
extern volatile RDRSSTR _RDRS @(REG_BASE + 0x0000024B);
#define RDRS _RDRS.Byte
#define RDRS_RDRS0 _RDRS.Bits.RDRS0
#define RDRS_RDRS1 _RDRS.Bits.RDRS1
#define RDRS_RDRS2 _RDRS.Bits.RDRS2
#define RDRS_RDRS3 _RDRS.Bits.RDRS3
#define RDRS_RDRS4 _RDRS.Bits.RDRS4
#define RDRS_RDRS5 _RDRS.Bits.RDRS5
#define RDRS_RDRS6 _RDRS.Bits.RDRS6
#define RDRS_RDRS7 _RDRS.Bits.RDRS7
#define RDRS_RDRS _RDRS.MergedBits.grpRDRS


/*** PERS - Port S Pull Device Enable Register; 0x0000024C ***/
typedef union {
  byte Byte;
  struct {
    byte PERS0       :1;                                       /* Pull Device Enable Port S Bit 0 */
    byte PERS1       :1;                                       /* Pull Device Enable Port S Bit 1 */
    byte PERS2       :1;                                       /* Pull Device Enable Port S Bit 2 */
    byte PERS3       :1;                                       /* Pull Device Enable Port S Bit 3 */
    byte PERS4       :1;                                       /* Pull Device Enable Port S Bit 4 */
    byte PERS5       :1;                                       /* Pull Device Enable Port S Bit 5 */
    byte PERS6       :1;                                       /* Pull Device Enable Port S Bit 6 */
    byte PERS7       :1;                                       /* Pull Device Enable Port S Bit 7 */
  } Bits;
  struct {
    byte grpPERS :8;
  } MergedBits;
} PERSSTR;
extern volatile PERSSTR _PERS @(REG_BASE + 0x0000024C);
#define PERS _PERS.Byte
#define PERS_PERS0 _PERS.Bits.PERS0
#define PERS_PERS1 _PERS.Bits.PERS1
#define PERS_PERS2 _PERS.Bits.PERS2
#define PERS_PERS3 _PERS.Bits.PERS3
#define PERS_PERS4 _PERS.Bits.PERS4
#define PERS_PERS5 _PERS.Bits.PERS5
#define PERS_PERS6 _PERS.Bits.PERS6
#define PERS_PERS7 _PERS.Bits.PERS7
#define PERS_PERS _PERS.MergedBits.grpPERS


/*** PPSS - Port S Polarity Select Register; 0x0000024D ***/
typedef union {
  byte Byte;
  struct {
    byte PPSS0       :1;                                       /* Pull Select Port S Bit 0 */
    byte PPSS1       :1;                                       /* Pull Select Port S Bit 1 */
    byte PPSS2       :1;                                       /* Pull Select Port S Bit 2 */
    byte PPSS3       :1;                                       /* Pull Select Port S Bit 3 */
    byte PPSS4       :1;                                       /* Pull Select Port S Bit 4 */
    byte PPSS5       :1;                                       /* Pull Select Port S Bit 5 */
    byte PPSS6       :1;                                       /* Pull Select Port S Bit 6 */
    byte PPSS7       :1;                                       /* Pull Select Port S Bit 7 */
  } Bits;
  struct {
    byte grpPPSS :8;
  } MergedBits;
} PPSSSTR;
extern volatile PPSSSTR _PPSS @(REG_BASE + 0x0000024D);
#define PPSS _PPSS.Byte
#define PPSS_PPSS0 _PPSS.Bits.PPSS0
#define PPSS_PPSS1 _PPSS.Bits.PPSS1
#define PPSS_PPSS2 _PPSS.Bits.PPSS2
#define PPSS_PPSS3 _PPSS.Bits.PPSS3
#define PPSS_PPSS4 _PPSS.Bits.PPSS4
#define PPSS_PPSS5 _PPSS.Bits.PPSS5
#define PPSS_PPSS6 _PPSS.Bits.PPSS6
#define PPSS_PPSS7 _PPSS.Bits.PPSS7
#define PPSS_PPSS _PPSS.MergedBits.grpPPSS


/*** WOMS - Port S Wired-Or Mode Register; 0x0000024E ***/
typedef union {
  byte Byte;
  struct {
    byte WOMS0       :1;                                       /* Wired-Or Mode Port S Bit 0 */
    byte WOMS1       :1;                                       /* Wired-Or Mode Port S Bit 1 */
    byte WOMS2       :1;                                       /* Wired-Or Mode Port S Bit 2 */
    byte WOMS3       :1;                                       /* Wired-Or Mode Port S Bit 3 */
    byte WOMS4       :1;                                       /* Wired-Or Mode Port S Bit 4 */
    byte WOMS5       :1;                                       /* Wired-Or Mode Port S Bit 5 */
    byte WOMS6       :1;                                       /* Wired-Or Mode Port S Bit 6 */
    byte WOMS7       :1;                                       /* Wired-Or Mode Port S Bit 7 */
  } Bits;
  struct {
    byte grpWOMS :8;
  } MergedBits;
} WOMSSTR;
extern volatile WOMSSTR _WOMS @(REG_BASE + 0x0000024E);
#define WOMS _WOMS.Byte
#define WOMS_WOMS0 _WOMS.Bits.WOMS0
#define WOMS_WOMS1 _WOMS.Bits.WOMS1
#define WOMS_WOMS2 _WOMS.Bits.WOMS2
#define WOMS_WOMS3 _WOMS.Bits.WOMS3
#define WOMS_WOMS4 _WOMS.Bits.WOMS4
#define WOMS_WOMS5 _WOMS.Bits.WOMS5
#define WOMS_WOMS6 _WOMS.Bits.WOMS6
#define WOMS_WOMS7 _WOMS.Bits.WOMS7
#define WOMS_WOMS _WOMS.MergedBits.grpWOMS


/*** PTM - Port M I/O Register; 0x00000250 ***/
typedef union {
  byte Byte;
  struct {
    byte PTM0        :1;                                       /* Port T Bit 0 */
    byte PTM1        :1;                                       /* Port T Bit 1 */
    byte             :1; 
    byte PTM3        :1;                                       /* Port T Bit 3 */
    byte PTM4        :1;                                       /* Port T Bit 4 */
    byte PTM5        :1;                                       /* Port T Bit 5 */
    byte PTM6        :1;                                       /* Port T Bit 6 */
    byte PTM7        :1;                                       /* Port T Bit 7 */
  } Bits;
  struct {
    byte grpPTM  :2;
    byte         :1;
    byte grpPTM_3 :5;
  } MergedBits;
} PTMSTR;
extern volatile PTMSTR _PTM @(REG_BASE + 0x00000250);
#define PTM _PTM.Byte
#define PTM_PTM0 _PTM.Bits.PTM0
#define PTM_PTM1 _PTM.Bits.PTM1
#define PTM_PTM3 _PTM.Bits.PTM3
#define PTM_PTM4 _PTM.Bits.PTM4
#define PTM_PTM5 _PTM.Bits.PTM5
#define PTM_PTM6 _PTM.Bits.PTM6
#define PTM_PTM7 _PTM.Bits.PTM7
#define PTM_PTM _PTM.MergedBits.grpPTM
#define PTM_PTM_3 _PTM.MergedBits.grpPTM_3


/*** PTIM - Port M Input; 0x00000251 ***/
typedef union {
  byte Byte;
  struct {
    byte PTIM0       :1;                                       /* Port M Bit 0 */
    byte PTIM1       :1;                                       /* Port M Bit 1 */
    byte             :1; 
    byte PTIM3       :1;                                       /* Port M Bit 3 */
    byte PTIM4       :1;                                       /* Port M Bit 4 */
    byte PTIM5       :1;                                       /* Port M Bit 5 */
    byte PTIM6       :1;                                       /* Port M Bit 6 */
    byte PTIM7       :1;                                       /* Port M Bit 7 */
  } Bits;
  struct {
    byte grpPTIM :2;
    byte         :1;
    byte grpPTIM_3 :5;
  } MergedBits;
} PTIMSTR;
extern volatile PTIMSTR _PTIM @(REG_BASE + 0x00000251);
#define PTIM _PTIM.Byte
#define PTIM_PTIM0 _PTIM.Bits.PTIM0
#define PTIM_PTIM1 _PTIM.Bits.PTIM1
#define PTIM_PTIM3 _PTIM.Bits.PTIM3
#define PTIM_PTIM4 _PTIM.Bits.PTIM4
#define PTIM_PTIM5 _PTIM.Bits.PTIM5
#define PTIM_PTIM6 _PTIM.Bits.PTIM6
#define PTIM_PTIM7 _PTIM.Bits.PTIM7
#define PTIM_PTIM _PTIM.MergedBits.grpPTIM
#define PTIM_PTIM_3 _PTIM.MergedBits.grpPTIM_3


/*** DDRM - Port M Data Direction Register; 0x00000252 ***/
typedef union {
  byte Byte;
  struct {
    byte DDRM0       :1;                                       /* Data Direction Port M Bit 0 */
    byte DDRM1       :1;                                       /* Data Direction Port M Bit 1 */
    byte             :1; 
    byte DDRM3       :1;                                       /* Data Direction Port M Bit 3 */
    byte DDRM4       :1;                                       /* Data Direction Port M Bit 4 */
    byte DDRM5       :1;                                       /* Data Direction Port M Bit 5 */
    byte DDRM6       :1;                                       /* Data Direction Port M Bit 6 */
    byte DDRM7       :1;                                       /* Data Direction Port M Bit 7 */
  } Bits;
  struct {
    byte grpDDRM :2;
    byte         :1;
    byte grpDDRM_3 :5;
  } MergedBits;
} DDRMSTR;
extern volatile DDRMSTR _DDRM @(REG_BASE + 0x00000252);
#define DDRM _DDRM.Byte
#define DDRM_DDRM0 _DDRM.Bits.DDRM0
#define DDRM_DDRM1 _DDRM.Bits.DDRM1
#define DDRM_DDRM3 _DDRM.Bits.DDRM3
#define DDRM_DDRM4 _DDRM.Bits.DDRM4
#define DDRM_DDRM5 _DDRM.Bits.DDRM5
#define DDRM_DDRM6 _DDRM.Bits.DDRM6
#define DDRM_DDRM7 _DDRM.Bits.DDRM7
#define DDRM_DDRM _DDRM.MergedBits.grpDDRM
#define DDRM_DDRM_3 _DDRM.MergedBits.grpDDRM_3


/*** RDRM - Port M Reduced Drive Register; 0x00000253 ***/
typedef union {
  byte Byte;
  struct {
    byte RDRM0       :1;                                       /* Reduced Drive Port M Bit 0 */
    byte RDRM1       :1;                                       /* Reduced Drive Port M Bit 1 */
    byte             :1; 
    byte RDRM3       :1;                                       /* Reduced Drive Port M Bit 3 */
    byte RDRM4       :1;                                       /* Reduced Drive Port M Bit 4 */
    byte RDRM5       :1;                                       /* Reduced Drive Port M Bit 5 */
    byte RDRM6       :1;                                       /* Reduced Drive Port M Bit 6 */
    byte RDRM7       :1;                                       /* Reduced Drive Port M Bit 7 */
  } Bits;
  struct {
    byte grpRDRM :2;
    byte         :1;
    byte grpRDRM_3 :5;
  } MergedBits;
} RDRMSTR;
extern volatile RDRMSTR _RDRM @(REG_BASE + 0x00000253);
#define RDRM _RDRM.Byte
#define RDRM_RDRM0 _RDRM.Bits.RDRM0
#define RDRM_RDRM1 _RDRM.Bits.RDRM1
#define RDRM_RDRM3 _RDRM.Bits.RDRM3
#define RDRM_RDRM4 _RDRM.Bits.RDRM4
#define RDRM_RDRM5 _RDRM.Bits.RDRM5
#define RDRM_RDRM6 _RDRM.Bits.RDRM6
#define RDRM_RDRM7 _RDRM.Bits.RDRM7
#define RDRM_RDRM _RDRM.MergedBits.grpRDRM
#define RDRM_RDRM_3 _RDRM.MergedBits.grpRDRM_3


/*** PERM - Port M Pull Device Enable Register; 0x00000254 ***/
typedef union {
  byte Byte;
  struct {
    byte PERM0       :1;                                       /* Pull Device Enable Port M Bit 0 */
    byte PERM1       :1;                                       /* Pull Device Enable Port M Bit 1 */
    byte             :1; 
    byte PERM3       :1;                                       /* Pull Device Enable Port M Bit 3 */
    byte PERM4       :1;                                       /* Pull Device Enable Port M Bit 4 */
    byte PERM5       :1;                                       /* Pull Device Enable Port M Bit 5 */
    byte PERM6       :1;                                       /* Pull Device Enable Port M Bit 6 */
    byte PERM7       :1;                                       /* Pull Device Enable Port M Bit 7 */
  } Bits;
  struct {
    byte grpPERM :2;
    byte         :1;
    byte grpPERM_3 :5;
  } MergedBits;
} PERMSTR;
extern volatile PERMSTR _PERM @(REG_BASE + 0x00000254);
#define PERM _PERM.Byte
#define PERM_PERM0 _PERM.Bits.PERM0
#define PERM_PERM1 _PERM.Bits.PERM1
#define PERM_PERM3 _PERM.Bits.PERM3
#define PERM_PERM4 _PERM.Bits.PERM4
#define PERM_PERM5 _PERM.Bits.PERM5
#define PERM_PERM6 _PERM.Bits.PERM6
#define PERM_PERM7 _PERM.Bits.PERM7
#define PERM_PERM _PERM.MergedBits.grpPERM
#define PERM_PERM_3 _PERM.MergedBits.grpPERM_3


/*** PPSM - Port M Polarity Select Register; 0x00000255 ***/
typedef union {
  byte Byte;
  struct {
    byte PPSM0       :1;                                       /* Pull Select Port M Bit 0 */
    byte PPSM1       :1;                                       /* Pull Select Port M Bit 1 */
    byte             :1; 
    byte PPSM3       :1;                                       /* Pull Select Port M Bit 3 */
    byte PPSM4       :1;                                       /* Pull Select Port M Bit 4 */
    byte PPSM5       :1;                                       /* Pull Select Port M Bit 5 */
    byte PPSM6       :1;                                       /* Pull Select Port M Bit 6 */
    byte PPSM7       :1;                                       /* Pull Select Port M Bit 7 */
  } Bits;
  struct {
    byte grpPPSM :2;
    byte         :1;
    byte grpPPSM_3 :5;
  } MergedBits;
} PPSMSTR;
extern volatile PPSMSTR _PPSM @(REG_BASE + 0x00000255);
#define PPSM _PPSM.Byte
#define PPSM_PPSM0 _PPSM.Bits.PPSM0
#define PPSM_PPSM1 _PPSM.Bits.PPSM1
#define PPSM_PPSM3 _PPSM.Bits.PPSM3
#define PPSM_PPSM4 _PPSM.Bits.PPSM4
#define PPSM_PPSM5 _PPSM.Bits.PPSM5
#define PPSM_PPSM6 _PPSM.Bits.PPSM6
#define PPSM_PPSM7 _PPSM.Bits.PPSM7
#define PPSM_PPSM _PPSM.MergedBits.grpPPSM
#define PPSM_PPSM_3 _PPSM.MergedBits.grpPPSM_3


/*** WOMM - Port M Wired-Or Mode Register; 0x00000256 ***/
typedef union {
  byte Byte;
  struct {
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte WOMM4       :1;                                       /* Wired-Or Mode Port M Bit 4 */
    byte WOMM5       :1;                                       /* Wired-Or Mode Port M Bit 5 */
    byte WOMM6       :1;                                       /* Wired-Or Mode Port M Bit 6 */
    byte WOMM7       :1;                                       /* Wired-Or Mode Port M Bit 7 */
  } Bits;
  struct {
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
    byte grpWOMM_4 :4;
  } MergedBits;
} WOMMSTR;
extern volatile WOMMSTR _WOMM @(REG_BASE + 0x00000256);
#define WOMM _WOMM.Byte
#define WOMM_WOMM4 _WOMM.Bits.WOMM4
#define WOMM_WOMM5 _WOMM.Bits.WOMM5
#define WOMM_WOMM6 _WOMM.Bits.WOMM6
#define WOMM_WOMM7 _WOMM.Bits.WOMM7
#define WOMM_WOMM_4 _WOMM.MergedBits.grpWOMM_4


/*** PTP - Port P I/O Register; 0x00000258 ***/
typedef union {
  byte Byte;
  struct {
    byte PTP0        :1;                                       /* Port P Bit 0 */
    byte PTP1        :1;                                       /* Port P Bit 1 */
    byte PTP2        :1;                                       /* Port P Bit 2 */
    byte PTP3        :1;                                       /* Port P Bit 3 */
    byte PTP4        :1;                                       /* Port P Bit 4 */
    byte PTP5        :1;                                       /* Port P Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTP  :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PTPSTR;
extern volatile PTPSTR _PTP @(REG_BASE + 0x00000258);
#define PTP _PTP.Byte
#define PTP_PTP0 _PTP.Bits.PTP0
#define PTP_PTP1 _PTP.Bits.PTP1
#define PTP_PTP2 _PTP.Bits.PTP2
#define PTP_PTP3 _PTP.Bits.PTP3
#define PTP_PTP4 _PTP.Bits.PTP4
#define PTP_PTP5 _PTP.Bits.PTP5
#define PTP_PTP _PTP.MergedBits.grpPTP


/*** PTIP - Port P Input; 0x00000259 ***/
typedef union {
  byte Byte;
  struct {
    byte PTIP0       :1;                                       /* Port P Bit 0 */
    byte PTIP1       :1;                                       /* Port P Bit 1 */
    byte PTIP2       :1;                                       /* Port P Bit 2 */
    byte PTIP3       :1;                                       /* Port P Bit 3 */
    byte PTIP4       :1;                                       /* Port P Bit 4 */
    byte PTIP5       :1;                                       /* Port P Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTIP :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PTIPSTR;
extern volatile PTIPSTR _PTIP @(REG_BASE + 0x00000259);
#define PTIP _PTIP.Byte
#define PTIP_PTIP0 _PTIP.Bits.PTIP0
#define PTIP_PTIP1 _PTIP.Bits.PTIP1
#define PTIP_PTIP2 _PTIP.Bits.PTIP2
#define PTIP_PTIP3 _PTIP.Bits.PTIP3
#define PTIP_PTIP4 _PTIP.Bits.PTIP4
#define PTIP_PTIP5 _PTIP.Bits.PTIP5
#define PTIP_PTIP _PTIP.MergedBits.grpPTIP


/*** DDRP - Port P Data Direction Register; 0x0000025A ***/
typedef union {
  byte Byte;
  struct {
    byte DDRP0       :1;                                       /* Data Direction Port P Bit 0 */
    byte DDRP1       :1;                                       /* Data Direction Port P Bit 1 */
    byte DDRP2       :1;                                       /* Data Direction Port P Bit 2 */
    byte DDRP3       :1;                                       /* Data Direction Port P Bit 3 */
    byte DDRP4       :1;                                       /* Data Direction Port P Bit 4 */
    byte DDRP5       :1;                                       /* Data Direction Port P Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpDDRP :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} DDRPSTR;
extern volatile DDRPSTR _DDRP @(REG_BASE + 0x0000025A);
#define DDRP _DDRP.Byte
#define DDRP_DDRP0 _DDRP.Bits.DDRP0
#define DDRP_DDRP1 _DDRP.Bits.DDRP1
#define DDRP_DDRP2 _DDRP.Bits.DDRP2
#define DDRP_DDRP3 _DDRP.Bits.DDRP3
#define DDRP_DDRP4 _DDRP.Bits.DDRP4
#define DDRP_DDRP5 _DDRP.Bits.DDRP5
#define DDRP_DDRP _DDRP.MergedBits.grpDDRP


/*** RDRP - Port P Reduced Drive Register; 0x0000025B ***/
typedef union {
  byte Byte;
  struct {
    byte RDRP0       :1;                                       /* Reduced Drive Port P Bit 0 */
    byte RDRP1       :1;                                       /* Reduced Drive Port P Bit 1 */
    byte RDRP2       :1;                                       /* Reduced Drive Port P Bit 2 */
    byte RDRP3       :1;                                       /* Reduced Drive Port P Bit 3 */
    byte RDRP4       :1;                                       /* Reduced Drive Port P Bit 4 */
    byte RDRP5       :1;                                       /* Reduced Drive Port P Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpRDRP :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} RDRPSTR;
extern volatile RDRPSTR _RDRP @(REG_BASE + 0x0000025B);
#define RDRP _RDRP.Byte
#define RDRP_RDRP0 _RDRP.Bits.RDRP0
#define RDRP_RDRP1 _RDRP.Bits.RDRP1
#define RDRP_RDRP2 _RDRP.Bits.RDRP2
#define RDRP_RDRP3 _RDRP.Bits.RDRP3
#define RDRP_RDRP4 _RDRP.Bits.RDRP4
#define RDRP_RDRP5 _RDRP.Bits.RDRP5
#define RDRP_RDRP _RDRP.MergedBits.grpRDRP


/*** PERP - Port P Pull Device Enable Register; 0x0000025C ***/
typedef union {
  byte Byte;
  struct {
    byte PERP0       :1;                                       /* Pull Device Enable Port P Bit 0 */
    byte PERP1       :1;                                       /* Pull Device Enable Port P Bit 1 */
    byte PERP2       :1;                                       /* Pull Device Enable Port P Bit 2 */
    byte PERP3       :1;                                       /* Pull Device Enable Port P Bit 3 */
    byte PERP4       :1;                                       /* Pull Device Enable Port P Bit 4 */
    byte PERP5       :1;                                       /* Pull Device Enable Port P Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPERP :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PERPSTR;
extern volatile PERPSTR _PERP @(REG_BASE + 0x0000025C);
#define PERP _PERP.Byte
#define PERP_PERP0 _PERP.Bits.PERP0
#define PERP_PERP1 _PERP.Bits.PERP1
#define PERP_PERP2 _PERP.Bits.PERP2
#define PERP_PERP3 _PERP.Bits.PERP3
#define PERP_PERP4 _PERP.Bits.PERP4
#define PERP_PERP5 _PERP.Bits.PERP5
#define PERP_PERP _PERP.MergedBits.grpPERP


/*** PPSP - Port P Polarity Select Register; 0x0000025D ***/
typedef union {
  byte Byte;
  struct {
    byte PPSP0       :1;                                       /* Pull Select Port P Bit 0 */
    byte PPSP1       :1;                                       /* Pull Select Port P Bit 1 */
    byte PPSP2       :1;                                       /* Pull Select Port P Bit 2 */
    byte PPSP3       :1;                                       /* Pull Select Port P Bit 3 */
    byte PPSP4       :1;                                       /* Pull Select Port P Bit 4 */
    byte PPSP5       :1;                                       /* Pull Select Port P Bit 5 */
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPPSP :6;
    byte         :1;
    byte         :1;
  } MergedBits;
} PPSPSTR;
extern volatile PPSPSTR _PPSP @(REG_BASE + 0x0000025D);
#define PPSP _PPSP.Byte
#define PPSP_PPSP0 _PPSP.Bits.PPSP0
#define PPSP_PPSP1 _PPSP.Bits.PPSP1
#define PPSP_PPSP2 _PPSP.Bits.PPSP2
#define PPSP_PPSP3 _PPSP.Bits.PPSP3
#define PPSP_PPSP4 _PPSP.Bits.PPSP4
#define PPSP_PPSP5 _PPSP.Bits.PPSP5
#define PPSP_PPSP _PPSP.MergedBits.grpPPSP


/*** PTQ - Port Q I/O Register; 0x00000260 ***/
typedef union {
  byte Byte;
  struct {
    byte PTQ0        :1;                                       /* Port Q Bit 0 */
    byte PTQ1        :1;                                       /* Port Q Bit 1 */
    byte PTQ2        :1;                                       /* Port Q Bit 2 */
    byte PTQ3        :1;                                       /* Port Q Bit 3 */
    byte PTQ4        :1;                                       /* Port Q Bit 4 */
    byte PTQ5        :1;                                       /* Port Q Bit 5 */
    byte PTQ6        :1;                                       /* Port Q Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpPTQ  :7;
    byte         :1;
  } MergedBits;
} PTQSTR;
extern volatile PTQSTR _PTQ @(REG_BASE + 0x00000260);
#define PTQ _PTQ.Byte
#define PTQ_PTQ0 _PTQ.Bits.PTQ0
#define PTQ_PTQ1 _PTQ.Bits.PTQ1
#define PTQ_PTQ2 _PTQ.Bits.PTQ2
#define PTQ_PTQ3 _PTQ.Bits.PTQ3
#define PTQ_PTQ4 _PTQ.Bits.PTQ4
#define PTQ_PTQ5 _PTQ.Bits.PTQ5
#define PTQ_PTQ6 _PTQ.Bits.PTQ6
#define PTQ_PTQ _PTQ.MergedBits.grpPTQ


/*** PTIQ - Port Q Input Register; 0x00000261 ***/
typedef union {
  byte Byte;
  struct {
    byte PTIQ0       :1;                                       /* Port Q Bit 0 */
    byte PTIQ1       :1;                                       /* Port Q Bit 1 */
    byte PTIQ2       :1;                                       /* Port Q Bit 2 */
    byte PTIQ3       :1;                                       /* Port Q Bit 3 */
    byte PTIQ4       :1;                                       /* Port Q Bit 4 */
    byte PTIQ5       :1;                                       /* Port Q Bit 5 */
    byte PTIQ6       :1;                                       /* Port Q Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpPTIQ :7;
    byte         :1;
  } MergedBits;
} PTIQSTR;
extern volatile PTIQSTR _PTIQ @(REG_BASE + 0x00000261);
#define PTIQ _PTIQ.Byte
#define PTIQ_PTIQ0 _PTIQ.Bits.PTIQ0
#define PTIQ_PTIQ1 _PTIQ.Bits.PTIQ1
#define PTIQ_PTIQ2 _PTIQ.Bits.PTIQ2
#define PTIQ_PTIQ3 _PTIQ.Bits.PTIQ3
#define PTIQ_PTIQ4 _PTIQ.Bits.PTIQ4
#define PTIQ_PTIQ5 _PTIQ.Bits.PTIQ5
#define PTIQ_PTIQ6 _PTIQ.Bits.PTIQ6
#define PTIQ_PTIQ _PTIQ.MergedBits.grpPTIQ


/*** DDRQ - Port Q Data Direction Register; 0x00000262 ***/
typedef union {
  byte Byte;
  struct {
    byte DDRQ0       :1;                                       /* Data Direction Port Q Bit 0 */
    byte DDRQ1       :1;                                       /* Data Direction Port Q Bit 1 */
    byte DDRQ2       :1;                                       /* Data Direction Port Q Bit 2 */
    byte DDRQ3       :1;                                       /* Data Direction Port Q Bit 3 */
    byte DDRQ4       :1;                                       /* Data Direction Port Q Bit 4 */
    byte DDRQ5       :1;                                       /* Data Direction Port Q Bit 5 */
    byte DDRQ6       :1;                                       /* Data Direction Port Q Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpDDRQ :7;
    byte         :1;
  } MergedBits;
} DDRQSTR;
extern volatile DDRQSTR _DDRQ @(REG_BASE + 0x00000262);
#define DDRQ _DDRQ.Byte
#define DDRQ_DDRQ0 _DDRQ.Bits.DDRQ0
#define DDRQ_DDRQ1 _DDRQ.Bits.DDRQ1
#define DDRQ_DDRQ2 _DDRQ.Bits.DDRQ2
#define DDRQ_DDRQ3 _DDRQ.Bits.DDRQ3
#define DDRQ_DDRQ4 _DDRQ.Bits.DDRQ4
#define DDRQ_DDRQ5 _DDRQ.Bits.DDRQ5
#define DDRQ_DDRQ6 _DDRQ.Bits.DDRQ6
#define DDRQ_DDRQ _DDRQ.MergedBits.grpDDRQ


/*** RDRQ - Port Q Reduced Drive Register; 0x00000263 ***/
typedef union {
  byte Byte;
  struct {
    byte RDRQ0       :1;                                       /* Reduced Drive Port Q Bit 0 */
    byte RDRQ1       :1;                                       /* Reduced Drive Port Q Bit 1 */
    byte RDRQ2       :1;                                       /* Reduced Drive Port Q Bit 2 */
    byte RDRQ3       :1;                                       /* Reduced Drive Port Q Bit 3 */
    byte RDRQ4       :1;                                       /* Reduced Drive Port Q Bit 4 */
    byte RDRQ5       :1;                                       /* Reduced Drive Port Q Bit 5 */
    byte RDRQ6       :1;                                       /* Reduced Drive Port Q Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpRDRQ :7;
    byte         :1;
  } MergedBits;
} RDRQSTR;
extern volatile RDRQSTR _RDRQ @(REG_BASE + 0x00000263);
#define RDRQ _RDRQ.Byte
#define RDRQ_RDRQ0 _RDRQ.Bits.RDRQ0
#define RDRQ_RDRQ1 _RDRQ.Bits.RDRQ1
#define RDRQ_RDRQ2 _RDRQ.Bits.RDRQ2
#define RDRQ_RDRQ3 _RDRQ.Bits.RDRQ3
#define RDRQ_RDRQ4 _RDRQ.Bits.RDRQ4
#define RDRQ_RDRQ5 _RDRQ.Bits.RDRQ5
#define RDRQ_RDRQ6 _RDRQ.Bits.RDRQ6
#define RDRQ_RDRQ _RDRQ.MergedBits.grpRDRQ


/*** PERQ - Port Q Pull Device Enable Register; 0x00000264 ***/
typedef union {
  byte Byte;
  struct {
    byte PERQ0       :1;                                       /* Pull Device Enable Port Q Bit 0 */
    byte PERQ1       :1;                                       /* Pull Device Enable Port Q Bit 1 */
    byte PERQ2       :1;                                       /* Pull Device Enable Port Q Bit 2 */
    byte PERQ3       :1;                                       /* Pull Device Enable Port Q Bit 3 */
    byte PERQ4       :1;                                       /* Pull Device Enable Port Q Bit 4 */
    byte PERQ5       :1;                                       /* Pull Device Enable Port Q Bit 5 */
    byte PERQ6       :1;                                       /* Pull Device Enable Port Q Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpPERQ :7;
    byte         :1;
  } MergedBits;
} PERQSTR;
extern volatile PERQSTR _PERQ @(REG_BASE + 0x00000264);
#define PERQ _PERQ.Byte
#define PERQ_PERQ0 _PERQ.Bits.PERQ0
#define PERQ_PERQ1 _PERQ.Bits.PERQ1
#define PERQ_PERQ2 _PERQ.Bits.PERQ2
#define PERQ_PERQ3 _PERQ.Bits.PERQ3
#define PERQ_PERQ4 _PERQ.Bits.PERQ4
#define PERQ_PERQ5 _PERQ.Bits.PERQ5
#define PERQ_PERQ6 _PERQ.Bits.PERQ6
#define PERQ_PERQ _PERQ.MergedBits.grpPERQ


/*** PPSQ - Port Q Polarity Select Register; 0x00000265 ***/
typedef union {
  byte Byte;
  struct {
    byte PPSQ0       :1;                                       /* Pull Select Port Q Bit 0 */
    byte PPSQ1       :1;                                       /* Pull Select Port Q Bit 1 */
    byte PPSQ2       :1;                                       /* Pull Select Port Q Bit 2 */
    byte PPSQ3       :1;                                       /* Pull Select Port Q Bit 3 */
    byte PPSQ4       :1;                                       /* Pull Select Port Q Bit 4 */
    byte PPSQ5       :1;                                       /* Pull Select Port Q Bit 5 */
    byte PPSQ6       :1;                                       /* Pull Select Port Q Bit 6 */
    byte             :1; 
  } Bits;
  struct {
    byte grpPPSQ :7;
    byte         :1;
  } MergedBits;
} PPSQSTR;
extern volatile PPSQSTR _PPSQ @(REG_BASE + 0x00000265);
#define PPSQ _PPSQ.Byte
#define PPSQ_PPSQ0 _PPSQ.Bits.PPSQ0
#define PPSQ_PPSQ1 _PPSQ.Bits.PPSQ1
#define PPSQ_PPSQ2 _PPSQ.Bits.PPSQ2
#define PPSQ_PPSQ3 _PPSQ.Bits.PPSQ3
#define PPSQ_PPSQ4 _PPSQ.Bits.PPSQ4
#define PPSQ_PPSQ5 _PPSQ.Bits.PPSQ5
#define PPSQ_PPSQ6 _PPSQ.Bits.PPSQ6
#define PPSQ_PPSQ _PPSQ.MergedBits.grpPPSQ


/*** PTU - Port U I/O Register; 0x00000268 ***/
typedef union {
  byte Byte;
  struct {
    byte PTU0        :1;                                       /* Port U Bit 0 */
    byte PTU1        :1;                                       /* Port U Bit 1 */
    byte PTU2        :1;                                       /* Port U Bit 2 */
    byte PTU3        :1;                                       /* Port U Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTU  :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PTUSTR;
extern volatile PTUSTR _PTU @(REG_BASE + 0x00000268);
#define PTU _PTU.Byte
#define PTU_PTU0 _PTU.Bits.PTU0
#define PTU_PTU1 _PTU.Bits.PTU1
#define PTU_PTU2 _PTU.Bits.PTU2
#define PTU_PTU3 _PTU.Bits.PTU3
#define PTU_PTU _PTU.MergedBits.grpPTU


/*** PTIU - Port U Input Register; 0x00000269 ***/
typedef union {
  byte Byte;
  struct {
    byte PTIU0       :1;                                       /* Port U Bit 0 */
    byte PTIU1       :1;                                       /* Port U Bit 1 */
    byte PTIU2       :1;                                       /* Port U Bit 2 */
    byte PTIU3       :1;                                       /* Port U Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPTIU :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PTIUSTR;
extern volatile PTIUSTR _PTIU @(REG_BASE + 0x00000269);
#define PTIU _PTIU.Byte
#define PTIU_PTIU0 _PTIU.Bits.PTIU0
#define PTIU_PTIU1 _PTIU.Bits.PTIU1
#define PTIU_PTIU2 _PTIU.Bits.PTIU2
#define PTIU_PTIU3 _PTIU.Bits.PTIU3
#define PTIU_PTIU _PTIU.MergedBits.grpPTIU


/*** DDRU - Port U Data Direction Register; 0x0000026A ***/
typedef union {
  byte Byte;
  struct {
    byte DDRU0       :1;                                       /* Data Direction Port U Bit 0 */
    byte DDRU1       :1;                                       /* Data Direction Port U Bit 1 */
    byte DDRU2       :1;                                       /* Data Direction Port U Bit 2 */
    byte DDRU3       :1;                                       /* Data Direction Port U Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpDDRU :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} DDRUSTR;
extern volatile DDRUSTR _DDRU @(REG_BASE + 0x0000026A);
#define DDRU _DDRU.Byte
#define DDRU_DDRU0 _DDRU.Bits.DDRU0
#define DDRU_DDRU1 _DDRU.Bits.DDRU1
#define DDRU_DDRU2 _DDRU.Bits.DDRU2
#define DDRU_DDRU3 _DDRU.Bits.DDRU3
#define DDRU_DDRU _DDRU.MergedBits.grpDDRU


/*** RDRU - Port U Reduced Drive Register; 0x0000026B ***/
typedef union {
  byte Byte;
  struct {
    byte RDRU0       :1;                                       /* Reduced Drive Port U Bit 0 */
    byte RDRU1       :1;                                       /* Reduced Drive Port U Bit 1 */
    byte RDRU2       :1;                                       /* Reduced Drive Port U Bit 2 */
    byte RDRU3       :1;                                       /* Reduced Drive Port U Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpRDRU :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} RDRUSTR;
extern volatile RDRUSTR _RDRU @(REG_BASE + 0x0000026B);
#define RDRU _RDRU.Byte
#define RDRU_RDRU0 _RDRU.Bits.RDRU0
#define RDRU_RDRU1 _RDRU.Bits.RDRU1
#define RDRU_RDRU2 _RDRU.Bits.RDRU2
#define RDRU_RDRU3 _RDRU.Bits.RDRU3
#define RDRU_RDRU _RDRU.MergedBits.grpRDRU


/*** PERU - Port U Pull Device Enable Register; 0x0000026C ***/
typedef union {
  byte Byte;
  struct {
    byte PERU0       :1;                                       /* Pull Device Enable Port U Bit 0 */
    byte PERU1       :1;                                       /* Pull Device Enable Port U Bit 1 */
    byte PERU2       :1;                                       /* Pull Device Enable Port U Bit 2 */
    byte PERU3       :1;                                       /* Pull Device Enable Port U Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPERU :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PERUSTR;
extern volatile PERUSTR _PERU @(REG_BASE + 0x0000026C);
#define PERU _PERU.Byte
#define PERU_PERU0 _PERU.Bits.PERU0
#define PERU_PERU1 _PERU.Bits.PERU1
#define PERU_PERU2 _PERU.Bits.PERU2
#define PERU_PERU3 _PERU.Bits.PERU3
#define PERU_PERU _PERU.MergedBits.grpPERU


/*** PPSU - PortJP Polarity Select Register; 0x0000026D ***/
typedef union {
  byte Byte;
  struct {
    byte PPSU0       :1;                                       /* Pull Select Port U Bit 0 */
    byte PPSU1       :1;                                       /* Pull Select Port U Bit 1 */
    byte PPSU2       :1;                                       /* Pull Select Port U Bit 2 */
    byte PPSU3       :1;                                       /* Pull Select Port U Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpPPSU :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} PPSUSTR;
extern volatile PPSUSTR _PPSU @(REG_BASE + 0x0000026D);
#define PPSU _PPSU.Byte
#define PPSU_PPSU0 _PPSU.Bits.PPSU0
#define PPSU_PPSU1 _PPSU.Bits.PPSU1
#define PPSU_PPSU2 _PPSU.Bits.PPSU2
#define PPSU_PPSU3 _PPSU.Bits.PPSU3
#define PPSU_PPSU _PPSU.MergedBits.grpPPSU


/*** MODRR - Port U Module Routing Register; 0x0000026E ***/
typedef union {
  byte Byte;
  struct {
    byte MODRR0      :1;                                       /* Port U Module Routing Bit 0 */
    byte MODRR1      :1;                                       /* Port U Module Routing Bit 1 */
    byte MODRR2      :1;                                       /* Port U Module Routing Bit 2 */
    byte MODRR3      :1;                                       /* Port U Module Routing Bit 3 */
    byte             :1; 
    byte             :1; 
    byte             :1; 
    byte             :1; 
  } Bits;
  struct {
    byte grpMODRR :4;
    byte         :1;
    byte         :1;
    byte         :1;
    byte         :1;
  } MergedBits;
} MODRRSTR;
extern volatile MODRRSTR _MODRR @(REG_BASE + 0x0000026E);
#define MODRR _MODRR.Byte
#define MODRR_MODRR0 _MODRR.Bits.MODRR0
#define MODRR_MODRR1 _MODRR.Bits.MODRR1
#define MODRR_MODRR2 _MODRR.Bits.MODRR2
#define MODRR_MODRR3 _MODRR.Bits.MODRR3
#define MODRR_MODRR _MODRR.MergedBits.grpMODRR


  /* Watchdog reset macro */
#ifdef _lint
  #define __RESET_WATCHDOG()  /* empty */
#else
  #define __RESET_WATCHDOG() {asm sta COPCTL;}  /* Just write a byte to feed the dog */
#endif

#endif

/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 03.33 for 
**     the Motorola HCS12 series of microcontrollers.
**
** ###################################################################
*/

