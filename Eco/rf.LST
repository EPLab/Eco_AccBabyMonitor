C51 COMPILER V8.05a   RF                                                                   10/13/2011 15:47:29 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE RF
OBJECT MODULE PLACED IN rf.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE rf.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // $Id: rf.c,v 1.2 2007/05/15 03:13:23 yoos Exp $
   2          /*
   3           * (C) 2006 The Regents of the University of California. All Rights Reserved.
   4           * Created by Seung-mok Yoo, Department of Electrical Engineering & Computer
   5           * Science
   6           *
   7           * Copyright (C) 2006 The Regents of the University of California. All Rights
   8           * Reserved. Permission to use, copy, modify, and distribute this software and
   9           * its documentation for educational, research and non-profit purposes, without
  10           * fee, and without a written agreement is hereby granted, provided that the
  11           * above copyright notice, this paragraph and the following two paragraphs
  12           * appear in all copies. This software program and documentation are
  13           * copyrighted by The Regents of the University of California ("The University
  14           * of California").
  15           *
  16           * THE SOFTWARE PROGRAM AND DOCUMENTATION ARE SUPPLIED "AS IS," WITHOUT ANY
  17           * ACCOMPANYING SERVICES FROM THE UNIVERSITY OF CALFORNIA. FURTHERMORE, THE
  18           * UNIVERSITY OF CALIFORNIA DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM
  19           * WILL BE UNINTERRUPTED OR ERROR-FREE. THE END-USER UNDERSTANDS THAT THE
  20           * PROGRAM WAS DEVELOPED FOR RESEARCH PURPOSES AND IS ADVISED NOT TO RELY
  21           * EXCLUSIVELY ON THE PROGRAM FOR ANY REASON.
  22           *
  23           * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
  24           * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
  25           * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
  26           * EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  27           * SUCH DAMAGES. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
  28           * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  29           * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
  30           * HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
  31           * OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
  32           * MODIFICATIONS. 
  33           */
  34          #include "io.h"
  35          #include "spi.h"
  36          #include "rf.h"
  37          #include "misc.h"                               // delayms
  38          
  39          #define _TX_DELAY
  40          
  41          #define CONFIG_LENGTH           15
  42          #define ADDR_INDEX                      9   // Index to address bytes in RFConfig.buf
  43          
  44          
  45          const char txconf[CONFIG_LENGTH] =
  46          {
  47                  PAYLOAD_SZ << 3,                                // DATA2_W
  48                  PAYLOAD_SZ << 3,                                // DATA1_W
  49                  0x00, 0x00, 0x00, 0x00, 0x00,   // ADDR2
  50                  //0x00, 0x12, 0x34, 0x56, 0x78, // ADDR1
  51                  0x00, 0x00, 0x65, 0x65, 0x65,   // ADDR1
  52                  0x63,                                                   // 32-bit address & 16 bit CRC enabled
  53                  //(ADDR_W << 2) | CRC_L | CRC_EN,       // 32-bit address & 16 bit CRC enabled
  54                  0x6f,                                                   // one ch, shockburst, 1Mbps, 16MHz, 0dBm
  55                  //0xf4                                                  // CH#: 122 & TX
C51 COMPILER V8.05a   RF                                                                   10/13/2011 15:47:29 PAGE 2   

  56                  //0x04                                                  // CH#: 2 & TX
  57                  //0xEC                                                  // CH#: 118 & TX
  58                  0x0C                                                    // CH#: 6 & TX
  59          };
  60          
  61          const char rxconf[CONFIG_LENGTH] =
  62          {
  63                  PAYLOAD_SZ << 3,                                // DATA2_W
  64                  PAYLOAD_SZ << 3,                                // DATA1_W
  65                  0x00, 0x00, 0x00, 0x00, 0x00,   // ADDR2
  66                  //0x00, 0x87, 0x65, 0x43, 0x21, // ADDR1
  67                  0x00, 0x00, 0x65, 0x65, 0x65,   // ADDR1
  68                  0x63,                                                   // 32-bit address & 16 bit CRC enabled
  69                  //(ADDR_W << 2) | CRC_L | CRC_EN,       // 32-bit address & 16 bit CRC enabled
  70                  0x6f,                                                   // one ch, shockburst, 1Mbps, 16MHz, 0dBm
  71                  //0xf5                                                  // CH#: 122 & RX
  72                  //0x05                                                  // CH#: 2 & RX
  73                  //0xED                                                  // CH#: 118 & RX
  74                  0x0D                                                    // CH#: 6 & RX
  75          };
  76          
  77          
  78          // the following is redundant
  79          // however the overall code size is reduced
  80          static uchar spi_rwByte(uchar b)
  81          {
  82   1              EXIF &= ~0x20;                  // Clear SPI interrupt
  83   1              SPI_DATA = b;                   // Move byte to send to SPI data register
  84   1              while((EXIF & 0x20) == 0x00);   // Wait until SPI hs finished transmitting
  85   1      
  86   1              return SPI_DATA;
  87   1      } // spi_rwByte
  88          
  89          
  90          void rf_init(void)
  91          {
  92   1              PWR_UP = 1;                     // Turn on Radio
  93   1              delayms(3);                                             // Wait > 3ms 
  94   1              SPI_CTRL = 0x02;                // Connect the internal SPI controller to RF1
  95   1      } // rf_init
  96          
  97          
  98          void rf_config(char mode)
  99          {
 100   1              char    i;
 101   1              char    *config;
 102   1      
 103   1              config = (mode == TX ? txconf : rxconf);
 104   1              CS = 1;
 105   1              // 5us Tcs2data delay is required
 106   1              // actually the below for loop and function call
 107   1              // takes about 5us. Thus no explicit Tcs2data is required.
 108   1              for (i = 0; i < CONFIG_LENGTH; i++)
 109   1                      spi_rwByte(config[i]);
 110   1              CS = 0;
 111   1      } // rf_config
 112          
 113          
 114          void rf_txPacket(char *buf)
 115          {
 116   1              char            i;
 117   1              CE = 1;
C51 COMPILER V8.05a   RF                                                                   10/13/2011 15:47:29 PAGE 3   

 118   1              // 5us Tce2data delay is required
 119   1              // actually the below for loop and function call
 120   1              // takes about 5us. Thus no explicit Tce2data is required.
 121   1              for (i = 0; i < ADDR_W; i++)
 122   1                      spi_rwByte(rxconf[ADDR_INDEX+i]);
 123   1      
 124   1              for (i = 0; i < PAYLOAD_SZ; i++)
 125   1                      spi_rwByte(buf[i]);
 126   1              CE = 0;
 127   1      #ifdef _TX_DELAY
 128   1              // T_txdone = Tsby2txSB + Toa = 195us + (256 + 1)us = 452us
 129   1              // refer to the nRF24E1 data sheet
 130   1              //Delay100us(3);                  // actually more than 300us
 131   1              delay2us(150);
 132   1      #endif // _TX_DELAY
 133   1      
 134   1      } // rf_txPacket
 135          
 136          
 137          char rf_rxPacket(char *buf)
 138          {
 139   1              char            i;
 140   1      
 141   1              //CE = 1;
 142   1              while (DR1 == 0);
 143   1              //BUF_RDY = 1;  /**/
 144   1              CE = 0;
 145   1              for (i = 0; i < PAYLOAD_SZ; i++)
 146   1                      buf[i] = spi_rwByte(0);
 147   1      
 148   1      return 1;
 149   1      } // rf_rxPacket


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    168    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
